<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/magma/CompileException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/magma/CompileException.java" />
              <option name="updatedContent" value="package magma;&#10;&#10;public class CompileException extends RuntimeException {&#10;    public CompileException(String message) {&#10;        super(message);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/magma/Compiler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/magma/Compiler.java" />
              <option name="originalContent" value="package magma;&#10;&#10;public class Compiler {&#10;&#9;// TODO: Implement compiler logic&#10;&#9;public String compile(String source) {&#10;&#9;&#9;return source;&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package magma;&#10;&#10;public class Compiler {&#10;&#9;// TODO: Implement compiler logic&#10;&#9;public String compile(String source) {&#10;&#9;    if (source.isEmpty()) {&#10;&#9;        return &quot;&quot;;&#10;&#9;    }&#10;&#9;    throw new CompileException(&quot;Input is not empty&quot;);&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/main/java/magma/CompilerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/main/java/magma/CompilerTest.java" />
              <option name="originalContent" value="package magma;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.junit.jupiter.api.Assertions.fail;&#10;&#10;class CompilerTest {&#10;&#9;@Test&#10;&#9;void testCompileReturnsInput() {&#10;&#9;&#9;Compiler compiler = new Compiler();&#10;&#9;&#9;String input = &quot;test input&quot;;&#10;&#9;&#9;String output = compiler.compile(input);&#10;&#9;&#9;assertEquals(input, output, &quot;compile should return the input string&quot;);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void testCompileEmptyInputReturnsEmptyString() {&#10;&#9;&#9;assertValid(&quot;&quot;, &quot;&quot;);&#10;&#9;}&#10;&#10;&#9;private void assertValid(String input, String output) {&#10;&#9;&#9;Compiler compiler = new Compiler();&#10;&#9;&#9;String actual = compiler.compile(input);&#10;&#9;&#9;assertEquals(output, actual);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void testCompileNonEmptyThrowsException() {&#10;&#9;&#9;assertInvalid(&quot;not empty&quot;);&#10;&#9;}&#10;&#10;&#9;private void assertInvalid(String input) {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;new Compiler().compile(input);&#10;&#9;&#9;&#9;fail(&quot;Expected CompileException to be thrown&quot;);&#10;&#9;&#9;} catch (CompileException e) {&#10;&#9;&#9;&#9;// expected&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package magma;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.junit.jupiter.api.Assertions.fail;&#10;&#10;class CompilerTest {&#10;&#9;@Test&#10;&#9;void returnsInput() {&#10;&#9;&#9;Compiler compiler = new Compiler();&#10;&#9;&#9;String input = &quot;test input&quot;;&#10;&#9;&#9;String output = compiler.compile(input);&#10;&#9;&#9;assertEquals(input, output, &quot;compile should return the input string&quot;);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void emptyInput() {&#10;&#9;&#9;assertValid(&quot;&quot;, &quot;&quot;);&#10;&#9;}&#10;&#10;&#9;private void assertValid(String input, String output) {&#10;&#9;&#9;Compiler compiler = new Compiler();&#10;&#9;&#9;String actual = compiler.compile(input);&#10;&#9;&#9;assertEquals(output, actual);&#10;&#9;}&#10;&#10;&#9;@Test&#10;&#9;void throwsException() {&#10;&#9;&#9;assertInvalid(&quot;not empty&quot;);&#10;&#9;}&#10;&#10;&#9;private void assertInvalid(String input) {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;new Compiler().compile(input);&#10;&#9;&#9;&#9;fail(&quot;Expected CompileException to be thrown&quot;);&#10;&#9;&#9;} catch (CompileException e) {&#10;&#9;&#9;&#9;// expected&#10;&#9;&#9;}&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
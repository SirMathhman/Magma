<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AnalysisUIOptions">
    <option name="ANALYZE_INJECTED_CODE" value="false" />
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Add support for type compatibility checks in variable references within `Compiler`. Introduce `TypeCheckParams` and `TypeScriptAnnotationParams` records to improve method signatures. Expand `CompilerTest` with new cases for variable reference handling and type mismatch validation.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Record" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;SirMathhman&quot;
  }
}</component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="master" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/SirMathhman/Magma.git&quot;,
    &quot;accountId&quot;: &quot;5ccce926-293e-4330-b2a7-270ea3228439&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="304EoLp6ZWsUcvlOP9yXLjMrk5A" />
  <component name="ProjectLevelVcsManager">
    <OptionsSetting value="false" id="Update" />
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.HelloWorld.executor": "Run",
    "Application.Main.executor": "Run",
    "Application.MainV2.executor": "Run",
    "Batch.build-maven.executor": "Run",
    "Batch.build.executor": "Run",
    "Batch.checkstyle-maven.executor": "Run",
    "Batch.test.executor": "Run",
    "Downloaded.Files.Path.Enabled": "false",
    "JUnit.All in Magma.executor": "Run",
    "JUnit.All in magma-compiler.executor": "Run",
    "JUnit.ApplicationTest.executor": "Run",
    "JUnit.CompilerTest (1).executor": "Run",
    "JUnit.CompilerTest.compileIfStatement.executor": "Run",
    "JUnit.CompilerTest.executor": "Run",
    "JUnit.CompilerTest.letTypedLiteralSuffix.executor": "Run",
    "JUnit.MapNodeImmutabilityTest.testMergeReturnsNewInstance.executor": "Debug",
    "JUnit.StringUtilsTest.executor": "Run",
    "JUnit.java in magma-compiler.executor": "Run",
    "Maven.Junie Maven test: magma.ClassFunctionTest#testBasicClassFunction.executor": "Run",
    "Maven.Junie Maven test: magma.ClassFunctionTest#testClassFunctionWithDifferentTypes.executor": "Run",
    "Maven.Junie Maven test: magma.ClassFunctionTest#testClassFunctionWithMultipleParameters.executor": "Run",
    "Maven.Junie Maven test: magma.ClassFunctionTest#testClassFunctionWithNoParameters.executor": "Run",
    "Maven.Junie Maven test: magma.ClassFunctionTest.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest#compileFunctionDeclaration.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest#compileStructFieldAccess.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest#shouldSupportVariableReferences.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest#shouldThrowCompileExceptionForIncompatibleVariableReference.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest#structFieldAssignmentIsInvalid.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest.executor": "Run",
    "Maven.Junie Maven test: magma.FunctionTest#compileInnerFunctions.executor": "Run",
    "Maven.Junie Maven test: magma.FunctionTest.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#debugGenericStructFieldAccess.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#debugGenericStructInstantiation.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#debugInvalidGenericStructUsage.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#debugMultipleTypeParams.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#debugNestedGenericStructs.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest#focusedDebugTest.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDebugTest.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDeclarationTest#genericStructDeclarationShouldNotProduceCode.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDeclarationTest#genericStructWithConcreteTypesShouldProduceCode.executor": "Run",
    "Maven.Junie Maven test: magma.GenericStructDeclarationTest.executor": "Run",
    "Maven.Junie Maven test: magma.InnerFunctionTest.executor": "Run",
    "Maven.Junie Maven test: magma.MinimalStructTest.executor": "Run",
    "Maven.Junie Maven test: magma.MonomorphicStructTest#compileGenericStructWithMultipleTypeParams.executor": "Run",
    "Maven.Junie Maven test: magma.MonomorphicStructTest#compileGenericStructWithPrimitiveType.executor": "Run",
    "Maven.Junie Maven test: magma.MonomorphicStructTest#invalidGenericStructUsage.executor": "Run",
    "Maven.Junie Maven test: magma.MonomorphicStructTest.executor": "Run",
    "Maven.Junie Maven test: magma.StringUtilsTest.executor": "Run",
    "Maven.Junie Maven test: magma.StructTest#testStructMethodReturnTypeInference.executor": "Run",
    "Maven.Junie Maven test: magma.StructTest.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "Python tests.Python tests for test_basic.test_compile_non_empty_returns_placeholder.executor": "Run",
    "Python tests.Python tests for test_compiler.test_compile_empty_input_creates_empty_main.executor": "Run",
    "Python tests.Python tests for test_compiler.test_compile_inner_function_with_inferred_declaration.executor": "Run",
    "Python tests.Python tests for test_misc.test_compile_class_fn_param_function_type.executor": "Run",
    "Python tests.Python tests in test_basic.py.executor": "Run",
    "Python tests.Python tests in test_compiler.py.executor": "Run",
    "Python tests.Python tests in test_flow.py.executor": "Run",
    "Python tests.Python tests in test_imports.py.executor": "Run",
    "Python tests.Python tests in test_misc.py.executor": "Run",
    "Python tests.Python tests in tests.executor": "Run",
    "Python tests.pytest for test_basic.test_compile_non_empty_returns_placeholder.executor": "Run",
    "Python.__init__.executor": "Run",
    "Python.utils.executor": "Run",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
    "git-widget-placeholder": "master",
    "introduce.parameter.lambda": "true",
    "junie.onboarding.icon.badge.shown": "true",
    "kotlin-language-version-configured": "true",
    "last_directory_selection": "C:/Users/mathm/IdeaProjects/Magma/src/main/java/magma/node",
    "last_opened_file_path": "C:/Users/mathm/IdeaProjects/Magma",
    "onboarding.tips.debug.path": "C:/Users/mathm/IdeaProjects/Magma/src/Main.java",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.15044248",
    "project.structure.side.proportion": "0.2",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "settings.editor.selected.configurable": "junie.application.models",
    "to.speed.mode.migration.done": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="magma" />
      <recent name="magma.error" />
      <recent name="magma.rule" />
      <recent name="magma.node" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\mathm\IdeaProjects\Magma\src\java" />
      <recent name="C:\Users\mathm\IdeaProjects\Magma\.venv" />
    </key>
    <key name="MoveMembersDialog.RECENTS_KEY">
      <recent name="magma.TestUtils" />
      <recent name="magma.Placeholder" />
      <recent name="magma.Main.Lists" />
      <recent name="magma.Application" />
      <recent name="magma.ApplicationTest" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="magma.node" />
      <recent name="magma" />
      <recent name="magma.divide" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="magma.node" />
      <recent name="magma" />
      <recent name="magma.result" />
      <recent name="magma.option" />
      <recent name="magma.rule.divide" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="magma" />
      <recent name="magma.node" />
      <recent name="com.magma" />
      <recent name="" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="magma" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="magma" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.CompilerTest">
    <configuration name="test" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="Magma" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="test.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.node.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest.compileIfStatement" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.node.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="METHOD_NAME" value="compileIfStatement" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="java in magma-compiler" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <option name="TEST_OBJECT" value="directory" />
      <dir value="$PROJECT_DIR$/src/test/java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Batch.test" />
      <item itemvalue="JUnit.CompilerTest.compileIfStatement" />
      <item itemvalue="JUnit.java in magma-compiler" />
      <item itemvalue="JUnit.CompilerTest" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.CompilerTest" />
        <item itemvalue="Batch.test" />
        <item itemvalue="JUnit.CompilerTest" />
        <item itemvalue="JUnit.java in magma-compiler" />
        <item itemvalue="JUnit.CompilerTest.compileIfStatement" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Delete everything! This is a hard reset!" />
      <created>1752878619782</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752878619782</updated>
    </task>
    <task id="LOCAL-00551" summary="Extract statement handling logic from `Compiler` to new `StatementHandlers` class for better modularity. Add support for conditional operator in `let` and assignment syntax. Update `CompilerTest` with additional cases and simplify assertion methods.">
      <option name="closed" value="true" />
      <created>1754665611558</created>
      <option name="number" value="00551" />
      <option name="presentableId" value="LOCAL-00551" />
      <option name="project" value="LOCAL" />
      <updated>1754665611558</updated>
    </task>
    <task id="LOCAL-00552" summary="Add support for pointer declaration and address-of initializer in `Compiler`. Update `CompilerTest` with corresponding cases. Refactor `handleLetMut` for pattern consolidation.">
      <option name="closed" value="true" />
      <created>1754665920719</created>
      <option name="number" value="00552" />
      <option name="presentableId" value="LOCAL-00552" />
      <option name="project" value="LOCAL" />
      <updated>1754665920719</updated>
    </task>
    <task id="LOCAL-00553" summary="Add support for `let x : U8..U64` and `let x : I8..I64` syntax in `Compiler`. Update `CompilerTest` with comprehensive test cases covering all integer types.">
      <option name="closed" value="true" />
      <created>1754667093072</created>
      <option name="number" value="00553" />
      <option name="presentableId" value="LOCAL-00553" />
      <option name="project" value="LOCAL" />
      <updated>1754667093072</updated>
    </task>
    <task id="LOCAL-00554" summary="Add support for suffix-typed integer literals (e.g., `let x = 0U8;`) in `Compiler`. Update `CompilerTest` with corresponding test case. Factor out declaration emission logic.">
      <option name="closed" value="true" />
      <created>1754667328580</created>
      <option name="number" value="00554" />
      <option name="presentableId" value="LOCAL-00554" />
      <option name="project" value="LOCAL" />
      <updated>1754667328580</updated>
    </task>
    <task id="LOCAL-00555" summary="Add default type handling for untyped integer literals in `Compiler`. Update `CompilerTest` with corresponding test case.">
      <option name="closed" value="true" />
      <created>1754667579027</created>
      <option name="number" value="00555" />
      <option name="presentableId" value="LOCAL-00555" />
      <option name="project" value="LOCAL" />
      <updated>1754667579027</updated>
    </task>
    <task id="LOCAL-00556" summary="Add support for typed and untyped `Bool` literals in `Compiler`. Update `CompilerTest` with relevant test cases. Extend `checkstyle.xml` with method count rule.">
      <option name="closed" value="true" />
      <created>1754667728967</created>
      <option name="number" value="00556" />
      <option name="presentableId" value="LOCAL-00556" />
      <option name="project" value="LOCAL" />
      <updated>1754667728967</updated>
    </task>
    <task id="LOCAL-00557" summary="Add support for multiple semicolon-terminated `let` statements in `Compiler`. Update `CompilerTest` with test cases for variable references and multi-statement scenarios. Refactor `Compiler` for modular statement handling.">
      <option name="closed" value="true" />
      <created>1754668092752</created>
      <option name="number" value="00557" />
      <option name="presentableId" value="LOCAL-00557" />
      <option name="project" value="LOCAL" />
      <updated>1754668092752</updated>
    </task>
    <task id="LOCAL-00558" summary="Add support for mutable `let` declarations and assignments in `Compiler`. Update `CompilerTest` with test cases for mutability and assignment validation. Refactor environment handling to use `VarInfo`.">
      <option name="closed" value="true" />
      <created>1754668448088</created>
      <option name="number" value="00558" />
      <option name="presentableId" value="LOCAL-00558" />
      <option name="project" value="LOCAL" />
      <updated>1754668448088</updated>
    </task>
    <task id="LOCAL-00559" summary="Refactor `Compiler` by extracting declaration and type handling logic into `DeclarationHelper`, `TypeHelper`, and `ValueResolver`. Update `CompilerTest` with streamlined, consolidated test cases. Simplify and modularize core logic for enhanced maintainability.">
      <option name="closed" value="true" />
      <created>1754670866588</created>
      <option name="number" value="00559" />
      <option name="presentableId" value="LOCAL-00559" />
      <option name="project" value="LOCAL" />
      <updated>1754670866588</updated>
    </task>
    <task id="LOCAL-00560" summary="Add `IfStatementHelper` for processing `if` statements and integrate with `Compiler`. Update `CompilerTest` with validation cases for `if` statement handling.">
      <option name="closed" value="true" />
      <created>1754671194520</created>
      <option name="number" value="00560" />
      <option name="presentableId" value="LOCAL-00560" />
      <option name="project" value="LOCAL" />
      <updated>1754671194520</updated>
    </task>
    <task id="LOCAL-00561" summary="Add support for `else` blocks in `Compiler`. Update `CompilerTest` with validation cases for `if-else` statement handling. Refactor `IfStatementHelper` to process `else` blocks and ensure proper syntax validation.">
      <option name="closed" value="true" />
      <created>1754671341616</created>
      <option name="number" value="00561" />
      <option name="presentableId" value="LOCAL-00561" />
      <option name="project" value="LOCAL" />
      <updated>1754671341616</updated>
    </task>
    <task id="LOCAL-00562" summary="Add `ControlStructureHelper` and `WhileStatementHelper` for processing control flow constructs. Integrate `while` statement support into `Compiler`. Update `CompilerTest` with validation cases for `while` statement handling. Refactor `IfStatementHelper` to use `ControlStructureHelper` for shared logic.">
      <option name="closed" value="true" />
      <created>1754671598854</created>
      <option name="number" value="00562" />
      <option name="presentableId" value="LOCAL-00562" />
      <option name="project" value="LOCAL" />
      <updated>1754671598854</updated>
    </task>
    <task id="LOCAL-00563" summary="Add `StructHelper` for processing struct declarations. Update `Compiler` to support empty structs and extend `CompilerTest` with validation for struct handling.">
      <option name="closed" value="true" />
      <created>1754671831710</created>
      <option name="number" value="00563" />
      <option name="presentableId" value="LOCAL-00563" />
      <option name="project" value="LOCAL" />
      <updated>1754671831710</updated>
    </task>
    <task id="LOCAL-00564" summary="Add support for structs with members in `Compiler`. Update `StructHelper` to handle member declarations and type validation. Extend `CompilerTest` with cases for structs with and without members.">
      <option name="closed" value="true" />
      <created>1754672038154</created>
      <option name="number" value="00564" />
      <option name="presentableId" value="LOCAL-00564" />
      <option name="project" value="LOCAL" />
      <updated>1754672038154</updated>
    </task>
    <task id="LOCAL-00565" summary="Add support for struct initialization in `Compiler`. Update `StructHelper`, `TypeHelper`, and `ValueResolver` to process struct definitions and initializations. Extend `CompilerTest` with validation cases for struct initialization.">
      <option name="closed" value="true" />
      <created>1754672503708</created>
      <option name="number" value="00565" />
      <option name="presentableId" value="LOCAL-00565" />
      <option name="project" value="LOCAL" />
      <updated>1754672503708</updated>
    </task>
    <task id="LOCAL-00566" summary="Add support for struct field access in `Compiler`. Update `ValueResolver` to handle field access expressions. Extend `StructHelper` and `DeclarationHelper` for type matching. Add tests for field access in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754672955960</created>
      <option name="number" value="00566" />
      <option name="presentableId" value="LOCAL-00566" />
      <option name="project" value="LOCAL" />
      <updated>1754672955960</updated>
    </task>
    <task id="LOCAL-00567" summary="Enforce immutability for struct fields in `Compiler`. Update assignment logic to reject field assignments and add corresponding test case in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754673154971</created>
      <option name="number" value="00567" />
      <option name="presentableId" value="LOCAL-00567" />
      <option name="project" value="LOCAL" />
      <updated>1754673154972</updated>
    </task>
    <task id="LOCAL-00568" summary="Add `FunctionHelper` for processing function declarations. Update `Compiler` to support `fn empty() : Void =&gt; {}` syntax and extend `CompilerTest` with a validation case.">
      <option name="closed" value="true" />
      <created>1754673688433</created>
      <option name="number" value="00568" />
      <option name="presentableId" value="LOCAL-00568" />
      <option name="project" value="LOCAL" />
      <updated>1754673688433</updated>
    </task>
    <task id="LOCAL-00569" summary="Refactor tests into specialized classes. Add `BaseCompilerTest` for shared utilities, `CodeUtils` for brace matching, and new test suites (`ControlFlowTest`, `FunctionTest`, `PrimitiveTypeTest`, `StructTest`). Simplify `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754674418344</created>
      <option name="number" value="00569" />
      <option name="presentableId" value="LOCAL-00569" />
      <option name="project" value="LOCAL" />
      <updated>1754674418344</updated>
    </task>
    <task id="LOCAL-00570" summary="Add `StructInitializationHelper` and `StructMemberHelper` for handling struct initialization and member processing. Refactor `StructHelper` to enhance structure parsing and validation logic.">
      <option name="closed" value="true" />
      <created>1754675480347</created>
      <option name="number" value="00570" />
      <option name="presentableId" value="LOCAL-00570" />
      <option name="project" value="LOCAL" />
      <updated>1754675480347</updated>
    </task>
    <task id="LOCAL-00571" summary="Refactor to modularize struct-related classes. Move `VarInfo`, `Declaration`, and other records to `magma.node`. Replace `ParsedIdentifier` with `StructIdentifier` for enhanced struct handling. Update imports and adapt related helpers.">
      <option name="closed" value="true" />
      <created>1754675491196</created>
      <option name="number" value="00571" />
      <option name="presentableId" value="LOCAL-00571" />
      <option name="project" value="LOCAL" />
      <updated>1754675491196</updated>
    </task>
    <task id="LOCAL-00572" summary="Refactor to modularize `VarInfo` and `Declaration` into `magma.node`. Extend `FunctionHelper` to support functions with return values and update related declarations and tests.">
      <option name="closed" value="true" />
      <created>1754675745263</created>
      <option name="number" value="00572" />
      <option name="presentableId" value="LOCAL-00572" />
      <option name="project" value="LOCAL" />
      <updated>1754675745263</updated>
    </task>
    <task id="LOCAL-00573" summary="Extend `FunctionHelper` to map return types. Add tests for functions with explicit return types in `FunctionTest`.">
      <option name="closed" value="true" />
      <created>1754676040144</created>
      <option name="number" value="00573" />
      <option name="presentableId" value="LOCAL-00573" />
      <option name="project" value="LOCAL" />
      <updated>1754676040144</updated>
    </task>
    <task id="LOCAL-00574" summary="Add `FunctionParts` and `Parameter` classes to modularize function parsing in `FunctionHelper`. Extend `FunctionTest` with additional parameterized function tests and function call validation. Update `Compiler` to handle function calls.">
      <option name="closed" value="true" />
      <created>1754676613735</created>
      <option name="number" value="00574" />
      <option name="presentableId" value="LOCAL-00574" />
      <option name="project" value="LOCAL" />
      <updated>1754676613735</updated>
    </task>
    <task id="LOCAL-00575" summary="Update `FunctionTest` with tests for multiple functions, parameters, and return types. Adjust workspace settings for improved debugging.">
      <option name="closed" value="true" />
      <created>1754676978457</created>
      <option name="number" value="00575" />
      <option name="presentableId" value="LOCAL-00575" />
      <option name="project" value="LOCAL" />
      <updated>1754676978457</updated>
    </task>
    <task id="LOCAL-00576" summary="Add support for inner function extraction and compilation. Update `FunctionHelper` to handle nested functions and adjust `FunctionTest` with comprehensive inner function tests.">
      <option name="closed" value="true" />
      <created>1754678685804</created>
      <option name="number" value="00576" />
      <option name="presentableId" value="LOCAL-00576" />
      <option name="project" value="LOCAL" />
      <updated>1754678685804</updated>
    </task>
    <task id="LOCAL-00577" summary="Refactor `FunctionHelper` to enhance inner function extraction. Introduce `InnerFunctionsResult` record and modularize related utilities into `CodeUtils`.">
      <option name="closed" value="true" />
      <created>1754681636549</created>
      <option name="number" value="00577" />
      <option name="presentableId" value="LOCAL-00577" />
      <option name="project" value="LOCAL" />
      <updated>1754681636549</updated>
    </task>
    <task id="LOCAL-00578" summary="Extract `FunctionPositions` to a dedicated class in `magma.node` for improved modularity. Update references in `CodeUtils` and `FunctionHelper`. Adjust workspace XML formatting.">
      <option name="closed" value="true" />
      <created>1754681679904</created>
      <option name="number" value="00578" />
      <option name="presentableId" value="LOCAL-00578" />
      <option name="project" value="LOCAL" />
      <updated>1754681679904</updated>
    </task>
    <task id="LOCAL-00579" summary="Add `StructImplHelper` to process struct implementation blocks and methods. Extend `StructTest` with cases for structs with single and multiple methods.">
      <option name="closed" value="true" />
      <created>1754682804955</created>
      <option name="number" value="00579" />
      <option name="presentableId" value="LOCAL-00579" />
      <option name="project" value="LOCAL" />
      <updated>1754682804955</updated>
    </task>
    <task id="LOCAL-00580" summary="Format">
      <option name="closed" value="true" />
      <created>1754682811093</created>
      <option name="number" value="00580" />
      <option name="presentableId" value="LOCAL-00580" />
      <option name="project" value="LOCAL" />
      <updated>1754682811093</updated>
    </task>
    <task id="LOCAL-00581" summary="Update `StructTest` to ensure semicolon handling in struct declarations and improve validation for structs with methods and implementations.">
      <option name="closed" value="true" />
      <created>1754682839827</created>
      <option name="number" value="00581" />
      <option name="presentableId" value="LOCAL-00581" />
      <option name="project" value="LOCAL" />
      <updated>1754682839827</updated>
    </task>
    <task id="LOCAL-00582" summary="Add `StructRobustnessTest` to validate edge cases, syntax errors, and method handling for structs. Expand `StructTest` with robustness scenarios and ensure consistent semicolon usage in struct declarations.">
      <option name="closed" value="true" />
      <created>1754683909065</created>
      <option name="number" value="00582" />
      <option name="presentableId" value="LOCAL-00582" />
      <option name="project" value="LOCAL" />
      <updated>1754683909065</updated>
    </task>
    <task id="LOCAL-00583" summary="Add `ClassFunctionHelper` to handle &quot;class fn&quot; syntax sugar. Introduce `ClassFunctionTest` for validation and edge cases. Update `TypeHelper` to support `String` types.">
      <option name="closed" value="true" />
      <created>1754685736854</created>
      <option name="number" value="00583" />
      <option name="presentableId" value="LOCAL-00583" />
      <option name="project" value="LOCAL" />
      <updated>1754685736854</updated>
    </task>
    <task id="LOCAL-00584" summary="Remove `isClassFunction` method from `ClassFunctionHelper` as it is unused and redundant.">
      <option name="closed" value="true" />
      <created>1754685744896</created>
      <option name="number" value="00584" />
      <option name="presentableId" value="LOCAL-00584" />
      <option name="project" value="LOCAL" />
      <updated>1754685744896</updated>
    </task>
    <task id="LOCAL-00585" summary="Introduce generic struct support by adding `GenericTypeHelper` for type parameter handling. Extend `StructHelper`, `StructInitializationHelper`, and `TypeHelper` for concrete type creation and validation. Add `MonomorphicStructTest` for testing generic struct functionality.">
      <option name="closed" value="true" />
      <created>1754686514170</created>
      <option name="number" value="00585" />
      <option name="presentableId" value="LOCAL-00585" />
      <option name="project" value="LOCAL" />
      <updated>1754686514170</updated>
    </task>
    <task id="LOCAL-00586" summary="Add tests for generic struct handling, including direct, debug, and declaration cases. Extend `StructHelper` and related classes to support and validate generic struct initializations.">
      <option name="closed" value="true" />
      <created>1754687222887</created>
      <option name="number" value="00586" />
      <option name="presentableId" value="LOCAL-00586" />
      <option name="project" value="LOCAL" />
      <updated>1754687222887</updated>
    </task>
    <task id="LOCAL-00587" summary="Refactor generic struct test suite: replace `DirectGenericStructTest` with `MinimalStructTest`, expand `GenericStructDebugTest`, and enhance struct initialization validation logic.">
      <option name="closed" value="true" />
      <created>1754688307373</created>
      <option name="number" value="00587" />
      <option name="presentableId" value="LOCAL-00587" />
      <option name="project" value="LOCAL" />
      <updated>1754688307373</updated>
    </task>
    <task id="LOCAL-00588" summary="Nuke">
      <option name="closed" value="true" />
      <created>1754688383329</created>
      <option name="number" value="00588" />
      <option name="presentableId" value="LOCAL-00588" />
      <option name="project" value="LOCAL" />
      <updated>1754688383330</updated>
    </task>
    <task id="LOCAL-00589" summary="Update Checkstyle and guidelines: restrict cyclomatic complexity, limit method parameters, and enforce code readability rules.">
      <option name="closed" value="true" />
      <created>1754689016485</created>
      <option name="number" value="00589" />
      <option name="presentableId" value="LOCAL-00589" />
      <option name="project" value="LOCAL" />
      <updated>1754689016485</updated>
    </task>
    <task id="LOCAL-00590" summary="Update guidelines: emphasize documentation practices, clarify debugging approach, and refine formatting rules.">
      <option name="closed" value="true" />
      <created>1754689208083</created>
      <option name="number" value="00590" />
      <option name="presentableId" value="LOCAL-00590" />
      <option name="project" value="LOCAL" />
      <updated>1754689208083</updated>
    </task>
    <task id="LOCAL-00591" summary="Add JavaScript `let` to C `int32_t` conversion in `StringUtils.echo` and corresponding tests.">
      <option name="closed" value="true" />
      <created>1754689406190</created>
      <option name="number" value="00591" />
      <option name="presentableId" value="LOCAL-00591" />
      <option name="project" value="LOCAL" />
      <updated>1754689406190</updated>
    </task>
    <task id="LOCAL-00592" summary="Add test for JavaScript `let` to C `int32_t` conversion with `test` variable. Update guidelines to prefer modifying old code over writing new code.">
      <option name="closed" value="true" />
      <created>1754689539258</created>
      <option name="number" value="00592" />
      <option name="presentableId" value="LOCAL-00592" />
      <option name="project" value="LOCAL" />
      <updated>1754689539258</updated>
    </task>
    <task id="LOCAL-00593" summary="Enhance `StringUtils.echo` to support TypeScript-style variable declarations. Refactor to non-static implementation and add corresponding tests.">
      <option name="closed" value="true" />
      <created>1754689759777</created>
      <option name="number" value="00593" />
      <option name="presentableId" value="LOCAL-00593" />
      <option name="project" value="LOCAL" />
      <updated>1754689759777</updated>
    </task>
    <task id="LOCAL-00594" summary="Refactor `StringUtils` to `Compiler`: rename class and methods, enhance TypeScript variable handling, and update tests accordingly.">
      <option name="closed" value="true" />
      <created>1754689974727</created>
      <option name="number" value="00594" />
      <option name="presentableId" value="LOCAL-00594" />
      <option name="project" value="LOCAL" />
      <updated>1754689974727</updated>
    </task>
    <task id="LOCAL-00595" summary="Refactor `StringUtils` to `Compiler`: improve TypeScript variable handling, introduce type mapping logic, and expand test coverage with parameterized tests.">
      <option name="closed" value="true" />
      <created>1754690418757</created>
      <option name="number" value="00595" />
      <option name="presentableId" value="LOCAL-00595" />
      <option name="project" value="LOCAL" />
      <updated>1754690418757</updated>
    </task>
    <task id="LOCAL-00596" summary="Introduce `CompileException` and enhance `Compiler` for type safety: add type compatibility checks, throw exceptions for mismatches, and expand test coverage.">
      <option name="closed" value="true" />
      <created>1754690993664</created>
      <option name="number" value="00596" />
      <option name="presentableId" value="LOCAL-00596" />
      <option name="project" value="LOCAL" />
      <updated>1754690993664</updated>
    </task>
    <task id="LOCAL-00597" summary="Extract `VariableDeclaration` and `DeclarationContext` into standalone records for better modularity and reusability.">
      <option name="closed" value="true" />
      <created>1754691210031</created>
      <option name="number" value="00597" />
      <option name="presentableId" value="LOCAL-00597" />
      <option name="project" value="LOCAL" />
      <updated>1754691210031</updated>
    </task>
    <task id="LOCAL-00598" summary="Support variable references in `Compiler`: handle multiple declarations and add corresponding test case. Update guidelines.">
      <option name="closed" value="true" />
      <created>1754691614991</created>
      <option name="number" value="00598" />
      <option name="presentableId" value="LOCAL-00598" />
      <option name="project" value="LOCAL" />
      <updated>1754691614991</updated>
    </task>
    <task id="LOCAL-00599" summary="Add support for type compatibility checks in variable references within `Compiler`. Introduce `TypeCheckParams` and `TypeScriptAnnotationParams` records to improve method signatures. Expand `CompilerTest` with new cases for variable reference handling and type mismatch validation.">
      <option name="closed" value="true" />
      <created>1754692396689</created>
      <option name="number" value="00599" />
      <option name="presentableId" value="LOCAL-00599" />
      <option name="project" value="LOCAL" />
      <updated>1754692396689</updated>
    </task>
    <option name="localTasksCounter" value="600" />
    <servers />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="*.ts" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT_PROFILE" value="Project Default" />
    <MESSAGE value="Add support for inner function extraction and compilation. Update `FunctionHelper` to handle nested functions and adjust `FunctionTest` with comprehensive inner function tests." />
    <MESSAGE value="Refactor `FunctionHelper` to enhance inner function extraction. Introduce `InnerFunctionsResult` record and modularize related utilities into `CodeUtils`." />
    <MESSAGE value="Extract `FunctionPositions` to a dedicated class in `magma.node` for improved modularity. Update references in `CodeUtils` and `FunctionHelper`. Adjust workspace XML formatting." />
    <MESSAGE value="Add `StructImplHelper` to process struct implementation blocks and methods. Extend `StructTest` with cases for structs with single and multiple methods." />
    <MESSAGE value="Format" />
    <MESSAGE value="Update `StructTest` to ensure semicolon handling in struct declarations and improve validation for structs with methods and implementations." />
    <MESSAGE value="Add `StructRobustnessTest` to validate edge cases, syntax errors, and method handling for structs. Expand `StructTest` with robustness scenarios and ensure consistent semicolon usage in struct declarations." />
    <MESSAGE value="Add `ClassFunctionHelper` to handle &quot;class fn&quot; syntax sugar. Introduce `ClassFunctionTest` for validation and edge cases. Update `TypeHelper` to support `String` types." />
    <MESSAGE value="Remove `isClassFunction` method from `ClassFunctionHelper` as it is unused and redundant." />
    <MESSAGE value="Introduce generic struct support by adding `GenericTypeHelper` for type parameter handling. Extend `StructHelper`, `StructInitializationHelper`, and `TypeHelper` for concrete type creation and validation. Add `MonomorphicStructTest` for testing generic struct functionality." />
    <MESSAGE value="Add tests for generic struct handling, including direct, debug, and declaration cases. Extend `StructHelper` and related classes to support and validate generic struct initializations." />
    <MESSAGE value="Refactor generic struct test suite: replace `DirectGenericStructTest` with `MinimalStructTest`, expand `GenericStructDebugTest`, and enhance struct initialization validation logic." />
    <MESSAGE value="Nuke" />
    <MESSAGE value="Update Checkstyle and guidelines: restrict cyclomatic complexity, limit method parameters, and enforce code readability rules." />
    <MESSAGE value="Update guidelines: emphasize documentation practices, clarify debugging approach, and refine formatting rules." />
    <MESSAGE value="Add JavaScript `let` to C `int32_t` conversion in `StringUtils.echo` and corresponding tests." />
    <MESSAGE value="Add test for JavaScript `let` to C `int32_t` conversion with `test` variable. Update guidelines to prefer modifying old code over writing new code." />
    <MESSAGE value="Enhance `StringUtils.echo` to support TypeScript-style variable declarations. Refactor to non-static implementation and add corresponding tests." />
    <MESSAGE value="Refactor `StringUtils` to `Compiler`: rename class and methods, enhance TypeScript variable handling, and update tests accordingly." />
    <MESSAGE value="Refactor `StringUtils` to `Compiler`: improve TypeScript variable handling, introduce type mapping logic, and expand test coverage with parameterized tests." />
    <MESSAGE value="Introduce `CompileException` and enhance `Compiler` for type safety: add type compatibility checks, throw exceptions for mismatches, and expand test coverage." />
    <MESSAGE value="Extract `VariableDeclaration` and `DeclarationContext` into standalone records for better modularity and reusability." />
    <MESSAGE value="Support variable references in `Compiler`: handle multiple declarations and add corresponding test case. Update guidelines." />
    <MESSAGE value="Introduce variable type tracking in `Compiler`: map variable types, validate references, and enhance test coverage." />
    <MESSAGE value="Add support for type compatibility checks in variable references within `Compiler`. Introduce `TypeCheckParams` and `TypeScriptAnnotationParams` records to improve method signatures. Expand `CompilerTest` with new cases for variable reference handling and type mismatch validation." />
    <option name="LAST_COMMIT_MESSAGE" value="Add support for type compatibility checks in variable references within `Compiler`. Introduce `TypeCheckParams` and `TypeScriptAnnotationParams` records to improve method signatures. Expand `CompilerTest` with new cases for variable reference handling and type mismatch validation." />
  </component>
  <component name="XDebuggerManager">
    <pin-to-top-manager>
      <pinned-members>
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="key" />
        <PinnedItemInfo parentTag="magma.compile.MapNode" memberName="maybeType" />
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="value" />
        <PinnedItemInfo parentTag="jvm.collect.map.JavaMap" memberName="map" />
        <PinnedItemInfo parentTag="magma.option.Tuple" memberName="right" />
        <PinnedItemInfo parentTag="magma.Main$Maps$JavaMap" memberName="internalMap" />
        <PinnedItemInfo parentTag="magma.Main$StructType" memberName="properties" />
      </pinned-members>
    </pin-to-top-manager>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AnalysisUIOptions">
    <option name="ANALYZE_INJECTED_CODE" value="false" />
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Add support for mutable `let` declarations and assignments in `Compiler`. Update `CompilerTest` with test cases for mutability and assignment validation. Refactor environment handling to use `VarInfo`.">
      <change beforePath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/magma/CompilerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/magma/CompilerTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Record" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;SirMathhman&quot;
  }
}</component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="master" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/SirMathhman/Magma.git&quot;,
    &quot;accountId&quot;: &quot;5ccce926-293e-4330-b2a7-270ea3228439&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="304EoLp6ZWsUcvlOP9yXLjMrk5A" />
  <component name="ProjectLevelVcsManager">
    <OptionsSetting value="false" id="Update" />
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.HelloWorld.executor": "Run",
    "Application.Main.executor": "Run",
    "Application.MainV2.executor": "Run",
    "Batch.build-maven.executor": "Run",
    "Batch.build.executor": "Run",
    "Batch.checkstyle-maven.executor": "Run",
    "Batch.test.executor": "Run",
    "Downloaded.Files.Path.Enabled": "false",
    "JUnit.All in Magma.executor": "Run",
    "JUnit.All in magma-compiler.executor": "Run",
    "JUnit.ApplicationTest.executor": "Run",
    "JUnit.CompilerTest (1).executor": "Run",
    "JUnit.CompilerTest.executor": "Run",
    "JUnit.CompilerTest.letTypedLiteralSuffix.executor": "Run",
    "JUnit.MapNodeImmutabilityTest.testMergeReturnsNewInstance.executor": "Debug",
    "JUnit.java in magma-compiler.executor": "Run",
    "Maven.Junie Maven test: magma.CompilerTest.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "Python tests.Python tests for test_basic.test_compile_non_empty_returns_placeholder.executor": "Run",
    "Python tests.Python tests for test_compiler.test_compile_empty_input_creates_empty_main.executor": "Run",
    "Python tests.Python tests for test_compiler.test_compile_inner_function_with_inferred_declaration.executor": "Run",
    "Python tests.Python tests for test_misc.test_compile_class_fn_param_function_type.executor": "Run",
    "Python tests.Python tests in test_basic.py.executor": "Run",
    "Python tests.Python tests in test_compiler.py.executor": "Run",
    "Python tests.Python tests in test_flow.py.executor": "Run",
    "Python tests.Python tests in test_imports.py.executor": "Run",
    "Python tests.Python tests in test_misc.py.executor": "Run",
    "Python tests.Python tests in tests.executor": "Run",
    "Python tests.pytest for test_basic.test_compile_non_empty_returns_placeholder.executor": "Run",
    "Python.__init__.executor": "Run",
    "Python.utils.executor": "Run",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
    "git-widget-placeholder": "master",
    "introduce.parameter.lambda": "true",
    "junie.onboarding.icon.badge.shown": "true",
    "kotlin-language-version-configured": "true",
    "last_directory_selection": "C:/Users/mathm/IdeaProjects/Magma/src/main/java",
    "last_opened_file_path": "C:/Users/mathm/IdeaProjects/Magma",
    "onboarding.tips.debug.path": "C:/Users/mathm/IdeaProjects/Magma/src/Main.java",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.15044248",
    "project.structure.side.proportion": "0.2",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "settings.editor.selected.configurable": "junie.application.models",
    "to.speed.mode.migration.done": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="magma" />
      <recent name="magma.error" />
      <recent name="magma.rule" />
      <recent name="magma.node" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\mathm\IdeaProjects\Magma\src\java" />
      <recent name="C:\Users\mathm\IdeaProjects\Magma\.venv" />
    </key>
    <key name="MoveMembersDialog.RECENTS_KEY">
      <recent name="magma.TestUtils" />
      <recent name="magma.Placeholder" />
      <recent name="magma.Main.Lists" />
      <recent name="magma.Application" />
      <recent name="magma.ApplicationTest" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="magma.node" />
      <recent name="magma" />
      <recent name="magma.divide" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="magma" />
      <recent name="magma.node" />
      <recent name="magma.result" />
      <recent name="magma.option" />
      <recent name="magma.rule.divide" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="magma" />
      <recent name="com.magma" />
      <recent name="" />
      <recent name="magma.node" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="magma" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="magma" />
    </key>
  </component>
  <component name="RunManager" selected="Batch.test">
    <configuration name="build" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="magma-compiler" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="build.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="test" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="Magma" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="test.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="All in magma-compiler" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <option name="PACKAGE_NAME" value="" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest.letTypedLiteralSuffix" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="METHOD_NAME" value="letTypedLiteralSuffix" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Batch.build" />
      <item itemvalue="Batch.test" />
      <item itemvalue="JUnit.CompilerTest" />
      <item itemvalue="JUnit.CompilerTest.letTypedLiteralSuffix" />
      <item itemvalue="JUnit.All in magma-compiler" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Batch.test" />
        <item itemvalue="JUnit.CompilerTest" />
        <item itemvalue="JUnit.CompilerTest.letTypedLiteralSuffix" />
        <item itemvalue="Batch.build" />
        <item itemvalue="JUnit.All in magma-compiler" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Delete everything! This is a hard reset!" />
      <created>1752878619782</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752878619782</updated>
    </task>
    <task id="LOCAL-00510" summary="Add `RobustnessTest` class for compiler edge cases and error handling validation. Refactor `CompilerTest` by delegating assertions to new `TestUtils`.">
      <option name="closed" value="true" />
      <created>1754613433198</created>
      <option name="number" value="00510" />
      <option name="presentableId" value="LOCAL-00510" />
      <option name="project" value="LOCAL" />
      <updated>1754613433198</updated>
    </task>
    <task id="LOCAL-00511" summary="Add support for mutability in `let` declarations in `Compiler`. Update `CompilerTest` with validation cases for mutable and immutable variable declarations, reassignment, and references. Extend regex patterns to handle `mut` keyword. Modify logic to track variable mutability.">
      <option name="closed" value="true" />
      <created>1754615444704</created>
      <option name="number" value="00511" />
      <option name="presentableId" value="LOCAL-00511" />
      <option name="project" value="LOCAL" />
      <updated>1754615444704</updated>
    </task>
    <task id="LOCAL-00512" summary="Add support for multiple variable declarations in `Compiler`. Update `CompilerTest` with validation cases covering multiple statements, mixing types, arrays, mutability, and pointers. Extend `compile` logic to handle multi-statement inputs.">
      <option name="closed" value="true" />
      <created>1754616511039</created>
      <option name="number" value="00512" />
      <option name="presentableId" value="LOCAL-00512" />
      <option name="project" value="LOCAL" />
      <updated>1754616511039</updated>
    </task>
    <task id="LOCAL-00513" summary="Add support for conditional operators in `Compiler`, including equality, inequality, comparison, logical operations, and ternary operator. Update `CompilerTest` with comprehensive validation cases. Extend regex patterns and generation logic for new operators.">
      <option name="closed" value="true" />
      <created>1754616859387</created>
      <option name="number" value="00513" />
      <option name="presentableId" value="LOCAL-00513" />
      <option name="project" value="LOCAL" />
      <updated>1754616859387</updated>
    </task>
    <task id="LOCAL-00514" summary="Add support for `if` statements in `Compiler`, including nested statements. Update `CompilerTest` with validation cases for valid and invalid conditions. Extend regex patterns and C++ code generation logic for `if` syntax.">
      <option name="closed" value="true" />
      <created>1754617388783</created>
      <option name="number" value="00514" />
      <option name="presentableId" value="LOCAL-00514" />
      <option name="project" value="LOCAL" />
      <updated>1754617388783</updated>
    </task>
    <task id="LOCAL-00515" summary="Remove unused `typeAnnotation` group from various regex matchers in `Compiler`. Simplify and clean up parsing logic.">
      <option name="closed" value="true" />
      <created>1754617422330</created>
      <option name="number" value="00515" />
      <option name="presentableId" value="LOCAL-00515" />
      <option name="project" value="LOCAL" />
      <updated>1754617422330</updated>
    </task>
    <task id="LOCAL-00516" summary="Add support for `if-else` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid scenarios. Extend regex patterns and C++ code generation logic to handle `if-else` syntax.">
      <option name="closed" value="true" />
      <created>1754617783680</created>
      <option name="number" value="00516" />
      <option name="presentableId" value="LOCAL-00516" />
      <option name="project" value="LOCAL" />
      <updated>1754617783680</updated>
    </task>
    <task id="LOCAL-00517" summary="Add support for standalone braces and empty blocks in `Compiler`. Update `CompilerTest` with validation cases for standalone braces, mixed statements, and block handling. Extend regex patterns and logic to support empty blocks in `compile` and C++ generation.">
      <option name="closed" value="true" />
      <created>1754618405569</created>
      <option name="number" value="00517" />
      <option name="presentableId" value="LOCAL-00517" />
      <option name="project" value="LOCAL" />
      <updated>1754618405569</updated>
    </task>
    <task id="LOCAL-00518" summary="Remove `CompileException` and `Compiler` classes.">
      <option name="closed" value="true" />
      <created>1754619091730</created>
      <option name="number" value="00518" />
      <option name="presentableId" value="LOCAL-00518" />
      <option name="project" value="LOCAL" />
      <updated>1754619091730</updated>
    </task>
    <task id="LOCAL-00519" summary="Replace `test_if_statement.java` with initial implementation of `StringProcessor`, its demo, and unit tests. Update `checkstyle.xml` with additional code quality checks.">
      <option name="closed" value="true" />
      <created>1754619856457</created>
      <option name="number" value="00519" />
      <option name="presentableId" value="LOCAL-00519" />
      <option name="project" value="LOCAL" />
      <updated>1754619856457</updated>
    </task>
    <task id="LOCAL-00520" summary="Rename `StringProcessor` to `Compiler` and refactor implementation. Update tests with new class name and add validation for transforming &quot;let x = 100;&quot; to &quot;int32_t x = 100;&quot;. Remove `StringProcessorDemo`.">
      <option name="closed" value="true" />
      <created>1754620105160</created>
      <option name="number" value="00520" />
      <option name="presentableId" value="LOCAL-00520" />
      <option name="project" value="LOCAL" />
      <updated>1754620105160</updated>
    </task>
    <task id="LOCAL-00521" summary="Add support for transforming &quot;let variableName = value;&quot; to &quot;int32_t variableName = value;&quot; in `Compiler`. Refactor logic into `handleVariableDeclaration` for cleaner processing.">
      <option name="closed" value="true" />
      <created>1754620349717</created>
      <option name="number" value="00521" />
      <option name="presentableId" value="LOCAL-00521" />
      <option name="project" value="LOCAL" />
      <updated>1754620349717</updated>
    </task>
    <task id="LOCAL-00522" summary="Add support for type annotations in `let` declarations. Refactor `Compiler` to handle variable types and map them to C/C++ equivalents. Update `CompilerTest` with extensive type transformation cases.">
      <option name="closed" value="true" />
      <created>1754621332187</created>
      <option name="number" value="00522" />
      <option name="presentableId" value="LOCAL-00522" />
      <option name="project" value="LOCAL" />
      <updated>1754621332187</updated>
    </task>
    <task id="LOCAL-00523" summary="Introduce `CompileException` for error handling in `Compiler`. Update `Compiler` to use `CompileException` instead of `UnsupportedOperationException`. Refactor type processing methods to throw `CompileException` for invalid scenarios. Update `CompilerTest` to reflect changes and add comprehensive test coverage. Upgrade Maven to Java 16.">
      <option name="closed" value="true" />
      <created>1754621770685</created>
      <option name="number" value="00523" />
      <option name="presentableId" value="LOCAL-00523" />
      <option name="project" value="LOCAL" />
      <updated>1754621770685</updated>
    </task>
    <task id="LOCAL-00524" summary="Refactor `CompilerTest` with helper methods `assertValid` and `assertInvalid`. Simplify and streamline test assertions for better readability and maintainability. Fix indentation in `Compiler` class.">
      <option name="closed" value="true" />
      <created>1754621992724</created>
      <option name="number" value="00524" />
      <option name="presentableId" value="LOCAL-00524" />
      <option name="project" value="LOCAL" />
      <updated>1754621992724</updated>
    </task>
    <task id="LOCAL-00525" summary="Remove optional assertion messages in `CompilerTest` for cleaner and more concise test methods.">
      <option name="closed" value="true" />
      <created>1754622019830</created>
      <option name="number" value="00525" />
      <option name="presentableId" value="LOCAL-00525" />
      <option name="project" value="LOCAL" />
      <updated>1754622019830</updated>
    </task>
    <task id="LOCAL-00526" summary="Add support for type suffixes in `let` declarations. Update `Compiler` to handle type suffix parsing and prioritize suffixes over annotations. Extend `CompilerTest` with test cases for type suffix handling and precedence validation.">
      <option name="closed" value="true" />
      <created>1754622216480</created>
      <option name="number" value="00526" />
      <option name="presentableId" value="LOCAL-00526" />
      <option name="project" value="LOCAL" />
      <updated>1754622216480</updated>
    </task>
    <task id="LOCAL-00527" summary="Upgrade Checkstyle plugin to 3.6.0 and optimize `Compiler` by simplifying type suffix handling and test cases in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754622478272</created>
      <option name="number" value="00527" />
      <option name="presentableId" value="LOCAL-00527" />
      <option name="project" value="LOCAL" />
      <updated>1754622478272</updated>
    </task>
    <task id="LOCAL-00528" summary="Add boolean and `Bool` type handling in `Compiler`. Extend type suffix handling and update mappings for explicit and inferred boolean values.">
      <option name="closed" value="true" />
      <created>1754623086013</created>
      <option name="number" value="00528" />
      <option name="presentableId" value="LOCAL-00528" />
      <option name="project" value="LOCAL" />
      <updated>1754623086013</updated>
    </task>
    <task id="LOCAL-00529" summary="Simplify `Compiler` by merging redundant methods for variable extraction and type mapping. Add helper methods for boolean detection and default type validation. Refactor numeric type handling for improved maintainability.">
      <option name="closed" value="true" />
      <created>1754623488814</created>
      <option name="number" value="00529" />
      <option name="presentableId" value="LOCAL-00529" />
      <option name="project" value="LOCAL" />
      <updated>1754623488814</updated>
    </task>
    <task id="LOCAL-00530" summary="Fix whitespace inconsistencies in `Compiler` and improve comment formatting for better readability">
      <option name="closed" value="true" />
      <created>1754623557491</created>
      <option name="number" value="00530" />
      <option name="presentableId" value="LOCAL-00530" />
      <option name="project" value="LOCAL" />
      <updated>1754623557491</updated>
    </task>
    <task id="LOCAL-00531" summary="Add block processing to `Compiler` with scoping rules. Implement `processCodeBlock` and `splitIntoStatements` methods. Extend `CompilerTest` with tests for block handling and variable scope validation.">
      <option name="closed" value="true" />
      <created>1754625510270</created>
      <option name="number" value="00531" />
      <option name="presentableId" value="LOCAL-00531" />
      <option name="project" value="LOCAL" />
      <updated>1754625510270</updated>
    </task>
    <task id="LOCAL-00532" summary="Add support for mutable variables and reassignment in `Compiler`. Update `VariableInfo` to track mutability and extend `Compiler` with reassignment handling. Enhance `CompilerTest` with test cases for mutable and immutable variables.">
      <option name="closed" value="true" />
      <created>1754625860505</created>
      <option name="number" value="00532" />
      <option name="presentableId" value="LOCAL-00532" />
      <option name="project" value="LOCAL" />
      <updated>1754625860505</updated>
    </task>
    <task id="LOCAL-00533" summary="Add `IssueDescriptionTest` for verifying behavior of immutable and mutable variables. Update `Checkstyle` to limit methods to 15 lines. Adjust IDE run configurations.">
      <option name="closed" value="true" />
      <created>1754626159576</created>
      <option name="number" value="00533" />
      <option name="presentableId" value="LOCAL-00533" />
      <option name="project" value="LOCAL" />
      <updated>1754626159576</updated>
    </task>
    <task id="LOCAL-00534" summary="Refactor `CompilerTest` with helper methods for validation and streamline tests for variable declarations and reassignment. Fix whitespace inconsistencies in `Compiler`. Update `Checkstyle` to enforce loop limits in methods.">
      <option name="closed" value="true" />
      <created>1754626422134</created>
      <option name="number" value="00534" />
      <option name="presentableId" value="LOCAL-00534" />
      <option name="project" value="LOCAL" />
      <updated>1754626422134</updated>
    </task>
    <task id="LOCAL-00535" summary="Remove `Compiler`, `CompileException`, tests, and related files.">
      <option name="closed" value="true" />
      <created>1754662373534</created>
      <option name="number" value="00535" />
      <option name="presentableId" value="LOCAL-00535" />
      <option name="project" value="LOCAL" />
      <updated>1754662373534</updated>
    </task>
    <task id="LOCAL-00536" summary="Add `Compiler`, `CompileException`, and `CompilerTest` with initial implementation and basic test coverage. Update project configuration files accordingly.">
      <option name="closed" value="true" />
      <created>1754662609885</created>
      <option name="number" value="00536" />
      <option name="presentableId" value="LOCAL-00536" />
      <option name="project" value="LOCAL" />
      <updated>1754662609885</updated>
    </task>
    <task id="LOCAL-00537" summary="Add pattern matching for `let I32` declarations in `Compiler` and test coverage in `CompilerTest`">
      <option name="closed" value="true" />
      <created>1754662710212</created>
      <option name="number" value="00537" />
      <option name="presentableId" value="LOCAL-00537" />
      <option name="project" value="LOCAL" />
      <updated>1754662710213</updated>
    </task>
    <task id="LOCAL-00538" summary="Generalize `let` pattern in `Compiler` to support signed and unsigned integer types. Refactor `CompilerTest` with a helper method for cleaner test validation.">
      <option name="closed" value="true" />
      <created>1754662797955</created>
      <option name="number" value="00538" />
      <option name="presentableId" value="LOCAL-00538" />
      <option name="project" value="LOCAL" />
      <updated>1754662797955</updated>
    </task>
    <task id="LOCAL-00539" summary="Refactor `let` pattern in `Compiler` to avoid inline conditionals and update `Checkstyle` to disallow ternary operator usage.">
      <option name="closed" value="true" />
      <created>1754662913002</created>
      <option name="number" value="00539" />
      <option name="presentableId" value="LOCAL-00539" />
      <option name="project" value="LOCAL" />
      <updated>1754662913002</updated>
    </task>
    <task id="LOCAL-00540" summary="Update `Checkstyle` configuration to replace `MethodLength` check with nesting depth restrictions and enhance readability constraints">
      <option name="closed" value="true" />
      <created>1754663022256</created>
      <option name="number" value="00540" />
      <option name="presentableId" value="LOCAL-00540" />
      <option name="project" value="LOCAL" />
      <updated>1754663022256</updated>
    </task>
    <task id="LOCAL-00541" summary="Add support for additional integer types in `Compiler` (`I8`, `I16`, `I64`, `U8`, `U16`, `U32`, `U64`) and extend `CompilerTest` with corresponding test cases.">
      <option name="closed" value="true" />
      <created>1754663137982</created>
      <option name="number" value="00541" />
      <option name="presentableId" value="LOCAL-00541" />
      <option name="project" value="LOCAL" />
      <updated>1754663137982</updated>
    </task>
    <task id="LOCAL-00542" summary="Refactor `CompilerTest` to consolidate integer type tests using parameterized tests.">
      <option name="closed" value="true" />
      <created>1754663178568</created>
      <option name="number" value="00542" />
      <option name="presentableId" value="LOCAL-00542" />
      <option name="project" value="LOCAL" />
      <updated>1754663178568</updated>
    </task>
    <task id="LOCAL-00543" summary="Add support for `let &lt;name&gt; = &lt;int&gt;;` syntax in `Compiler` with default type `I32` and corresponding test case in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754663277601</created>
      <option name="number" value="00543" />
      <option name="presentableId" value="LOCAL-00543" />
      <option name="project" value="LOCAL" />
      <updated>1754663277601</updated>
    </task>
    <task id="LOCAL-00544" summary="Add support for `let &lt;name&gt; = &lt;number&gt;&lt;suffix&gt;;` syntax in `Compiler` with C type mapping and add corresponding test case in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754663622026</created>
      <option name="number" value="00544" />
      <option name="presentableId" value="LOCAL-00544" />
      <option name="project" value="LOCAL" />
      <updated>1754663622026</updated>
    </task>
    <task id="LOCAL-00545" summary="Add initial `.junie/guidelines.md` with basic build instructions">
      <option name="closed" value="true" />
      <created>1754663683545</created>
      <option name="number" value="00545" />
      <option name="presentableId" value="LOCAL-00545" />
      <option name="project" value="LOCAL" />
      <updated>1754663683545</updated>
    </task>
    <task id="LOCAL-00546" summary="Refactor `Compiler` patterns for readability, add type mismatch check, and update `CompilerTest` with additional test case.">
      <option name="closed" value="true" />
      <created>1754663812192</created>
      <option name="number" value="00546" />
      <option name="presentableId" value="LOCAL-00546" />
      <option name="project" value="LOCAL" />
      <updated>1754663812192</updated>
    </task>
    <task id="LOCAL-00547" summary="Refactor `CompilerTest` to replace duplicate assertion logic with helper method, adjust formatting in parameterized tests for consistency.">
      <option name="closed" value="true" />
      <created>1754663848147</created>
      <option name="number" value="00547" />
      <option name="presentableId" value="LOCAL-00547" />
      <option name="project" value="LOCAL" />
      <updated>1754663848147</updated>
    </task>
    <task id="LOCAL-00548" summary="Refactor `CompilerTest` to replace duplicate assertion logic with helper method, adjust formatting in parameterized tests for consistency.">
      <option name="closed" value="true" />
      <created>1754663856639</created>
      <option name="number" value="00548" />
      <option name="presentableId" value="LOCAL-00548" />
      <option name="project" value="LOCAL" />
      <updated>1754663856639</updated>
    </task>
    <task id="LOCAL-00549" summary="Add support for `let &lt;name&gt; = &lt;identifier&gt;;` syntax in `Compiler` with type inference and validation. Update `CompilerTest` with corresponding test case.">
      <option name="closed" value="true" />
      <created>1754664067942</created>
      <option name="number" value="00549" />
      <option name="presentableId" value="LOCAL-00549" />
      <option name="project" value="LOCAL" />
      <updated>1754664067942</updated>
    </task>
    <task id="LOCAL-00550" summary="Add support for `mut` variables and assignment syntax in `Compiler`. Update `CompilerTest` with tests for mutability validation.">
      <option name="closed" value="true" />
      <created>1754664299403</created>
      <option name="number" value="00550" />
      <option name="presentableId" value="LOCAL-00550" />
      <option name="project" value="LOCAL" />
      <updated>1754664299403</updated>
    </task>
    <task id="LOCAL-00551" summary="Extract statement handling logic from `Compiler` to new `StatementHandlers` class for better modularity. Add support for conditional operator in `let` and assignment syntax. Update `CompilerTest` with additional cases and simplify assertion methods.">
      <option name="closed" value="true" />
      <created>1754665611558</created>
      <option name="number" value="00551" />
      <option name="presentableId" value="LOCAL-00551" />
      <option name="project" value="LOCAL" />
      <updated>1754665611558</updated>
    </task>
    <task id="LOCAL-00552" summary="Add support for pointer declaration and address-of initializer in `Compiler`. Update `CompilerTest` with corresponding cases. Refactor `handleLetMut` for pattern consolidation.">
      <option name="closed" value="true" />
      <created>1754665920719</created>
      <option name="number" value="00552" />
      <option name="presentableId" value="LOCAL-00552" />
      <option name="project" value="LOCAL" />
      <updated>1754665920719</updated>
    </task>
    <task id="LOCAL-00553" summary="Add support for `let x : U8..U64` and `let x : I8..I64` syntax in `Compiler`. Update `CompilerTest` with comprehensive test cases covering all integer types.">
      <option name="closed" value="true" />
      <created>1754667093072</created>
      <option name="number" value="00553" />
      <option name="presentableId" value="LOCAL-00553" />
      <option name="project" value="LOCAL" />
      <updated>1754667093072</updated>
    </task>
    <task id="LOCAL-00554" summary="Add support for suffix-typed integer literals (e.g., `let x = 0U8;`) in `Compiler`. Update `CompilerTest` with corresponding test case. Factor out declaration emission logic.">
      <option name="closed" value="true" />
      <created>1754667328580</created>
      <option name="number" value="00554" />
      <option name="presentableId" value="LOCAL-00554" />
      <option name="project" value="LOCAL" />
      <updated>1754667328580</updated>
    </task>
    <task id="LOCAL-00555" summary="Add default type handling for untyped integer literals in `Compiler`. Update `CompilerTest` with corresponding test case.">
      <option name="closed" value="true" />
      <created>1754667579027</created>
      <option name="number" value="00555" />
      <option name="presentableId" value="LOCAL-00555" />
      <option name="project" value="LOCAL" />
      <updated>1754667579027</updated>
    </task>
    <task id="LOCAL-00556" summary="Add support for typed and untyped `Bool` literals in `Compiler`. Update `CompilerTest` with relevant test cases. Extend `checkstyle.xml` with method count rule.">
      <option name="closed" value="true" />
      <created>1754667728967</created>
      <option name="number" value="00556" />
      <option name="presentableId" value="LOCAL-00556" />
      <option name="project" value="LOCAL" />
      <updated>1754667728967</updated>
    </task>
    <task id="LOCAL-00557" summary="Add support for multiple semicolon-terminated `let` statements in `Compiler`. Update `CompilerTest` with test cases for variable references and multi-statement scenarios. Refactor `Compiler` for modular statement handling.">
      <option name="closed" value="true" />
      <created>1754668092752</created>
      <option name="number" value="00557" />
      <option name="presentableId" value="LOCAL-00557" />
      <option name="project" value="LOCAL" />
      <updated>1754668092752</updated>
    </task>
    <task id="LOCAL-00558" summary="Add support for mutable `let` declarations and assignments in `Compiler`. Update `CompilerTest` with test cases for mutability and assignment validation. Refactor environment handling to use `VarInfo`.">
      <option name="closed" value="true" />
      <created>1754668448088</created>
      <option name="number" value="00558" />
      <option name="presentableId" value="LOCAL-00558" />
      <option name="project" value="LOCAL" />
      <updated>1754668448088</updated>
    </task>
    <option name="localTasksCounter" value="559" />
    <servers />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="*.ts" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT_PROFILE" value="Project Default" />
    <MESSAGE value="Refactor `CompilerTest` with helper methods for validation and streamline tests for variable declarations and reassignment. Fix whitespace inconsistencies in `Compiler`. Update `Checkstyle` to enforce loop limits in methods." />
    <MESSAGE value="Remove `Compiler`, `CompileException`, tests, and related files." />
    <MESSAGE value="Add `Compiler`, `CompileException`, and `CompilerTest` with initial implementation and basic test coverage. Update project configuration files accordingly." />
    <MESSAGE value="Add pattern matching for `let I32` declarations in `Compiler` and test coverage in `CompilerTest`" />
    <MESSAGE value="Generalize `let` pattern in `Compiler` to support signed and unsigned integer types. Refactor `CompilerTest` with a helper method for cleaner test validation." />
    <MESSAGE value="Refactor `let` pattern in `Compiler` to avoid inline conditionals and update `Checkstyle` to disallow ternary operator usage." />
    <MESSAGE value="Update `Checkstyle` configuration to replace `MethodLength` check with nesting depth restrictions and enhance readability constraints" />
    <MESSAGE value="Add support for additional integer types in `Compiler` (`I8`, `I16`, `I64`, `U8`, `U16`, `U32`, `U64`) and extend `CompilerTest` with corresponding test cases." />
    <MESSAGE value="Refactor `CompilerTest` to consolidate integer type tests using parameterized tests." />
    <MESSAGE value="Add support for `let &lt;name&gt; = &lt;int&gt;;` syntax in `Compiler` with default type `I32` and corresponding test case in `CompilerTest`." />
    <MESSAGE value="Add support for `let &lt;name&gt; = &lt;number&gt;&lt;suffix&gt;;` syntax in `Compiler` with C type mapping and add corresponding test case in `CompilerTest`." />
    <MESSAGE value="Add initial `.junie/guidelines.md` with basic build instructions" />
    <MESSAGE value="Refactor `Compiler` patterns for readability, add type mismatch check, and update `CompilerTest` with additional test case." />
    <MESSAGE value="Refactor `CompilerTest` to replace duplicate assertion logic with helper method, adjust formatting in parameterized tests for consistency." />
    <MESSAGE value="Add support for `let &lt;name&gt; = &lt;identifier&gt;;` syntax in `Compiler` with type inference and validation. Update `CompilerTest` with corresponding test case." />
    <MESSAGE value="Add support for `mut` variables and assignment syntax in `Compiler`. Update `CompilerTest` with tests for mutability validation." />
    <MESSAGE value="Extract statement handling logic from `Compiler` to new `StatementHandlers` class for better modularity. Add support for conditional operator in `let` and assignment syntax. Update `CompilerTest` with additional cases and simplify assertion methods." />
    <MESSAGE value="Add support for pointer declaration and address-of initializer in `Compiler`. Update `CompilerTest` with corresponding cases. Refactor `handleLetMut` for pattern consolidation." />
    <MESSAGE value="Add support for `let x : I32 = 0;` syntax in `Compiler`. Update `CompilerTest` with corresponding test case. Adjust `.junie/guidelines.md` with duplicate code removal step." />
    <MESSAGE value="Add support for `let x : U8..U64` and `let x : I8..I64` syntax in `Compiler`. Update `CompilerTest` with comprehensive test cases covering all integer types." />
    <MESSAGE value="Add support for suffix-typed integer literals (e.g., `let x = 0U8;`) in `Compiler`. Update `CompilerTest` with corresponding test case. Factor out declaration emission logic." />
    <MESSAGE value="Add default type handling for untyped integer literals in `Compiler`. Update `CompilerTest` with corresponding test case." />
    <MESSAGE value="Add support for typed and untyped `Bool` literals in `Compiler`. Update `CompilerTest` with relevant test cases. Extend `checkstyle.xml` with method count rule." />
    <MESSAGE value="Add support for multiple semicolon-terminated `let` statements in `Compiler`. Update `CompilerTest` with test cases for variable references and multi-statement scenarios. Refactor `Compiler` for modular statement handling." />
    <MESSAGE value="Add support for mutable `let` declarations and assignments in `Compiler`. Update `CompilerTest` with test cases for mutability and assignment validation. Refactor environment handling to use `VarInfo`." />
    <option name="LAST_COMMIT_MESSAGE" value="Add support for mutable `let` declarations and assignments in `Compiler`. Update `CompilerTest` with test cases for mutability and assignment validation. Refactor environment handling to use `VarInfo`." />
  </component>
  <component name="XDebuggerManager">
    <pin-to-top-manager>
      <pinned-members>
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="key" />
        <PinnedItemInfo parentTag="magma.compile.MapNode" memberName="maybeType" />
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="value" />
        <PinnedItemInfo parentTag="jvm.collect.map.JavaMap" memberName="map" />
        <PinnedItemInfo parentTag="magma.option.Tuple" memberName="right" />
        <PinnedItemInfo parentTag="magma.Main$Maps$JavaMap" memberName="internalMap" />
        <PinnedItemInfo parentTag="magma.Main$StructType" memberName="properties" />
      </pinned-members>
    </pin-to-top-manager>
  </component>
</project>
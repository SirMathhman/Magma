<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AnalysisUIOptions">
    <option name="ANALYZE_INJECTED_CODE" value="false" />
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Handle invalid conditional expressions in `Compiler` by adding specific checks for missing operands and multiple operators. Extend validation logic to improve">
      <change beforePath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/magma/Compiler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/magma/Compiler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/com/magma/CompilerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/com/magma/CompilerTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Record" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;SirMathhman&quot;
  }
}</component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="master" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/SirMathhman/Magma.git&quot;,
    &quot;accountId&quot;: &quot;5ccce926-293e-4330-b2a7-270ea3228439&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="304EoLp6ZWsUcvlOP9yXLjMrk5A" />
  <component name="ProjectLevelVcsManager">
    <OptionsSetting value="false" id="Update" />
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.HelloWorld.executor&quot;: &quot;Run&quot;,
    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
    &quot;Application.MainV2.executor&quot;: &quot;Run&quot;,
    &quot;Batch.build.executor&quot;: &quot;Run&quot;,
    &quot;Batch.test.executor&quot;: &quot;Run&quot;,
    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
    &quot;JUnit.All in Magma.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ApplicationTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CompilerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.MapNodeImmutabilityTest.testMergeReturnsNewInstance.executor&quot;: &quot;Debug&quot;,
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;Python tests.Python tests for test_basic.test_compile_non_empty_returns_placeholder.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_compiler.test_compile_empty_input_creates_empty_main.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_compiler.test_compile_inner_function_with_inferred_declaration.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_misc.test_compile_class_fn_param_function_type.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_basic.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_compiler.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_flow.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_imports.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_misc.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.pytest for test_basic.test_compile_non_empty_returns_placeholder.executor&quot;: &quot;Run&quot;,
    &quot;Python.__init__.executor&quot;: &quot;Run&quot;,
    &quot;Python.utils.executor&quot;: &quot;Run&quot;,
    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;introduce.parameter.lambda&quot;: &quot;true&quot;,
    &quot;junie.onboarding.icon.badge.shown&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_directory_selection&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma/test/java&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma/src/Main.java&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15044248&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;Errors&quot;,
    &quot;to.speed.mode.migration.done&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="magma" />
      <recent name="magma.error" />
      <recent name="magma.rule" />
      <recent name="magma.node" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\mathm\IdeaProjects\Magma\src\java" />
      <recent name="C:\Users\mathm\IdeaProjects\Magma\.venv" />
    </key>
    <key name="MoveMembersDialog.RECENTS_KEY">
      <recent name="magma.Placeholder" />
      <recent name="magma.Main.Lists" />
      <recent name="magma.Application" />
      <recent name="magma.ApplicationTest" />
      <recent name="magma.Lang" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="magma.node" />
      <recent name="magma" />
      <recent name="magma.divide" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="magma.node" />
      <recent name="magma.result" />
      <recent name="magma.option" />
      <recent name="magma" />
      <recent name="magma.rule.divide" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="com.magma" />
      <recent name="" />
      <recent name="magma" />
      <recent name="magma.node" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="magma" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.CompilerTest">
    <configuration name="build" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="Magma" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="build.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="test" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="Magma" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="test.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="All in Magma" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Magma" />
      <option name="PACKAGE_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="Magma" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.magma.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.magma" />
      <option name="MAIN_CLASS_NAME" value="com.magma.CompilerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.CompilerTest" />
        <item itemvalue="Batch.test" />
        <item itemvalue="Batch.build" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-4c141bd692a7-e2d783800521-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.26927.90" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Delete everything! This is a hard reset!" />
      <created>1752878619782</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752878619782</updated>
    </task>
    <task id="LOCAL-00417" summary="Refactor `Main.java` to streamline type suffix checking by extracting a helper method, reducing nesting, and simplifying logic.">
      <option name="closed" value="true" />
      <created>1754531915210</created>
      <option name="number" value="00417" />
      <option name="presentableId" value="LOCAL-00417" />
      <option name="project" value="LOCAL" />
      <updated>1754531915210</updated>
    </task>
    <task id="LOCAL-00418" summary="Refactor `Main.java` to rename `extracted` to `convertStringToCArrayInitializer` for clarity, extract `handleEscapeSequence` for improved modularity, and enhance string literal handling in C array code generation.">
      <option name="closed" value="true" />
      <created>1754532048328</created>
      <option name="number" value="00418" />
      <option name="presentableId" value="LOCAL-00418" />
      <option name="project" value="LOCAL" />
      <updated>1754532048328</updated>
    </task>
    <task id="LOCAL-00419" summary="Refactor `Main.java` to extract `ArrayDeclaration` and `MultiDimArrayDeclaration` into separate files for improved modularity and clarity.">
      <option name="closed" value="true" />
      <created>1754532065545</created>
      <option name="number" value="00419" />
      <option name="presentableId" value="LOCAL-00419" />
      <option name="project" value="LOCAL" />
      <updated>1754532065545</updated>
    </task>
    <task id="LOCAL-00420" summary="Refactor `Main.java` to improve error handling, extract helper methods for modularity, and enhance validations for types, arrays, and string literals.">
      <option name="closed" value="true" />
      <created>1754532948561</created>
      <option name="number" value="00420" />
      <option name="presentableId" value="LOCAL-00420" />
      <option name="project" value="LOCAL" />
      <updated>1754532948561</updated>
    </task>
    <task id="LOCAL-00421" summary="Add support for multiple declarations in a single line, update `Main.java` for enhanced processing, and extend tests to validate new functionality.">
      <option name="closed" value="true" />
      <created>1754533402117</created>
      <option name="number" value="00421" />
      <option name="presentableId" value="LOCAL-00421" />
      <option name="project" value="LOCAL" />
      <updated>1754533402117</updated>
    </task>
    <task id="LOCAL-00422" summary="Add support for variable assignments in `Main.java`, update C code generation and validations, and extend tests to cover assignments.">
      <option name="closed" value="true" />
      <created>1754535666275</created>
      <option name="number" value="00422" />
      <option name="presentableId" value="LOCAL-00422" />
      <option name="project" value="LOCAL" />
      <updated>1754535666275</updated>
    </task>
    <task id="LOCAL-00423" summary="Add support for comparison operators (`==`, `!=`, `&lt;`, `&gt;`, `&lt;=`, `&gt;=`) in `Main.java`, update C code generation logic, and extend tests and README with examples.">
      <option name="closed" value="true" />
      <created>1754536402623</created>
      <option name="number" value="00423" />
      <option name="presentableId" value="LOCAL-00423" />
      <option name="project" value="LOCAL" />
      <updated>1754536402623</updated>
    </task>
    <task id="LOCAL-00424" summary="Add support for array declarations (single and multi-dimensional), string initialization in U8 arrays, and C code generation logic with modular structure across new classes (`ArrayHandler`, `CCodeGenerator`, `MagmaCompiler`, and `MagmaParser`). Extend validations and initial processing functionality.">
      <option name="closed" value="true" />
      <created>1754537718685</created>
      <option name="number" value="00424" />
      <option name="presentableId" value="LOCAL-00424" />
      <option name="project" value="LOCAL" />
      <updated>1754537718685</updated>
    </task>
    <task id="LOCAL-00425" summary="No changes to source code. Update `.idea/workspace.xml` to reflect task and commit history.">
      <option name="closed" value="true" />
      <created>1754540387808</created>
      <option name="number" value="00425" />
      <option name="presentableId" value="LOCAL-00425" />
      <option name="project" value="LOCAL" />
      <updated>1754540387808</updated>
    </task>
    <task id="LOCAL-00426" summary="Add `ParsingState` record to encapsulate parsing state flags (`insideArrayType`, `insideArrayValue`).">
      <option name="closed" value="true" />
      <created>1754540395002</created>
      <option name="number" value="00426" />
      <option name="presentableId" value="LOCAL-00426" />
      <option name="project" value="LOCAL" />
      <updated>1754540395002</updated>
    </task>
    <task id="LOCAL-00427" summary="Refactor `ArrayHandler` formatting to replace spaces with tabs for consistency across methods and improve readability.">
      <option name="closed" value="true" />
      <created>1754540432347</created>
      <option name="number" value="00427" />
      <option name="presentableId" value="LOCAL-00427" />
      <option name="project" value="LOCAL" />
      <updated>1754540432347</updated>
    </task>
    <task id="LOCAL-00428" summary="Consolidate `ArrayDeclaration` and `MultiDimArrayDeclaration` into a unified structure to handle both single and multi-dimensional arrays. Update parsing logic, validation, and C code generation accordingly. Remove `MultiDimArrayDeclaration`.">
      <option name="closed" value="true" />
      <created>1754540622575</created>
      <option name="number" value="00428" />
      <option name="presentableId" value="LOCAL-00428" />
      <option name="project" value="LOCAL" />
      <updated>1754540622575</updated>
    </task>
    <task id="LOCAL-00429" summary="Remove `StringHandler` class and refactor string declaration handling into `ArrayHandler` for improved modularity. Streamline C code generation by converting methods to return strings instead of using `StringBuilder`.">
      <option name="closed" value="true" />
      <created>1754542043101</created>
      <option name="number" value="00429" />
      <option name="presentableId" value="LOCAL-00429" />
      <option name="project" value="LOCAL" />
      <updated>1754542043101</updated>
    </task>
    <task id="LOCAL-00430" summary="Add `validateTypeCompatibility` to enforce type validation during variable processing. Update `VariableHandler` to incorporate this validation and avoid incompatible assignments (e.g., boolean to numeric types). Extend `ErrorHandlingTest` with `testInvalidTypeAssignment` to verify mismatches trigger compilation errors.">
      <option name="closed" value="true" />
      <created>1754574019551</created>
      <option name="number" value="00430" />
      <option name="presentableId" value="LOCAL-00430" />
      <option name="project" value="LOCAL" />
      <updated>1754574019551</updated>
    </task>
    <task id="LOCAL-00431" summary="Remove `typePattern` field and associated methods from `TypeMapper`. Refactor `TypeHandler`, `MagmaParser`, and `VariableHandler` to directly use inline type-matching logic, simplifying code structure and reducing redundancy.">
      <option name="closed" value="true" />
      <created>1754574595133</created>
      <option name="number" value="00431" />
      <option name="presentableId" value="LOCAL-00431" />
      <option name="project" value="LOCAL" />
      <updated>1754574595133</updated>
    </task>
    <task id="LOCAL-00432" summary="Add `WhitespaceTest` to validate compiler handling of various whitespace patterns in declarations. Enhance `TypeHandler`, `ArrayHandler`, and `VariableHandler` to support flexible whitespace parsing. Update `.idea/workspace.xml` to reflect task changes.">
      <option name="closed" value="true" />
      <created>1754575582334</created>
      <option name="number" value="00432" />
      <option name="presentableId" value="LOCAL-00432" />
      <option name="project" value="LOCAL" />
      <updated>1754575582334</updated>
    </task>
    <task id="LOCAL-00433" summary="Nuke">
      <option name="closed" value="true" />
      <created>1754577170943</created>
      <option name="number" value="00433" />
      <option name="presentableId" value="LOCAL-00433" />
      <option name="project" value="LOCAL" />
      <updated>1754577170943</updated>
    </task>
    <task id="LOCAL-00434" summary="Add initial build and test scripts, alongside a basic `Compiler` class and its unit test. Include JUnit dependencies.">
      <option name="closed" value="true" />
      <created>1754577537609</created>
      <option name="number" value="00434" />
      <option name="presentableId" value="LOCAL-00434" />
      <option name="project" value="LOCAL" />
      <updated>1754577537609</updated>
    </task>
    <task id="LOCAL-00435" summary="Delete">
      <option name="closed" value="true" />
      <created>1754577550197</created>
      <option name="number" value="00435" />
      <option name="presentableId" value="LOCAL-00435" />
      <option name="project" value="LOCAL" />
      <updated>1754577550197</updated>
    </task>
    <task id="LOCAL-00436" summary="Update `.gitignore` to exclude `/build/` directory. Adjust `.idea/workspace.xml` to include new `Batch.build` configuration for build tasks.">
      <option name="closed" value="true" />
      <created>1754577612173</created>
      <option name="number" value="00436" />
      <option name="presentableId" value="LOCAL-00436" />
      <option name="project" value="LOCAL" />
      <updated>1754577612173</updated>
    </task>
    <task id="LOCAL-00437" summary="Update `.gitignore` to exclude `/lib/` directory and adjust `.idea/workspace.xml` to reflect new `Batch.test` configuration changes.">
      <option name="closed" value="true" />
      <created>1754577772908</created>
      <option name="number" value="00437" />
      <option name="presentableId" value="LOCAL-00437" />
      <option name="project" value="LOCAL" />
      <updated>1754577772908</updated>
    </task>
    <task id="LOCAL-00438" summary="Add `process` method to `Compiler` for transforming &quot;let&quot; declarations to C-style syntax and update corresponding unit tests.">
      <option name="closed" value="true" />
      <created>1754579322371</created>
      <option name="number" value="00438" />
      <option name="presentableId" value="LOCAL-00438" />
      <option name="project" value="LOCAL" />
      <updated>1754579322371</updated>
    </task>
    <task id="LOCAL-00439" summary="Use JUnit parameterized tests for `CompilerTest`, extending coverage for &quot;let&quot; declarations with various names and values. Update test dependencies in `test.bat`.">
      <option name="closed" value="true" />
      <created>1754579712449</created>
      <option name="number" value="00439" />
      <option name="presentableId" value="LOCAL-00439" />
      <option name="project" value="LOCAL" />
      <updated>1754579712449</updated>
    </task>
    <task id="LOCAL-00440" summary="Handle type annotations and trailing semicolons in &quot;let&quot; declarations. Extend `CompilerTest` with new test cases.">
      <option name="closed" value="true" />
      <created>1754579775209</created>
      <option name="number" value="00440" />
      <option name="presentableId" value="LOCAL-00440" />
      <option name="project" value="LOCAL" />
      <updated>1754579775209</updated>
    </task>
    <task id="LOCAL-00441" summary="Support additional type annotations (`I8`, `I16`, `I64`, `U8`, `U16`, `U32`, `U64`) in `let` declarations. Update `Compiler` and enhance `CompilerTest` with relevant test cases.">
      <option name="closed" value="true" />
      <created>1754579874999</created>
      <option name="number" value="00441" />
      <option name="presentableId" value="LOCAL-00441" />
      <option name="project" value="LOCAL" />
      <updated>1754579874999</updated>
    </task>
    <task id="LOCAL-00442" summary="Refactor type annotation handling in `Compiler` using a mapping-based approach for improved maintainability and readability.">
      <option name="closed" value="true" />
      <created>1754579947836</created>
      <option name="number" value="00442" />
      <option name="presentableId" value="LOCAL-00442" />
      <option name="project" value="LOCAL" />
      <updated>1754579947836</updated>
    </task>
    <task id="LOCAL-00443" summary="Trim type annotation colons and handle extra whitespace in `let` declarations. Update `CompilerTest` with new test cases to validate changes.">
      <option name="closed" value="true" />
      <created>1754580091851</created>
      <option name="number" value="00443" />
      <option name="presentableId" value="LOCAL-00443" />
      <option name="project" value="LOCAL" />
      <updated>1754580091851</updated>
    </task>
    <task id="LOCAL-00444" summary="Refactor `Compiler` to extract type annotation processing into `TypeInfo` class and improve `let` declaration transformation logic for readability and maintainability. Update `CompilerTest` with relevant test cases.">
      <option name="closed" value="true" />
      <created>1754580194734</created>
      <option name="number" value="00444" />
      <option name="presentableId" value="LOCAL-00444" />
      <option name="project" value="LOCAL" />
      <updated>1754580194734</updated>
    </task>
    <task id="LOCAL-00445" summary="Add `processTypeSuffixes` method to handle type suffixes in literals (e.g., `0U8`, `42I16`) and integrate it into `Compiler`. Extend `CompilerTest` with test cases for suffix handling.">
      <option name="closed" value="true" />
      <created>1754580782495</created>
      <option name="number" value="00445" />
      <option name="presentableId" value="LOCAL-00445" />
      <option name="project" value="LOCAL" />
      <updated>1754580782495</updated>
    </task>
    <task id="LOCAL-00446" summary="Add `CompileException` for handling compilation errors and update `processTypeSuffixes` to check for type mismatches in literals. Extend `CompilerTest` with mismatch tests.">
      <option name="closed" value="true" />
      <created>1754581013015</created>
      <option name="number" value="00446" />
      <option name="presentableId" value="LOCAL-00446" />
      <option name="project" value="LOCAL" />
      <updated>1754581013015</updated>
    </task>
    <task id="LOCAL-00447" summary="Refactor `Compiler` to use `Optional` for type handling, improve error handling with `CompileException`, and update `CompilerTest` with additional mismatch test cases.">
      <option name="closed" value="true" />
      <created>1754581298762</created>
      <option name="number" value="00447" />
      <option name="presentableId" value="LOCAL-00447" />
      <option name="project" value="LOCAL" />
      <updated>1754581298762</updated>
    </task>
    <task id="LOCAL-00448" summary="Refactor `CompileException` to extend `Exception`, update `Compiler` methods to declare `throws CompileException`, and enhance `CompilerTest` with improved exception handling.">
      <option name="closed" value="true" />
      <created>1754581478290</created>
      <option name="number" value="00448" />
      <option name="presentableId" value="LOCAL-00448" />
      <option name="project" value="LOCAL" />
      <updated>1754581478290</updated>
    </task>
    <task id="LOCAL-00449" summary="Infer type from literal suffixes if no annotation is present, refactor type handling logic to use `Optional`, and update `CompilerTest` with suffix-based inference tests.">
      <option name="closed" value="true" />
      <created>1754582098462</created>
      <option name="number" value="00449" />
      <option name="presentableId" value="LOCAL-00449" />
      <option name="project" value="LOCAL" />
      <updated>1754582098462</updated>
    </task>
    <task id="LOCAL-00450" summary="Add support for multiple &quot;let&quot; statements separated by semicolons in `Compiler` and extend `CompilerTest` with relevant test cases.">
      <option name="closed" value="true" />
      <created>1754582519686</created>
      <option name="number" value="00450" />
      <option name="presentableId" value="LOCAL-00450" />
      <option name="project" value="LOCAL" />
      <updated>1754582519686</updated>
    </task>
    <task id="LOCAL-00451" summary="Refactor `Compiler` to extract single statement processing into `processSingleStatement`, streamline logic in `process`, and update `CompilerTest` for alignment.">
      <option name="closed" value="true" />
      <created>1754582728355</created>
      <option name="number" value="00451" />
      <option name="presentableId" value="LOCAL-00451" />
      <option name="project" value="LOCAL" />
      <updated>1754582728355</updated>
    </task>
    <task id="LOCAL-00452" summary="Add support for variable references in `let` statements, implement type compatibility checks, and update `CompilerTest` with new test cases.">
      <option name="closed" value="true" />
      <created>1754582905686</created>
      <option name="number" value="00452" />
      <option name="presentableId" value="LOCAL-00452" />
      <option name="project" value="LOCAL" />
      <updated>1754582905686</updated>
    </task>
    <task id="LOCAL-00453" summary="Add support for arithmetic expressions in `let` statements, implement type checks in `processArithmeticExpression`, and extend `CompilerTest` with arithmetic validation tests.">
      <option name="closed" value="true" />
      <created>1754583145250</created>
      <option name="number" value="00453" />
      <option name="presentableId" value="LOCAL-00453" />
      <option name="project" value="LOCAL" />
      <updated>1754583145250</updated>
    </task>
    <task id="LOCAL-00454" summary="Refactor type suffix and variable reference checks in `processArithmeticExpression` to improve readability, add early exits, and streamline logic.">
      <option name="closed" value="true" />
      <created>1754583230444</created>
      <option name="number" value="00454" />
      <option name="presentableId" value="LOCAL-00454" />
      <option name="project" value="LOCAL" />
      <updated>1754583230444</updated>
    </task>
    <task id="LOCAL-00455" summary="Add parentheses validation in `processArithmeticExpression`, support for nested expressions, and extend `CompilerTest` with relevant tests.">
      <option name="closed" value="true" />
      <created>1754583659012</created>
      <option name="number" value="00455" />
      <option name="presentableId" value="LOCAL-00455" />
      <option name="project" value="LOCAL" />
      <updated>1754583659012</updated>
    </task>
    <task id="LOCAL-00456" summary="Add support for mutable variables, implement reassignment validation, and update `CompilerTest` with relevant tests.">
      <option name="closed" value="true" />
      <created>1754583889782</created>
      <option name="number" value="00456" />
      <option name="presentableId" value="LOCAL-00456" />
      <option name="project" value="LOCAL" />
      <updated>1754583889782</updated>
    </task>
    <task id="LOCAL-00457" summary="Refactor variable tracking in `Compiler` to consolidate `definedVariables` and `mutableVariables` into a single `variables` map with `TypeInfo`.">
      <option name="closed" value="true" />
      <created>1754584045987</created>
      <option name="number" value="00457" />
      <option name="presentableId" value="LOCAL-00457" />
      <option name="project" value="LOCAL" />
      <updated>1754584045987</updated>
    </task>
    <task id="LOCAL-00458" summary="Add support for code blocks with proper scoping, nested block handling, and validation for mismatched braces. Update `CompilerTest` with block-related test cases.">
      <option name="closed" value="true" />
      <created>1754584474514</created>
      <option name="number" value="00458" />
      <option name="presentableId" value="LOCAL-00458" />
      <option name="project" value="LOCAL" />
      <updated>1754584474514</updated>
    </task>
    <task id="LOCAL-00459" summary="Refactor block processing logic in `Compiler` to improve readability, modularity, and handling of nested and mismatched braces. Introduce `TokenInfo` for token tracking.">
      <option name="closed" value="true" />
      <created>1754584842666</created>
      <option name="number" value="00459" />
      <option name="presentableId" value="LOCAL-00459" />
      <option name="project" value="LOCAL" />
      <updated>1754584842666</updated>
    </task>
    <task id="LOCAL-00460" summary="Refactor variable scope tracking in `Compiler` to use stack-based maps for improved scoping. Introduce functions for variable retrieval, undefined checks, and scope handling. Streamline variable validation in expressions.">
      <option name="closed" value="true" />
      <created>1754585352068</created>
      <option name="number" value="00460" />
      <option name="presentableId" value="LOCAL-00460" />
      <option name="project" value="LOCAL" />
      <updated>1754585352068</updated>
    </task>
    <task id="LOCAL-00461" summary="Enforce semicolon usage in `Compiler` for `let` and assignment statements. Update related logic and extend `CompilerTest` for validation.">
      <option name="closed" value="true" />
      <created>1754585801734</created>
      <option name="number" value="00461" />
      <option name="presentableId" value="LOCAL-00461" />
      <option name="project" value="LOCAL" />
      <updated>1754585801734</updated>
    </task>
    <task id="LOCAL-00462" summary="Add pointer support in `Compiler`, introducing mutable and immutable pointers, dereferencing, type safety, and validation logic. Extend `CompilerTest` with comprehensive pointer-related tests.">
      <option name="closed" value="true" />
      <created>1754586850229</created>
      <option name="number" value="00462" />
      <option name="presentableId" value="LOCAL-00462" />
      <option name="project" value="LOCAL" />
      <updated>1754586850229</updated>
    </task>
    <task id="LOCAL-00463" summary="Add `Bool` type support in `Compiler` with type checking for boolean literals, variable assignments, and mismatched types. Extend `CompilerTest` with comprehensive boolean-related tests.">
      <option name="closed" value="true" />
      <created>1754587262923</created>
      <option name="number" value="00463" />
      <option name="presentableId" value="LOCAL-00463" />
      <option name="project" value="LOCAL" />
      <updated>1754587262923</updated>
    </task>
    <task id="LOCAL-00464" summary="Refactor `Compiler` to improve type suffix handling, boolean literal checks, and variable reference validation. Introduce helper methods for readability and modularity.">
      <option name="closed" value="true" />
      <created>1754587965492</created>
      <option name="number" value="00464" />
      <option name="presentableId" value="LOCAL-00464" />
      <option name="project" value="LOCAL" />
      <updated>1754587965493</updated>
    </task>
    <task id="LOCAL-00465" summary="Handle invalid conditional expressions in `Compiler` by adding specific checks for missing operands and multiple operators. Extend validation logic to improve error handling.">
      <option name="closed" value="true" />
      <created>1754592856324</created>
      <option name="number" value="00465" />
      <option name="presentableId" value="LOCAL-00465" />
      <option name="project" value="LOCAL" />
      <updated>1754592856324</updated>
    </task>
    <option name="localTasksCounter" value="466" />
    <servers />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="*.ts" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT_PROFILE" value="Project Default" />
    <MESSAGE value="Refactor type annotation handling in `Compiler` using a mapping-based approach for improved maintainability and readability." />
    <MESSAGE value="Trim type annotation colons and handle extra whitespace in `let` declarations. Update `CompilerTest` with new test cases to validate changes." />
    <MESSAGE value="Refactor `Compiler` to extract type annotation processing into `TypeInfo` class and improve `let` declaration transformation logic for readability and maintainability. Update `CompilerTest` with relevant test cases." />
    <MESSAGE value="Add `processTypeSuffixes` method to handle type suffixes in literals (e.g., `0U8`, `42I16`) and integrate it into `Compiler`. Extend `CompilerTest` with test cases for suffix handling." />
    <MESSAGE value="Add `CompileException` for handling compilation errors and update `processTypeSuffixes` to check for type mismatches in literals. Extend `CompilerTest` with mismatch tests." />
    <MESSAGE value="Refactor `Compiler` to use `Optional` for type handling, improve error handling with `CompileException`, and update `CompilerTest` with additional mismatch test cases." />
    <MESSAGE value="Refactor `CompileException` to extend `Exception`, update `Compiler` methods to declare `throws CompileException`, and enhance `CompilerTest` with improved exception handling." />
    <MESSAGE value="Infer type from literal suffixes if no annotation is present, refactor type handling logic to use `Optional`, and update `CompilerTest` with suffix-based inference tests." />
    <MESSAGE value="Add support for multiple &quot;let&quot; statements separated by semicolons in `Compiler` and extend `CompilerTest` with relevant test cases." />
    <MESSAGE value="Refactor `Compiler` to extract single statement processing into `processSingleStatement`, streamline logic in `process`, and update `CompilerTest` for alignment." />
    <MESSAGE value="Add support for variable references in `let` statements, implement type compatibility checks, and update `CompilerTest` with new test cases." />
    <MESSAGE value="Add support for arithmetic expressions in `let` statements, implement type checks in `processArithmeticExpression`, and extend `CompilerTest` with arithmetic validation tests." />
    <MESSAGE value="Refactor type suffix and variable reference checks in `processArithmeticExpression` to improve readability, add early exits, and streamline logic." />
    <MESSAGE value="Add parentheses validation in `processArithmeticExpression`, support for nested expressions, and extend `CompilerTest` with relevant tests." />
    <MESSAGE value="Add support for mutable variables, implement reassignment validation, and update `CompilerTest` with relevant tests." />
    <MESSAGE value="Refactor variable tracking in `Compiler` to consolidate `definedVariables` and `mutableVariables` into a single `variables` map with `TypeInfo`." />
    <MESSAGE value="Add support for code blocks with proper scoping, nested block handling, and validation for mismatched braces. Update `CompilerTest` with block-related test cases." />
    <MESSAGE value="Refactor block processing logic in `Compiler` to improve readability, modularity, and handling of nested and mismatched braces. Introduce `TokenInfo` for token tracking." />
    <MESSAGE value="Refactor variable scope tracking in `Compiler` to use stack-based maps for improved scoping. Introduce functions for variable retrieval, undefined checks, and scope handling. Streamline variable validation in expressions." />
    <MESSAGE value="Enforce semicolon usage in `Compiler` for `let` and assignment statements. Update related logic and extend `CompilerTest` for validation." />
    <MESSAGE value="Add pointer support in `Compiler`, introducing mutable and immutable pointers, dereferencing, type safety, and validation logic. Extend `CompilerTest` with comprehensive pointer-related tests." />
    <MESSAGE value="Add `Bool` type support in `Compiler` with type checking for boolean literals, variable assignments, and mismatched types. Extend `CompilerTest` with comprehensive boolean-related tests." />
    <MESSAGE value="Refactor `Compiler` to improve type suffix handling, boolean literal checks, and variable reference validation. Introduce helper methods for readability and modularity." />
    <MESSAGE value="Add support for conditional expressions in `Compiler` with type checking and validation. Implement operators (`&gt;`, `&lt;`, `&gt;=`, `&lt;=`, `==`, `!=`) and ensure compatibility with `Bool` type. Extend `CompilerTest` with comprehensive conditional expression tests." />
    <MESSAGE value="Handle invalid conditional expressions in `Compiler` by adding specific checks for missing operands and multiple operators. Extend validation logic to improve" />
    <option name="LAST_COMMIT_MESSAGE" value="Handle invalid conditional expressions in `Compiler` by adding specific checks for missing operands and multiple operators. Extend validation logic to improve" />
  </component>
  <component name="XDebuggerManager">
    <pin-to-top-manager>
      <pinned-members>
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="key" />
        <PinnedItemInfo parentTag="magma.compile.MapNode" memberName="maybeType" />
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="value" />
        <PinnedItemInfo parentTag="jvm.collect.map.JavaMap" memberName="map" />
        <PinnedItemInfo parentTag="magma.option.Tuple" memberName="right" />
        <PinnedItemInfo parentTag="magma.Main$Maps$JavaMap" memberName="internalMap" />
        <PinnedItemInfo parentTag="magma.Main$StructType" memberName="properties" />
      </pinned-members>
    </pin-to-top-manager>
  </component>
</project>
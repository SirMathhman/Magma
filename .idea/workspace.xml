<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AnalysisUIOptions">
    <option name="ANALYZE_INJECTED_CODE" value="false" />
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Add support for `if-else` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid scenarios. Extend regex patterns and C++ code generation logic to handle `if-else` syntax.">
      <change beforePath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/magma/Compiler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/java/magma/CompilerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/magma/CompilerTest.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Record" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;SirMathhman&quot;
  }
}</component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="master" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/SirMathhman/Magma.git&quot;,
    &quot;accountId&quot;: &quot;5ccce926-293e-4330-b2a7-270ea3228439&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="304EoLp6ZWsUcvlOP9yXLjMrk5A" />
  <component name="ProjectLevelVcsManager">
    <OptionsSetting value="false" id="Update" />
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.HelloWorld.executor&quot;: &quot;Run&quot;,
    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
    &quot;Application.MainV2.executor&quot;: &quot;Run&quot;,
    &quot;Batch.build-maven.executor&quot;: &quot;Run&quot;,
    &quot;Batch.build.executor&quot;: &quot;Run&quot;,
    &quot;Batch.checkstyle-maven.executor&quot;: &quot;Run&quot;,
    &quot;Batch.test.executor&quot;: &quot;Run&quot;,
    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
    &quot;JUnit.All in Magma.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.All in magma-compiler.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ApplicationTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CompilerTest (1).executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CompilerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.MapNodeImmutabilityTest.testMergeReturnsNewInstance.executor&quot;: &quot;Debug&quot;,
    &quot;JUnit.java in magma-compiler.executor&quot;: &quot;Run&quot;,
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;Python tests.Python tests for test_basic.test_compile_non_empty_returns_placeholder.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_compiler.test_compile_empty_input_creates_empty_main.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_compiler.test_compile_inner_function_with_inferred_declaration.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests for test_misc.test_compile_class_fn_param_function_type.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_basic.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_compiler.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_flow.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_imports.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in test_misc.py.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.Python tests in tests.executor&quot;: &quot;Run&quot;,
    &quot;Python tests.pytest for test_basic.test_compile_non_empty_returns_placeholder.executor&quot;: &quot;Run&quot;,
    &quot;Python.__init__.executor&quot;: &quot;Run&quot;,
    &quot;Python.utils.executor&quot;: &quot;Run&quot;,
    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;introduce.parameter.lambda&quot;: &quot;true&quot;,
    &quot;junie.onboarding.icon.badge.shown&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_directory_selection&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma/src/test/java/magma&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/mathm/IdeaProjects/Magma/src/Main.java&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15044248&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;Errors&quot;,
    &quot;to.speed.mode.migration.done&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="magma" />
      <recent name="magma.error" />
      <recent name="magma.rule" />
      <recent name="magma.node" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\mathm\IdeaProjects\Magma\src\java" />
      <recent name="C:\Users\mathm\IdeaProjects\Magma\.venv" />
    </key>
    <key name="MoveMembersDialog.RECENTS_KEY">
      <recent name="magma.TestUtils" />
      <recent name="magma.Placeholder" />
      <recent name="magma.Main.Lists" />
      <recent name="magma.Application" />
      <recent name="magma.ApplicationTest" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="magma.node" />
      <recent name="magma" />
      <recent name="magma.divide" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="magma" />
      <recent name="magma.node" />
      <recent name="magma.result" />
      <recent name="magma.option" />
      <recent name="magma.rule.divide" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="magma" />
      <recent name="com.magma" />
      <recent name="" />
      <recent name="magma.node" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="magma" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="magma" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.CompilerTest">
    <configuration name="build-maven" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="magma-compiler" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="build-maven.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="build" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="magma-compiler" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="build.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="test" type="BatchConfigurationType" factoryName="Batch" temporary="true">
      <module name="Magma" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SCRIPT_NAME" value="test.bat" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="All in magma-compiler" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <option name="PACKAGE_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CompilerTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="magma-compiler" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="magma.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="magma" />
      <option name="MAIN_CLASS_NAME" value="magma.CompilerTest" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.CompilerTest" />
        <item itemvalue="JUnit.All in magma-compiler" />
        <item itemvalue="Batch.build" />
        <item itemvalue="Batch.test" />
        <item itemvalue="Batch.build-maven" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-4c141bd692a7-e2d783800521-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.26927.90" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="091cd905-c547-4179-9fb8-5e9879cce285" name="Changes" comment="Delete everything! This is a hard reset!" />
      <created>1752878619782</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752878619782</updated>
    </task>
    <task id="LOCAL-00468" summary="Refactor `Compiler` to separate handling of explicit type annotations and type suffixes. Extract validation utilities to `TestUtils` and update `CompilerTest` accordingly.">
      <option name="closed" value="true" />
      <created>1754597803139</created>
      <option name="number" value="00468" />
      <option name="presentableId" value="LOCAL-00468" />
      <option name="project" value="LOCAL" />
      <updated>1754597803139</updated>
    </task>
    <task id="LOCAL-00469" summary="Add test for type mismatch in `let` declarations, including suffix validation. Update `Compiler` to handle and check type suffix compatibility.">
      <option name="closed" value="true" />
      <created>1754597993488</created>
      <option name="number" value="00469" />
      <option name="presentableId" value="LOCAL-00469" />
      <option name="project" value="LOCAL" />
      <updated>1754597993488</updated>
    </task>
    <task id="LOCAL-00470" summary="Add support for `Bool` type in `let` statements and update tests accordingly">
      <option name="closed" value="true" />
      <created>1754598258439</created>
      <option name="number" value="00470" />
      <option name="presentableId" value="LOCAL-00470" />
      <option name="project" value="LOCAL" />
      <updated>1754598258439</updated>
    </task>
    <task id="LOCAL-00471" summary="Refactor `CompilerTest` into multiple test classes (`BasicCompilerTest`, `TypeSystemTest`, `VariableDeclarationTest`) to improve test organization and maintainability.">
      <option name="closed" value="true" />
      <created>1754598387347</created>
      <option name="number" value="00471" />
      <option name="presentableId" value="LOCAL-00471" />
      <option name="project" value="LOCAL" />
      <updated>1754598387347</updated>
    </task>
    <task id="LOCAL-00472" summary="Add support for character literals (`'a'`) in `let` statements, enforce `U8` type restriction, and update tests in `TypeSystemTest`.">
      <option name="closed" value="true" />
      <created>1754598610146</created>
      <option name="number" value="00472" />
      <option name="presentableId" value="LOCAL-00472" />
      <option name="project" value="LOCAL" />
      <updated>1754598610147</updated>
    </task>
    <task id="LOCAL-00473" summary="Add support for string literal initialization in `U8` arrays, enforce type and size validations, and introduce `ArrayTypeTest` for test coverage.">
      <option name="closed" value="true" />
      <created>1754598997356</created>
      <option name="number" value="00473" />
      <option name="presentableId" value="LOCAL-00473" />
      <option name="project" value="LOCAL" />
      <updated>1754598997356</updated>
    </task>
    <task id="LOCAL-00474" summary="Modularize `Compiler` by extracting `ArrayTypeCompiler`, `ExplicitTypeCompiler`, and `ImplicitTypeCompiler` classes. Introduce `TypeMapper` for Magma-to-C type mapping. Simplify `Compiler` logic for better extensibility and maintainability.">
      <option name="closed" value="true" />
      <created>1754599293751</created>
      <option name="number" value="00474" />
      <option name="presentableId" value="LOCAL-00474" />
      <option name="project" value="LOCAL" />
      <updated>1754599293751</updated>
    </task>
    <task id="LOCAL-00475" summary="Refactor `tryCompile` methods in `Compiler` modules to return `Optional` instead of empty strings for unmatched declarations. Update `Compiler` to handle `Optional` results. Streamline null checks and improve readability.">
      <option name="closed" value="true" />
      <created>1754599487421</created>
      <option name="number" value="00475" />
      <option name="presentableId" value="LOCAL-00475" />
      <option name="project" value="LOCAL" />
      <updated>1754599487421</updated>
    </task>
    <task id="LOCAL-00476" summary="Migrate build system to Maven. Replace `build.bat` and `test.bat` with Maven scripts. Add `pom.xml` with CheckStyle and JUnit setup. Update `.gitignore` with Maven-related files.">
      <option name="closed" value="true" />
      <created>1754599771370</created>
      <option name="number" value="00476" />
      <option name="presentableId" value="LOCAL-00476" />
      <option name="project" value="LOCAL" />
      <updated>1754599771370</updated>
    </task>
    <task id="LOCAL-00477" summary="Add CheckStyle configuration and rules. Replace `.iml` and `.idea/modules.xml` with Maven-managed files. Update `pom.xml` with revised CheckStyle plugin settings.">
      <option name="closed" value="true" />
      <created>1754600425221</created>
      <option name="number" value="00477" />
      <option name="presentableId" value="LOCAL-00477" />
      <option name="project" value="LOCAL" />
      <updated>1754600425221</updated>
    </task>
    <task id="LOCAL-00478" summary="Enable CheckStyle enforcement by updating Maven configuration and fixing CheckStyle plugin settings. Apply tab-based indentation across source and test files.">
      <option name="closed" value="true" />
      <created>1754600742861</created>
      <option name="number" value="00478" />
      <option name="presentableId" value="LOCAL-00478" />
      <option name="project" value="LOCAL" />
      <updated>1754600742861</updated>
    </task>
    <task id="LOCAL-00479" summary="Remove redundant CheckStyle rules and clean up workspace settings. Streamline CheckStyle configuration for tabs and improve braces enforcement.">
      <option name="closed" value="true" />
      <created>1754600891801</created>
      <option name="number" value="00479" />
      <option name="presentableId" value="LOCAL-00479" />
      <option name="project" value="LOCAL" />
      <updated>1754600891801</updated>
    </task>
    <task id="LOCAL-00480" summary="Nuke">
      <option name="closed" value="true" />
      <created>1754601621189</created>
      <option name="number" value="00480" />
      <option name="presentableId" value="LOCAL-00480" />
      <option name="project" value="LOCAL" />
      <updated>1754601621189</updated>
    </task>
    <task id="LOCAL-00481" summary="Introduce `magma.Compiler` and `magma.CompileException`. Add basic compilation logic with tests. Update documentation and CheckStyle references.">
      <option name="closed" value="true" />
      <created>1754601754059</created>
      <option name="number" value="00481" />
      <option name="presentableId" value="LOCAL-00481" />
      <option name="project" value="LOCAL" />
      <updated>1754601754059</updated>
    </task>
    <task id="LOCAL-00482" summary="Remove">
      <option name="closed" value="true" />
      <created>1754601768242</created>
      <option name="number" value="00482" />
      <option name="presentableId" value="LOCAL-00482" />
      <option name="project" value="LOCAL" />
      <updated>1754601768243</updated>
    </task>
    <task id="LOCAL-00483" summary="Refactor and clean up: update Maven build/test scripts with validation phase, revise CheckStyle configuration, and adjust workspace settings for JUnit 5 integration.">
      <option name="closed" value="true" />
      <created>1754602219386</created>
      <option name="number" value="00483" />
      <option name="presentableId" value="LOCAL-00483" />
      <option name="project" value="LOCAL" />
      <updated>1754602219386</updated>
    </task>
    <task id="LOCAL-00484" summary="Refactor: update CheckStyle configuration to allow wildcard imports, adjust JUnit test in `CompilerTest`, and revise `.idea` workspace settings.">
      <option name="closed" value="true" />
      <created>1754602930098</created>
      <option name="number" value="00484" />
      <option name="presentableId" value="LOCAL-00484" />
      <option name="project" value="LOCAL" />
      <updated>1754602930098</updated>
    </task>
    <task id="LOCAL-00485" summary="Introduce LET variable pattern matching in `Compiler`. Add support for converting `let` statements to `int32_t` declarations with corresponding tests in `CompilerTest`.">
      <option name="closed" value="true" />
      <created>1754603170214</created>
      <option name="number" value="00485" />
      <option name="presentableId" value="LOCAL-00485" />
      <option name="project" value="LOCAL" />
      <updated>1754603170214</updated>
    </task>
    <task id="LOCAL-00486" summary="Add optional type annotation support in `Compiler` for `let` statements. Update `CompilerTest` with additional cases for validation.">
      <option name="closed" value="true" />
      <created>1754603588206</created>
      <option name="number" value="00486" />
      <option name="presentableId" value="LOCAL-00486" />
      <option name="project" value="LOCAL" />
      <updated>1754603588206</updated>
    </task>
    <task id="LOCAL-00487" summary="Add support for `U64` suffix in `let` statements in `Compiler`. Update `CompilerTest` with relevant test cases. Adjust workspace settings for JUnit configurations.">
      <option name="closed" value="true" />
      <created>1754603755010</created>
      <option name="number" value="00487" />
      <option name="presentableId" value="LOCAL-00487" />
      <option name="project" value="LOCAL" />
      <updated>1754603755010</updated>
    </task>
    <task id="LOCAL-00488" summary="Add support for signed and unsigned integer type annotations and suffixes in `Compiler`. Introduce corresponding test cases in `SignedIntegerTypeTest`, `UnsignedIntegerTypeTest`, and `CompilerTest`. Refactor pattern matching and type handling logic.">
      <option name="closed" value="true" />
      <created>1754604084524</created>
      <option name="number" value="00488" />
      <option name="presentableId" value="LOCAL-00488" />
      <option name="project" value="LOCAL" />
      <updated>1754604084524</updated>
    </task>
    <task id="LOCAL-00489" summary="Add type compatibility checks for signed and unsigned integer annotations and suffixes in `Compiler`. Update `CompilerTest` with new cases for validation.">
      <option name="closed" value="true" />
      <created>1754604744947</created>
      <option name="number" value="00489" />
      <option name="presentableId" value="LOCAL-00489" />
      <option name="project" value="LOCAL" />
      <updated>1754604744947</updated>
    </task>
    <task id="LOCAL-00490" summary="Add boolean type support in `Compiler` with `Bool` annotations and literals. Introduce `BooleanTypeTest` for validation. Refactor pattern matching and statement processing logic.">
      <option name="closed" value="true" />
      <created>1754605778722</created>
      <option name="number" value="00490" />
      <option name="presentableId" value="LOCAL-00490" />
      <option name="project" value="LOCAL" />
      <updated>1754605778722</updated>
    </task>
    <task id="LOCAL-00491" summary="Update `.idea/workspace.xml` and `checkstyle.xml`: add `BooleanTypeTest` references and new rule to disallow inner classes.">
      <option name="closed" value="true" />
      <created>1754606005496</created>
      <option name="number" value="00491" />
      <option name="presentableId" value="LOCAL-00491" />
      <option name="project" value="LOCAL" />
      <updated>1754606005496</updated>
    </task>
    <task id="LOCAL-00492" summary="Add character literal support in `Compiler` with ASCII conversion. Update `UnsignedIntegerTypeTest` with relevant test cases. Simplify type mapping logic for maintainability.">
      <option name="closed" value="true" />
      <created>1754606328243</created>
      <option name="number" value="00492" />
      <option name="presentableId" value="LOCAL-00492" />
      <option name="project" value="LOCAL" />
      <updated>1754606328243</updated>
    </task>
    <task id="LOCAL-00493" summary="Add array type support in `Compiler` with `[type; size]` syntax. Update `CompilerTest` and introduce `ArrayTypeTest` for validation. Refactor `let` processing logic for arrays.">
      <option name="closed" value="true" />
      <created>1754606614500</created>
      <option name="number" value="00493" />
      <option name="presentableId" value="LOCAL-00493" />
      <option name="project" value="LOCAL" />
      <updated>1754606614500</updated>
    </task>
    <task id="LOCAL-00494" summary="Remove `FieldCountCheck` rule from `checkstyle.xml`.">
      <option name="closed" value="true" />
      <created>1754606749494</created>
      <option name="number" value="00494" />
      <option name="presentableId" value="LOCAL-00494" />
      <option name="project" value="LOCAL" />
      <updated>1754606749494</updated>
    </task>
    <task id="LOCAL-00495" summary="Nuke">
      <option name="closed" value="true" />
      <created>1754610199343</created>
      <option name="number" value="00495" />
      <option name="presentableId" value="LOCAL-00495" />
      <option name="project" value="LOCAL" />
      <updated>1754610199343</updated>
    </task>
    <task id="LOCAL-00496" summary="Remove rules">
      <option name="closed" value="true" />
      <created>1754610215535</created>
      <option name="number" value="00496" />
      <option name="presentableId" value="LOCAL-00496" />
      <option name="project" value="LOCAL" />
      <updated>1754610215535</updated>
    </task>
    <task id="LOCAL-00497" summary="Restore">
      <option name="closed" value="true" />
      <created>1754610354297</created>
      <option name="number" value="00497" />
      <option name="presentableId" value="LOCAL-00497" />
      <option name="project" value="LOCAL" />
      <updated>1754610354297</updated>
    </task>
    <task id="LOCAL-00498" summary="Add support for `let` declarations in `Compiler`. Update `CompilerTest` with valid and invalid cases for validation.">
      <option name="closed" value="true" />
      <created>1754610484780</created>
      <option name="number" value="00498" />
      <option name="presentableId" value="LOCAL-00498" />
      <option name="project" value="LOCAL" />
      <updated>1754610484780</updated>
    </task>
    <task id="LOCAL-00499" summary="Add extensive type support for `let` declarations in `Compiler`. Update `CompilerTest` with additional cases for validation. Refactor tests for improved readability and reusability.">
      <option name="closed" value="true" />
      <created>1754610855094</created>
      <option name="number" value="00499" />
      <option name="presentableId" value="LOCAL-00499" />
      <option name="project" value="LOCAL" />
      <updated>1754610855094</updated>
    </task>
    <task id="LOCAL-00500" summary="Add support for handling type suffixes in `let` declarations in `Compiler`. Update `CompilerTest` with new test cases for validation. Refactor `assertValid` method signature.">
      <option name="closed" value="true" />
      <created>1754611058287</created>
      <option name="number" value="00500" />
      <option name="presentableId" value="LOCAL-00500" />
      <option name="project" value="LOCAL" />
      <updated>1754611058287</updated>
    </task>
    <task id="LOCAL-00501" summary="Validate type consistency between annotation and suffix in `let` declarations. Update `Compiler` to enforce checks and expand `CompilerTest` with mismatch cases.">
      <option name="closed" value="true" />
      <created>1754611190688</created>
      <option name="number" value="00501" />
      <option name="presentableId" value="LOCAL-00501" />
      <option name="project" value="LOCAL" />
      <updated>1754611190688</updated>
    </task>
    <task id="LOCAL-00502" summary="Add support for `Bool` type in `let` declarations in `Compiler`. Update `CompilerTest` with valid and invalid cases for `Bool` handling.">
      <option name="closed" value="true" />
      <created>1754611474677</created>
      <option name="number" value="00502" />
      <option name="presentableId" value="LOCAL-00502" />
      <option name="project" value="LOCAL" />
      <updated>1754611474677</updated>
    </task>
    <task id="LOCAL-00503" summary="Add support for `F32` and `F64` types in `let` declarations in `Compiler`. Update `CompilerTest` with new cases for validation, including annotations, suffixes, and mismatches.">
      <option name="closed" value="true" />
      <created>1754611939407</created>
      <option name="number" value="00503" />
      <option name="presentableId" value="LOCAL-00503" />
      <option name="project" value="LOCAL" />
      <updated>1754611939407</updated>
    </task>
    <task id="LOCAL-00504" summary="Add support for array declarations in `let` statements in `Compiler`. Update `CompilerTest` with validation cases, including size mismatches and different element types. Refactor type mapping logic for improved maintainability.">
      <option name="closed" value="true" />
      <created>1754612289325</created>
      <option name="number" value="00504" />
      <option name="presentableId" value="LOCAL-00504" />
      <option name="project" value="LOCAL" />
      <updated>1754612289325</updated>
    </task>
    <task id="LOCAL-00505" summary="Fix regex in `Compiler` to correctly handle square brackets for array declarations in `let` statements.">
      <option name="closed" value="true" />
      <created>1754612299855</created>
      <option name="number" value="00505" />
      <option name="presentableId" value="LOCAL-00505" />
      <option name="project" value="LOCAL" />
      <updated>1754612299855</updated>
    </task>
    <task id="LOCAL-00506" summary="Add support for string-to-array assignments in `let` declarations in `Compiler`. Update `CompilerTest` with cases for valid and invalid string array declarations, including size mismatches and different element types.">
      <option name="closed" value="true" />
      <created>1754612528258</created>
      <option name="number" value="00506" />
      <option name="presentableId" value="LOCAL-00506" />
      <option name="project" value="LOCAL" />
      <updated>1754612528258</updated>
    </task>
    <task id="LOCAL-00507" summary="Update array declaration syntax to include pointer `*`. Modify `CompilerTest` and regex patterns in `Compiler` for consistency with new syntax.">
      <option name="closed" value="true" />
      <created>1754612744270</created>
      <option name="number" value="00507" />
      <option name="presentableId" value="LOCAL-00507" />
      <option name="project" value="LOCAL" />
      <updated>1754612744270</updated>
    </task>
    <task id="LOCAL-00508" summary="Add support for pointer declarations in `let` statements in `Compiler`. Update `CompilerTest` and regex patterns for validation and consistency with new syntax.">
      <option name="closed" value="true" />
      <created>1754612914169</created>
      <option name="number" value="00508" />
      <option name="presentableId" value="LOCAL-00508" />
      <option name="project" value="LOCAL" />
      <updated>1754612914169</updated>
    </task>
    <task id="LOCAL-00509" summary="Add support for pointer dereferencing in `let` statements in `Compiler`. Update `CompilerTest` with validation cases for various types, including `Bool`. Extend regex patterns in `Compiler` for `*` handling.">
      <option name="closed" value="true" />
      <created>1754613174241</created>
      <option name="number" value="00509" />
      <option name="presentableId" value="LOCAL-00509" />
      <option name="project" value="LOCAL" />
      <updated>1754613174241</updated>
    </task>
    <task id="LOCAL-00510" summary="Add `RobustnessTest` class for compiler edge cases and error handling validation. Refactor `CompilerTest` by delegating assertions to new `TestUtils`.">
      <option name="closed" value="true" />
      <created>1754613433198</created>
      <option name="number" value="00510" />
      <option name="presentableId" value="LOCAL-00510" />
      <option name="project" value="LOCAL" />
      <updated>1754613433198</updated>
    </task>
    <task id="LOCAL-00511" summary="Add support for mutability in `let` declarations in `Compiler`. Update `CompilerTest` with validation cases for mutable and immutable variable declarations, reassignment, and references. Extend regex patterns to handle `mut` keyword. Modify logic to track variable mutability.">
      <option name="closed" value="true" />
      <created>1754615444704</created>
      <option name="number" value="00511" />
      <option name="presentableId" value="LOCAL-00511" />
      <option name="project" value="LOCAL" />
      <updated>1754615444704</updated>
    </task>
    <task id="LOCAL-00512" summary="Add support for multiple variable declarations in `Compiler`. Update `CompilerTest` with validation cases covering multiple statements, mixing types, arrays, mutability, and pointers. Extend `compile` logic to handle multi-statement inputs.">
      <option name="closed" value="true" />
      <created>1754616511039</created>
      <option name="number" value="00512" />
      <option name="presentableId" value="LOCAL-00512" />
      <option name="project" value="LOCAL" />
      <updated>1754616511039</updated>
    </task>
    <task id="LOCAL-00513" summary="Add support for conditional operators in `Compiler`, including equality, inequality, comparison, logical operations, and ternary operator. Update `CompilerTest` with comprehensive validation cases. Extend regex patterns and generation logic for new operators.">
      <option name="closed" value="true" />
      <created>1754616859387</created>
      <option name="number" value="00513" />
      <option name="presentableId" value="LOCAL-00513" />
      <option name="project" value="LOCAL" />
      <updated>1754616859387</updated>
    </task>
    <task id="LOCAL-00514" summary="Add support for `if` statements in `Compiler`, including nested statements. Update `CompilerTest` with validation cases for valid and invalid conditions. Extend regex patterns and C++ code generation logic for `if` syntax.">
      <option name="closed" value="true" />
      <created>1754617388783</created>
      <option name="number" value="00514" />
      <option name="presentableId" value="LOCAL-00514" />
      <option name="project" value="LOCAL" />
      <updated>1754617388783</updated>
    </task>
    <task id="LOCAL-00515" summary="Remove unused `typeAnnotation` group from various regex matchers in `Compiler`. Simplify and clean up parsing logic.">
      <option name="closed" value="true" />
      <created>1754617422330</created>
      <option name="number" value="00515" />
      <option name="presentableId" value="LOCAL-00515" />
      <option name="project" value="LOCAL" />
      <updated>1754617422330</updated>
    </task>
    <task id="LOCAL-00516" summary="Add support for `if-else` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid scenarios. Extend regex patterns and C++ code generation logic to handle `if-else` syntax.">
      <option name="closed" value="true" />
      <created>1754617783680</created>
      <option name="number" value="00516" />
      <option name="presentableId" value="LOCAL-00516" />
      <option name="project" value="LOCAL" />
      <updated>1754617783680</updated>
    </task>
    <option name="localTasksCounter" value="517" />
    <servers />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName="*.ts" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT_PROFILE" value="Project Default" />
    <MESSAGE value="Remove rules" />
    <MESSAGE value="Restore" />
    <MESSAGE value="Add support for `let` declarations in `Compiler`. Update `CompilerTest` with valid and invalid cases for validation." />
    <MESSAGE value="Add support for `let` declarations with optional `I32` type in `Compiler`. Refactor `CompilerTest` to improve validity and error case testing." />
    <MESSAGE value="Add extensive type support for `let` declarations in `Compiler`. Update `CompilerTest` with additional cases for validation. Refactor tests for improved readability and reusability." />
    <MESSAGE value="Add support for type suffixes in `let` declarations. Update `Compiler` to handle suffix-based type inference and default logic. Expand `CompilerTest` with additional cases for suffix validation." />
    <MESSAGE value="Add support for handling type suffixes in `let` declarations in `Compiler`. Update `CompilerTest` with new test cases for validation. Refactor `assertValid` method signature." />
    <MESSAGE value="Validate type consistency between annotation and suffix in `let` declarations. Update `Compiler` to enforce checks and expand `CompilerTest` with mismatch cases." />
    <MESSAGE value="Add support for `Bool` type in `let` declarations in `Compiler`. Update `CompilerTest` with valid and invalid cases for `Bool` handling." />
    <MESSAGE value="Add support for `F32` and `F64` types in `let` declarations in `Compiler`. Update `CompilerTest` with new cases for validation, including annotations, suffixes, and mismatches." />
    <MESSAGE value="Add array support in `let` declarations in `Compiler`. Extend `CompilerTest` with validation for valid, invalid, and size-mismatched cases." />
    <MESSAGE value="Add support for array declarations in `let` statements in `Compiler`. Update `CompilerTest` with validation cases, including size mismatches and different element types. Refactor type mapping logic for improved maintainability." />
    <MESSAGE value="Fix regex in `Compiler` to correctly handle square brackets for array declarations in `let` statements." />
    <MESSAGE value="Add support for string-to-array assignments in `let` declarations in `Compiler`. Update `CompilerTest` with cases for valid and invalid string array declarations, including size mismatches and different element types." />
    <MESSAGE value="Update array declaration syntax to include pointer `*`. Modify `CompilerTest` and regex patterns in `Compiler` for consistency with new syntax." />
    <MESSAGE value="Add support for pointer declarations in `let` statements in `Compiler`. Update `CompilerTest` and regex patterns for validation and consistency with new syntax." />
    <MESSAGE value="Add support for pointer dereferencing in `let` statements in `Compiler`. Update `CompilerTest` with validation cases for various types, including `Bool`. Extend regex patterns in `Compiler` for `*` handling." />
    <MESSAGE value="Add `RobustnessTest` class for compiler edge cases and error handling validation. Refactor `CompilerTest` by delegating assertions to new `TestUtils`." />
    <MESSAGE value="Add support for 2D array declarations in `let` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid 2D array declarations. Extend regex patterns in `Compiler` to handle 2D arrays." />
    <MESSAGE value="Add support for mutability in `let` declarations in `Compiler`. Update `CompilerTest` with validation cases for mutable and immutable variable declarations, reassignment, and references. Extend regex patterns to handle `mut` keyword. Modify logic to track variable mutability." />
    <MESSAGE value="Add support for multiple variable declarations in `Compiler`. Update `CompilerTest` with validation cases covering multiple statements, mixing types, arrays, mutability, and pointers. Extend `compile` logic to handle multi-statement inputs." />
    <MESSAGE value="Add support for conditional operators in `Compiler`, including equality, inequality, comparison, logical operations, and ternary operator. Update `CompilerTest` with comprehensive validation cases. Extend regex patterns and generation logic for new operators." />
    <MESSAGE value="Add support for `if` statements in `Compiler`, including nested statements. Update `CompilerTest` with validation cases for valid and invalid conditions. Extend regex patterns and C++ code generation logic for `if` syntax." />
    <MESSAGE value="Remove unused `typeAnnotation` group from various regex matchers in `Compiler`. Simplify and clean up parsing logic." />
    <MESSAGE value="Add support for `if-else` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid scenarios. Extend regex patterns and C++ code generation logic to handle `if-else` syntax." />
    <option name="LAST_COMMIT_MESSAGE" value="Add support for `if-else` statements in `Compiler`. Update `CompilerTest` with validation cases for valid and invalid scenarios. Extend regex patterns and C++ code generation logic to handle `if-else` syntax." />
  </component>
  <component name="XDebuggerManager">
    <pin-to-top-manager>
      <pinned-members>
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="key" />
        <PinnedItemInfo parentTag="magma.compile.MapNode" memberName="maybeType" />
        <PinnedItemInfo parentTag="java.util.HashMap$Node" memberName="value" />
        <PinnedItemInfo parentTag="jvm.collect.map.JavaMap" memberName="map" />
        <PinnedItemInfo parentTag="magma.option.Tuple" memberName="right" />
        <PinnedItemInfo parentTag="magma.Main$Maps$JavaMap" memberName="internalMap" />
        <PinnedItemInfo parentTag="magma.Main$StructType" memberName="properties" />
      </pinned-members>
    </pin-to-top-manager>
  </component>
</project>
Found 59 Java files to compile
Compiling: .\src\main\java\magma\compile\Actual.java
Successfully compiled: .\src\main\java\magma\compile\Actual.java
Compiling: .\src\main\java\magma\compile\collect\Accumulator.java
Successfully compiled: .\src\main\java\magma\compile\collect\Accumulator.java
Compiling: .\src\main\java\magma\compile\context\Context.java
Successfully compiled: .\src\main\java\magma\compile\context\Context.java
Compiling: .\src\main\java\magma\compile\context\NodeContext.java
Successfully compiled: .\src\main\java\magma\compile\context\NodeContext.java
Compiling: .\src\main\java\magma\compile\context\StringContext.java
Successfully compiled: .\src\main\java\magma\compile\context\StringContext.java
Compiling: .\src\main\java\magma\compile\error\ApplicationError.java
Successfully compiled: .\src\main\java\magma\compile\error\ApplicationError.java
Compiling: .\src\main\java\magma\compile\error\CompileError.java
Successfully compiled: .\src\main\java\magma\compile\error\CompileError.java
Compiling: .\src\main\java\magma\compile\error\Error.java
Successfully compiled: .\src\main\java\magma\compile\error\Error.java
Compiling: .\src\main\java\magma\compile\error\ThrowableError.java
Successfully compiled: .\src\main\java\magma\compile\error\ThrowableError.java
Compiling: .\src\main\java\magma\compile\JavaSerializer.java
Failed to compile .\src\main\java\magma\compile\JavaSerializer.java: 0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"location": "magma.compile"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.NodeContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.StringContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.error.CompileError"
			},
			{
				"@type": "import",
				"location": "magma.option.None"
			},
			{
				"@type": "import",
				"location": "magma.option.Option"
			},
			{
				"@type": "import",
				"location": "magma.option.Some"
			},
			{
				"@type": "import",
				"location": "magma.result.Err"
			},
			{
				"@type": "import",
				"location": "magma.result.Ok"
			},
			{
				"@type": "import",
				"location": "magma.result.Result"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Constructor"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.ParameterizedType"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.RecordComponent"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Type"
			},
			{
				"@type": "import",
				"location": "java.util.ArrayList"
			},
			{
				"@type": "import",
				"location": "java.util.Arrays"
			},
			{
				"@type": "import",
				"location": "java.util.HashSet"
			},
			{
				"@type": "import",
				"location": "java.util.Iterator"
			},
			{
				"@type": "import",
				"location": "java.util.List"
			},
			{
				"@type": "import",
				"location": "java.util.Objects"
			},
			{
				"@type": "import",
				"location": "java.util.Set"
			},
			{
				"@type": "import",
				"location": "java.util.stream.IntStream"
			},
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [...]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize 1 of 24 list elements as 'JavaRootSegment': 
		{
			"@type": "package",
			"location": "magma.compile"
		}
		0) Element at index 22 with type 'class' cannot be deserialized as 'JavaRootSegment': 
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize 'JClass': 
				{
					"@type": "class",
					"modifiers": "@Actual\r\npublic",
					"name": "JavaSerializer",
					"children": [
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "whitespace"
						}
					]
				}
				0) Failed to deserialize 29 of 41 list elements as 'JStructureSegment': 
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "deserialize",
							"type": {...},
							"modifiers": [...]
						},
						"body": [
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "return",
								"value": {...}
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "clazz",
								"type": {...}
							},
							{
								"@type": "definition",
								"name": "node",
								"type": {...}
							}
						]
					}
					0) Element at index 11 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeSealed",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "result",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeSealed",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "result",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "not",
										"child": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
					1) Element at index 16 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "getSuggestionForUnknownTag",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "validTags",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "getSuggestionForUnknownTag",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "validTags",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "field-access",
										"name": "isEmpty()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "closestTag"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					2) Element at index 23 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 6 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "childNode"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					3) Element at index 24 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeStringField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeStringField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "direct",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "findString(fieldName)",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "direct"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "nested"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					4) Element at index 29 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "createNodeWithType",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "definition",
									"name": "Node()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "createNodeWithType",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "definition",
										"name": "Node()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "Node()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "Node"
										},
										{
											"@type": "modifier",
											"value": "node"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "invocation",
											"caller": {...},
											"arguments": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "invocation",
												"caller": {...},
												"arguments": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "typeId"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					5) Element at index 31 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "getGenericArgument",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "getGenericArgument",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "block",
										"children": [...]
									},
									"condition": {
										"@type": "instanceof",
										"child": {...},
										"value": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "type"
												},
												"value": {
													"@type": "definition",
													"name": "parameterized",
													"type": {...}
												}
											}
					6) Element at index 36 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "searchChildrenList",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Option.empty()",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "children",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "key",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "searchChildrenList",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Option.empty()",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "children",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "key",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "i",
										"type": {...}
									},
									"value": {
										"@type": "identifier",
										"value": "0"
									}
								}
								0) Element at index 1 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
					7) Element at index 37 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "shouldBeDeserializableAs",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "definition",
									"name": "false",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "false",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "targetClass",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "shouldBeDeserializableAs",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "definition",
										"name": "false",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "false",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "targetClass",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "false",
									"type": {
										"@type": "identifier",
										"value": "return"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "if"
										},
										{
											"@type": "modifier",
											"value": "(node.maybeType"
										},
										{
											"@type": "modifier",
											"value": "instanceof"
										},
										{
											"@type": "modifier",
											"value": "None<String>)"
										}
									]
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "field-access",
													"name": "maybeType",
													"child": {...}
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					8) Element at index 3 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeSealed",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeSealed",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "concreteClass",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getClass()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isAssignableFrom(concreteClass)",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isAssignableFrom(concreteClass)",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isAssignableFrom(concreteClass)",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
					9) Element at index 7 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeOptionListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "listType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "content",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeOptionListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "listType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "content",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "not",
										"child": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 3 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 6 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					10) Element at index 8 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 10 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 4 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 7 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					11) Element at index 26 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeOptionListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(Option.empty())",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "listType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeOptionListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(Option.empty())",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "listType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 10 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "elementTypeResult",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "maybeList"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					12) Element at index 27 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 8 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "maybeList"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 3 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 6 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					13) Element at index 38 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "validateAllFieldsConsumed",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>(allFields)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Option.empty()",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "targetClass",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "validateAllFieldsConsumed",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>(allFields)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Option.empty()",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "targetClass",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "Set<String>"
										},
										{
											"@type": "modifier",
											"value": "allFields"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 6 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "field-access",
											"name": "isEmpty()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "leftoverFields"
													}
												}
					14) Element at index 2 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeValue",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeValue",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "and",
										"left": {...},
										"right": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isRecord()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isRecord()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isRecord()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
								1) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "and",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "and",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'And': 
											{
												"@type": "and",
												"left": {
													"@type": "field-access",
													"name": "isSealed()",
													"child": {...}
												},
												"right": {
													"@type": "field-access",
													"name": "isRecord()",
													"child": {...}
												}
											}
											0) Failed to deserialize 'JFieldAccess': 
												{
													"@type": "field-access",
													"name": "isRecord()",
													"child": {
														"@type": "not",
														"child": {...}
													}
												}
												0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "not",
														"child": {
															"@type": "identifier",
															"value": "type"
														}
													}
					15) Element at index 9 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "Ok<>(nodes)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "list",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "Ok<>(nodes)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "list",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Node>"
										},
										{
											"@type": "modifier",
											"value": "nodes"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "else",
															"child": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "elementResult",
														"children": [
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "else",
																"child": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					16) Element at index 10 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeValue",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeValue",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "and",
										"left": {...},
										"right": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isRecord()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isRecord()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isRecord()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
								1) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "and",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "and",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'And': 
											{
												"@type": "and",
												"left": {
													"@type": "field-access",
													"name": "isSealed()",
													"child": {...}
												},
												"right": {
													"@type": "field-access",
													"name": "isRecord()",
													"child": {...}
												}
											}
											0) Failed to deserialize 'JFieldAccess': 
												{
													"@type": "field-access",
													"name": "isRecord()",
													"child": {
														"@type": "not",
														"child": {...}
													}
												}
												0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "not",
														"child": {
															"@type": "identifier",
															"value": "type"
														}
													}
					17) Element at index 20 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "collectAllValidTags",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "tags",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "collectAllValidTags",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "tags",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<String>"
										},
										{
											"@type": "modifier",
											"value": "tags"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 1 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "permitted",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					18) Element at index 4 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(result)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(result)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "result",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "try",
														"child": {...}
													},
													{
														"@type": "catch",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 3 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "component",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 1 with type 'try' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "try",
														"child": {
															"@type": "block",
															"children": [...]
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "try",
															"child": {
																"@type": "block",
																"children": [...]
															}
														}
												1) Element at index 2 with type 'catch' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "catch",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "definition",
															"name": "e",
															"type": {...}
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'catch'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("catch") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "catch",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "definition",
																"name": "e",
																"type": {...}
															}
														}
												2) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "component",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "component",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "recordComponents"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
					19) Element at index 14 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "findNestedSealedDeserialization",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "None<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "findNestedSealedDeserialization",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "None<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "subclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "k",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "subclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "j"
																}
															}
					20) Element at index 17 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "findClosestTag",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "closest",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "validTags",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "findClosestTag",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "closest",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "validTags",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "closest",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "empty()",
										"child": {...}
									}
								}
								0) Element at index 3 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "tag",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "get(i)",
														"child": {...}
													}
												}
												0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "assignment",
															"location": {...},
															"value": {...}
														},
														"condition": {
															"@type": "less-than-equals",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "assignment",
																"location": {...},
																"value": {...}
															},
															"condition": {
																"@type": "less-than-equals",
																"left": {...},
																"right": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "less-than-equals",
																"left": {
																	"@type": "less-than",
																	"left": {...},
																	"right": {...}
																},
																"right": {
																	"@type": "identifier",
																	"value": "2"
																}
															}
					21) Element at index 18 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "levenshteinDistance",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "dp[s1.length()][s2.length()]",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "levenshteinDistance",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "dp[s1.length()][s2.length()]",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 4 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									"value": {
										"@type": "new-array",
										"length": {...},
										"type": {...}
									}
								}
								0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "dp",
											"type": {...}
										},
										"value": {
											"@type": "new-array",
											"length": {...},
											"type": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "dp",
												"type": {...}
											},
											"value": {
												"@type": "new-array",
												"length": {...},
												"type": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'new-array'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("new-array") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "new-array",
												"length": {
													"@type": "field-access",
													"name": "length() + 1",
													"child": {...}
												},
												"type": {
													"@type": "identifier",
													"value": "int"
												}
											}
								1) Element at index 8 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length()",
													"child": {...}
												}
											}
								2) Element at index 3 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "i1"
												},
												"right": {
													"@type": "identifier",
													"value": "bound"
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
												{
													"@type": "assignment",
													"location": {
														"@type": "index",
														"child": {...},
														"value": {...}
													},
													"value": {
														"@type": "identifier",
														"value": "i1"
													}
												}
												0) Element at index 0 with type 'assignment' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "assignment",
														"location": {
															"@type": "index",
															"child": {...},
															"value": {...}
														},
														"value": {
															"@type": "identifier",
															"value": "i1"
														}
													}
													0) Failed to deserialize 'JAssignment': 
														{
															"@type": "assignment",
															"location": {
																"@type": "index",
																"child": {...},
																"value": {...}
															},
															"value": {
																"@type": "identifier",
																"value": "i1"
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "index",
																	"child": {...},
																	"index": {...}
																},
																"value": {
																	"@type": "identifier",
																	"value": "0"
																}
															}
								3) Element at index 6 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "identifier",
													"value": "bound1"
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
												{
													"@type": "assignment",
													"location": {
														"@type": "index",
														"child": {...},
														"value": {...}
													},
													"value": {
														"@type": "identifier",
														"value": "j"
													}
												}
												0) Element at index 0 with type 'assignment' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "assignment",
														"location": {
															"@type": "index",
															"child": {...},
															"value": {...}
														},
														"value": {
															"@type": "identifier",
															"value": "j"
														}
													}
													0) Failed to deserialize 'JAssignment': 
														{
															"@type": "assignment",
															"location": {
																"@type": "index",
																"child": {...},
																"value": {...}
															},
															"value": {
																"@type": "identifier",
																"value": "j"
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "index",
																	"child": {...},
																	"index": {...}
																},
																"value": {
																	"@type": "identifier",
																	"value": "j"
																}
															}
					22) Element at index 21 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "canMatchType",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "false",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "canMatchType",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "false",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "permittedSubclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "true",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "definition",
														"name": "true",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "permittedSubclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
					23) Element at index 25 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeOptionField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(Option.empty())",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeOptionField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(Option.empty())",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 4 of 13 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "elementTypeResult",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 10 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "childNode"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								3) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "equals",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "definition",
														"name": "Ok<>(Option.empty())",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 4 of 10 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "direct",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "findString(fieldName)",
														"child": {...}
													}
												}
												0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "direct"
																},
																"value": {
																	"type": {...}
																}
															}
												1) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "nested"
																},
																"value": {
																	"type": {...}
																}
															}
												2) Element at index 5 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "wrongTypeNode"
																},
																"value": {
																	"type": {...}
																}
															}
												3) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "wrongTypeList"
																},
																"value": {
																	"type": {...}
																}
															}
					24) Element at index 6 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeOptionField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeOptionField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "option"
												},
												"value": {
													"type": {...}
												}
											}
								2) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "option"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "Err<>(error)",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "Err<>(error)",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "return",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 10 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "elementTypeResult",
														"type": {...}
													},
													"value": {
														"@type": "invocation",
														"caller": {...},
														"arguments": [...]
													}
												}
												0) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "elementType",
															"type": {...}
														},
														"value": {
															"@type": "field-access",
															"name": "value()",
															"child": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "elementType",
																"type": {...}
															},
															"value": {
																"@type": "field-access",
																"name": "value()",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JFieldAccess': 
															{
																"@type": "field-access",
																"name": "value()",
																"child": {
																	"@type": "quantity",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "quantity",
																	"child": {
																		"@type": "cast",
																		"child": {...},
																		"type": {...}
																	}
																}
												1) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "elementClass",
															"type": {...}
														},
														"value": {
															"@type": "field-access",
															"name": "value()",
															"child": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "elementClass",
																"type": {...}
															},
															"value": {
																"@type": "field-access",
																"name": "value()",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JFieldAccess': 
															{
																"@type": "field-access",
																"name": "value()",
																"child": {
																	"@type": "quantity",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "quantity",
																	"child": {
																		"@type": "cast",
																		"child": {...},
																		"type": {...}
																	}
																}
					25) Element at index 12 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "tryDirectPermittedSubclasses",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "None<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "tryDirectPermittedSubclasses",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "None<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "permittedSubclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "permittedSubclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
												1) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "and",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "and",
																"left": {...},
																"right": {...}
															}
														}
														0) Failed to deserialize 'And': 
															{
																"@type": "and",
																"left": {
																	"@type": "instanceof",
																	"child": {...},
																	"value": {...}
																},
																"right": {
																	"@type": "field-access",
																	"name": "equals(nodeType)",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "instanceof",
																	"child": {
																		"@type": "identifier",
																		"value": "maybeIdentifier"
																	},
																	"value": {
																		"@type": "destruct",
																		"type": {...},
																		"params": [...]
																	}
																}
					26) Element at index 19 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "fillLevenshteinRow",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "dp",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "i",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "fillLevenshteinRow",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "i",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "j",
										"type": {...}
									},
									"value": {
										"@type": "identifier",
										"value": "1"
									}
								}
								0) Element at index 1 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "field-access",
													"name": "length()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
												{
													"@type": "if",
													"body": {
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													"condition": {
														"@type": "equals",
														"left": {...},
														"right": {...}
													}
												}
												0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "assignment",
															"location": {...},
															"value": {...}
														},
														"condition": {
															"@type": "equals",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "assignment",
																"location": {...},
																"value": {...}
															},
															"condition": {
																"@type": "equals",
																"left": {...},
																"right": {...}
															}
														}
														0) Failed to deserialize 'JAssignment': 
															{
																"@type": "assignment",
																"location": {
																	"@type": "index",
																	"child": {...},
																	"value": {...}
																},
																"value": {
																	"@type": "index",
																	"child": {...},
																	"value": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "index",
																	"child": {
																		"@type": "index",
																		"child": {...},
																		"index": {...}
																	},
																	"value": {
																		"@type": "identifier",
																		"value": "j"
																	}
																}
															1) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "index",
																	"child": {
																		"@type": "index",
																		"child": {...},
																		"index": {...}
																	},
																	"value": {
																		"@type": "subtract",
																		"left": {...},
																		"right": {...}
																	}
																}
					27) Element at index 22 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Object[components.length]",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "try",
									"child": {...}
								},
								{
									"@type": "catch",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Object[components.length]",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "try",
										"child": {...}
									},
									{
										"@type": "catch",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 6 of 14 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "expectedType",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 11 with type 'try' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "try",
										"child": {
											"@type": "block",
											"children": [...]
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "try",
											"child": {
												"@type": "block",
												"children": [...]
											}
										}
								1) Element at index 12 with type 'catch' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "catch",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "definition",
											"name": "e",
											"type": {...}
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'catch'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("catch") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "catch",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "definition",
												"name": "e",
												"type": {...}
											}
										}
								2) Element at index 9 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "invocation",
											"caller": {...},
											"arguments": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "invocation",
												"caller": {...},
												"arguments": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "validationError"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								3) Element at index 10 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isEmpty()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "errors"
													}
												}
								4) Element at index 7 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "i",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "i",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "i",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "switch",
														"value": {...},
														"cases": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "i",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "switch",
															"value": {...},
															"cases": [...]
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "i",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "switch",
																"value": {...},
																"cases": [...]
															},
															{
																"@type": "whitespace"
															}
														]
													}
								5) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "if",
											"body": {...},
											"condition": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "if",
												"body": {...},
												"condition": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "expectedType"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
										1) Failed to deserialize 'JIf': 
											{
												"@type": "if",
												"body": {
													"@type": "block",
													"children": [...]
												},
												"condition": {
													"@type": "instanceof",
													"child": {...},
													"value": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "instanceof",
													"child": {
														"@type": "field-access",
														"name": "maybeType",
														"child": {...}
													},
													"value": {
														"@type": "destruct",
														"type": {...},
														"params": [...]
													}
												}
											1) Failed to deserialize 'JBlock': 
												{
													"@type": "block",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) Failed to deserialize 1 of 2 list elements as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "field-access",
															"name": "is(expectedType0)",
															"child": {...}
														}
													}
													0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "field-access",
																"name": "is(expectedType0)",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JIf': 
															{
																"@type": "if",
																"body": {
																	"@type": "return",
																	"value": {...}
																},
																"condition": {
																	"@type": "field-access",
																	"name": "is(expectedType0)",
																	"child": {...}
																}
															}
															0) Failed to deserialize 'JFieldAccess': 
																{
																	"@type": "field-access",
																	"name": "is(expectedType0)",
																	"child": {
																		"@type": "not",
																		"child": {...}
																	}
																}
																0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
																	{
																		"@type": "not",
																		"child": {
																			"@type": "identifier",
																			"value": "node"
																		}
																	}
					28) Element at index 28 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(results)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeList",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(results)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeList",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Object>"
										},
										{
											"@type": "modifier",
											"value": "results"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 8 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "childNode",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "get(i)",
														"child": {...}
													}
												}
												0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "invocation",
															"caller": {...},
															"arguments": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "invocation",
																"caller": {...},
																"arguments": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "childResult"
																},
																"value": {
																	"@type": "destruct",
																	"type": {...},
																	"params": [...]
																}
															}
												1) Element at index 3 with type 'else' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "else",
														"child": {
															"@type": "if",
															"body": {...},
															"condition": {...}
														}
													}
													0) Failed to deserialize 'JElse': 
														{
															"@type": "else",
															"child": {
																"@type": "if",
																"body": {...},
																"condition": {...}
															}
														}
														0) Failed to deserialize 'JIf': 
															{
																"@type": "if",
																"body": {
																	"@type": "if",
																	"body": {...},
																	"condition": {...}
																},
																"condition": {
																	"@type": "instanceof",
																	"child": {...},
																	"value": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "instanceof",
																	"child": {
																		"@type": "identifier",
																		"value": "childResult"
																	},
																	"value": {
																		"@type": "destruct",
																		"type": {...},
																		"params": [...]
																	}
																}
															1) Failed to deserialize 'JIf': 
																{
																	"@type": "if",
																	"body": {
																		"@type": "block",
																		"children": [...]
																	},
																	"condition": {
																		"@type": "and",
																		"left": {...},
																		"right": {...}
																	}
																}
																0) Failed to deserialize 'And': 
																	{
																		"@type": "and",
																		"left": {
																			"@type": "field-access",
																			"name": "isSealed()",
																			"child": {...}
																		},
																		"right": {
																			"@type": "instanceof",
																			"child": {...},
																			"value": {...}
																		}
																	}
																	0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																		{
																			"@type": "instanceof",
																			"child": {
																				"@type": "field-access",
																				"name": "maybeType",
																				"child": {...}
																			},
																			"value": {
																				"@type": "destruct",
																				"type": {...},
																				"params": [...]
																			}
																		}
0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"location": "magma.compile"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.NodeContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.StringContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.error.CompileError"
			},
			{
				"@type": "import",
				"location": "magma.option.None"
			},
			{
				"@type": "import",
				"location": "magma.option.Option"
			},
			{
				"@type": "import",
				"location": "magma.option.Some"
			},
			{
				"@type": "import",
				"location": "magma.result.Err"
			},
			{
				"@type": "import",
				"location": "magma.result.Ok"
			},
			{
				"@type": "import",
				"location": "magma.result.Result"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Constructor"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.ParameterizedType"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.RecordComponent"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Type"
			},
			{
				"@type": "import",
				"location": "java.util.ArrayList"
			},
			{
				"@type": "import",
				"location": "java.util.Arrays"
			},
			{
				"@type": "import",
				"location": "java.util.HashSet"
			},
			{
				"@type": "import",
				"location": "java.util.Iterator"
			},
			{
				"@type": "import",
				"location": "java.util.List"
			},
			{
				"@type": "import",
				"location": "java.util.Objects"
			},
			{
				"@type": "import",
				"location": "java.util.Set"
			},
			{
				"@type": "import",
				"location": "java.util.stream.IntStream"
			},
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [...]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize 1 of 24 list elements as 'JavaRootSegment': 
		{
			"@type": "package",
			"location": "magma.compile"
		}
		0) Element at index 22 with type 'class' cannot be deserialized as 'JavaRootSegment': 
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize 'JClass': 
				{
					"@type": "class",
					"modifiers": "@Actual\r\npublic",
					"name": "JavaSerializer",
					"children": [
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "whitespace"
						}
					]
				}
				0) Failed to deserialize 29 of 41 list elements as 'JStructureSegment': 
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "deserialize",
							"type": {...},
							"modifiers": [...]
						},
						"body": [
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "return",
								"value": {...}
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "clazz",
								"type": {...}
							},
							{
								"@type": "definition",
								"name": "node",
								"type": {...}
							}
						]
					}
					0) Element at index 11 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeSealed",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "result",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeSealed",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "result",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "not",
										"child": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
					1) Element at index 16 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "getSuggestionForUnknownTag",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "validTags",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "getSuggestionForUnknownTag",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "validTags",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "field-access",
										"name": "isEmpty()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "closestTag"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					2) Element at index 23 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 6 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "childNode"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					3) Element at index 24 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeStringField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeStringField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "direct",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "findString(fieldName)",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "direct"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "nested"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					4) Element at index 29 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "createNodeWithType",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "definition",
									"name": "Node()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "createNodeWithType",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "definition",
										"name": "Node()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "Node()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "Node"
										},
										{
											"@type": "modifier",
											"value": "node"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "invocation",
											"caller": {...},
											"arguments": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "invocation",
												"caller": {...},
												"arguments": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "typeId"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					5) Element at index 31 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "getGenericArgument",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "getGenericArgument",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "block",
										"children": [...]
									},
									"condition": {
										"@type": "instanceof",
										"child": {...},
										"value": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "type"
												},
												"value": {
													"@type": "definition",
													"name": "parameterized",
													"type": {...}
												}
											}
					6) Element at index 36 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "searchChildrenList",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Option.empty()",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "children",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "key",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "searchChildrenList",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Option.empty()",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "children",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "key",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "i",
										"type": {...}
									},
									"value": {
										"@type": "identifier",
										"value": "0"
									}
								}
								0) Element at index 1 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
					7) Element at index 37 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "shouldBeDeserializableAs",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "definition",
									"name": "false",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "false",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "targetClass",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "shouldBeDeserializableAs",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "definition",
										"name": "false",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "false",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "targetClass",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "false",
									"type": {
										"@type": "identifier",
										"value": "return"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "if"
										},
										{
											"@type": "modifier",
											"value": "(node.maybeType"
										},
										{
											"@type": "modifier",
											"value": "instanceof"
										},
										{
											"@type": "modifier",
											"value": "None<String>)"
										}
									]
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "field-access",
													"name": "maybeType",
													"child": {...}
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
					8) Element at index 3 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeSealed",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeSealed",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "concreteClass",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getClass()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isAssignableFrom(concreteClass)",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isAssignableFrom(concreteClass)",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isAssignableFrom(concreteClass)",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
					9) Element at index 7 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeOptionListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "listType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "content",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeOptionListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "listType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "content",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "not",
										"child": {...}
									}
								}
								0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 3 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 6 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					10) Element at index 8 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 10 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 4 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 7 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					11) Element at index 26 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeOptionListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(Option.empty())",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "fieldName",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "listType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeOptionListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(Option.empty())",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "listType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 10 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "elementTypeResult",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "maybeList"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					12) Element at index 27 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeListField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeListField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 8 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "maybeList"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 3 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 6 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
					13) Element at index 38 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "validateAllFieldsConsumed",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>(allFields)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Option.empty()",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "targetClass",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "validateAllFieldsConsumed",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>(allFields)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Option.empty()",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "targetClass",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 9 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "Set<String>"
										},
										{
											"@type": "modifier",
											"value": "allFields"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 6 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "field-access",
											"name": "isEmpty()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "leftoverFields"
													}
												}
					14) Element at index 2 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeValue",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeValue",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "and",
										"left": {...},
										"right": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isRecord()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isRecord()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isRecord()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
								1) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "and",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "and",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'And': 
											{
												"@type": "and",
												"left": {
													"@type": "field-access",
													"name": "isSealed()",
													"child": {...}
												},
												"right": {
													"@type": "field-access",
													"name": "isRecord()",
													"child": {...}
												}
											}
											0) Failed to deserialize 'JFieldAccess': 
												{
													"@type": "field-access",
													"name": "isRecord()",
													"child": {
														"@type": "not",
														"child": {...}
													}
												}
												0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "not",
														"child": {
															"@type": "identifier",
															"value": "type"
														}
													}
					15) Element at index 9 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "Ok<>(nodes)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "list",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "Ok<>(nodes)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "list",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Node>"
										},
										{
											"@type": "modifier",
											"value": "nodes"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "else",
															"child": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "elementResult",
														"children": [
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "else",
																"child": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					16) Element at index 10 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeValue",
								"type": {...}
							},
							"body": [
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeValue",
									"type": {...}
								},
								"body": [
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "if",
									"body": {
										"@type": "return",
										"value": {...}
									},
									"condition": {
										"@type": "and",
										"left": {...},
										"right": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isRecord()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isRecord()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isRecord()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "type"
													}
												}
								1) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "and",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "and",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'And': 
											{
												"@type": "and",
												"left": {
													"@type": "field-access",
													"name": "isSealed()",
													"child": {...}
												},
												"right": {
													"@type": "field-access",
													"name": "isRecord()",
													"child": {...}
												}
											}
											0) Failed to deserialize 'JFieldAccess': 
												{
													"@type": "field-access",
													"name": "isRecord()",
													"child": {
														"@type": "not",
														"child": {...}
													}
												}
												0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "not",
														"child": {
															"@type": "identifier",
															"value": "type"
														}
													}
					17) Element at index 20 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "collectAllValidTags",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "tags",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "collectAllValidTags",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "tags",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<String>"
										},
										{
											"@type": "modifier",
											"value": "tags"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 1 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "permitted",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					18) Element at index 4 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(result)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(result)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "result",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "try",
														"child": {...}
													},
													{
														"@type": "catch",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 3 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "component",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 1 with type 'try' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "try",
														"child": {
															"@type": "block",
															"children": [...]
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "try",
															"child": {
																"@type": "block",
																"children": [...]
															}
														}
												1) Element at index 2 with type 'catch' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "catch",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "definition",
															"name": "e",
															"type": {...}
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'catch'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("catch") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "catch",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "definition",
																"name": "e",
																"type": {...}
															}
														}
												2) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "component",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "component",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "recordComponents"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
					19) Element at index 14 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "findNestedSealedDeserialization",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "None<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "findNestedSealedDeserialization",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "None<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "subclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "k",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "subclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "j"
																}
															}
					20) Element at index 17 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "findClosestTag",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "closest",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "validTags",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "findClosestTag",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "closest",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "validTags",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "closest",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "empty()",
										"child": {...}
									}
								}
								0) Element at index 3 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "tag",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "get(i)",
														"child": {...}
													}
												}
												0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "assignment",
															"location": {...},
															"value": {...}
														},
														"condition": {
															"@type": "less-than-equals",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "assignment",
																"location": {...},
																"value": {...}
															},
															"condition": {
																"@type": "less-than-equals",
																"left": {...},
																"right": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "less-than-equals",
																"left": {
																	"@type": "less-than",
																	"left": {...},
																	"right": {...}
																},
																"right": {
																	"@type": "identifier",
																	"value": "2"
																}
															}
					21) Element at index 18 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "levenshteinDistance",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "dp[s1.length()][s2.length()]",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "levenshteinDistance",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "dp[s1.length()][s2.length()]",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 4 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									"value": {
										"@type": "new-array",
										"length": {...},
										"type": {...}
									}
								}
								0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "dp",
											"type": {...}
										},
										"value": {
											"@type": "new-array",
											"length": {...},
											"type": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "dp",
												"type": {...}
											},
											"value": {
												"@type": "new-array",
												"length": {...},
												"type": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'new-array'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("new-array") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "new-array",
												"length": {
													"@type": "field-access",
													"name": "length() + 1",
													"child": {...}
												},
												"type": {
													"@type": "identifier",
													"value": "int"
												}
											}
								1) Element at index 8 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length()",
													"child": {...}
												}
											}
								2) Element at index 3 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "i1"
												},
												"right": {
													"@type": "identifier",
													"value": "bound"
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
												{
													"@type": "assignment",
													"location": {
														"@type": "index",
														"child": {...},
														"value": {...}
													},
													"value": {
														"@type": "identifier",
														"value": "i1"
													}
												}
												0) Element at index 0 with type 'assignment' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "assignment",
														"location": {
															"@type": "index",
															"child": {...},
															"value": {...}
														},
														"value": {
															"@type": "identifier",
															"value": "i1"
														}
													}
													0) Failed to deserialize 'JAssignment': 
														{
															"@type": "assignment",
															"location": {
																"@type": "index",
																"child": {...},
																"value": {...}
															},
															"value": {
																"@type": "identifier",
																"value": "i1"
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "index",
																	"child": {...},
																	"index": {...}
																},
																"value": {
																	"@type": "identifier",
																	"value": "0"
																}
															}
								3) Element at index 6 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "identifier",
													"value": "bound1"
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
												{
													"@type": "assignment",
													"location": {
														"@type": "index",
														"child": {...},
														"value": {...}
													},
													"value": {
														"@type": "identifier",
														"value": "j"
													}
												}
												0) Element at index 0 with type 'assignment' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "assignment",
														"location": {
															"@type": "index",
															"child": {...},
															"value": {...}
														},
														"value": {
															"@type": "identifier",
															"value": "j"
														}
													}
													0) Failed to deserialize 'JAssignment': 
														{
															"@type": "assignment",
															"location": {
																"@type": "index",
																"child": {...},
																"value": {...}
															},
															"value": {
																"@type": "identifier",
																"value": "j"
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "index",
																	"child": {...},
																	"index": {...}
																},
																"value": {
																	"@type": "identifier",
																	"value": "j"
																}
															}
					22) Element at index 21 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "canMatchType",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "false",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "canMatchType",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "false",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "permittedSubclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "true",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "definition",
														"name": "true",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "permittedSubclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
					23) Element at index 25 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeOptionField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Err<>(error)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(Option.empty())",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "consumedFields",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeOptionField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Err<>(error)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(Option.empty())",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "consumedFields",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 4 of 13 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "elementTypeResult",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 10 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "childNode"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								1) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementType",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementType",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								2) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "elementClass",
											"type": {...}
										},
										"value": {
											"@type": "field-access",
											"name": "value()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "elementClass",
												"type": {...}
											},
											"value": {
												"@type": "field-access",
												"name": "value()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "value()",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "quantity",
													"child": {
														"@type": "cast",
														"child": {...},
														"type": {...}
													}
												}
								3) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "equals",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "definition",
														"name": "Ok<>(Option.empty())",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 4 of 10 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "direct",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "findString(fieldName)",
														"child": {...}
													}
												}
												0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "direct"
																},
																"value": {
																	"type": {...}
																}
															}
												1) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "block",
															"children": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "block",
																"children": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "nested"
																},
																"value": {
																	"type": {...}
																}
															}
												2) Element at index 5 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "wrongTypeNode"
																},
																"value": {
																	"type": {...}
																}
															}
												3) Element at index 7 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "wrongTypeList"
																},
																"value": {
																	"type": {...}
																}
															}
					24) Element at index 6 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeOptionField",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "component",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeOptionField",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "component",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 3 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "fieldName",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getName()",
										"child": {...}
									}
								}
								0) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "not",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "not",
												"child": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "not",
												"child": {
													"@type": "quantity",
													"child": {...}
												}
											}
								1) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "option"
												},
												"value": {
													"type": {...}
												}
											}
								2) Element at index 3 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "option"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "Err<>(error)",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "definition",
														"name": "Err<>(error)",
														"type": {...},
														"modifiers": [...]
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "return",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 10 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "elementTypeResult",
														"type": {...}
													},
													"value": {
														"@type": "invocation",
														"caller": {...},
														"arguments": [...]
													}
												}
												0) Element at index 2 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "elementType",
															"type": {...}
														},
														"value": {
															"@type": "field-access",
															"name": "value()",
															"child": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "elementType",
																"type": {...}
															},
															"value": {
																"@type": "field-access",
																"name": "value()",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JFieldAccess': 
															{
																"@type": "field-access",
																"name": "value()",
																"child": {
																	"@type": "quantity",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "quantity",
																	"child": {
																		"@type": "cast",
																		"child": {...},
																		"type": {...}
																	}
																}
												1) Element at index 5 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "elementClass",
															"type": {...}
														},
														"value": {
															"@type": "field-access",
															"name": "value()",
															"child": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "elementClass",
																"type": {...}
															},
															"value": {
																"@type": "field-access",
																"name": "value()",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JFieldAccess': 
															{
																"@type": "field-access",
																"name": "value()",
																"child": {
																	"@type": "quantity",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'quantity'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("quantity") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "quantity",
																	"child": {
																		"@type": "cast",
																		"child": {...},
																		"type": {...}
																	}
																}
					25) Element at index 12 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "tryDirectPermittedSubclasses",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "None<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "tryDirectPermittedSubclasses",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "None<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "permittedSubclasses",
										"type": {...}
									},
									"value": {
										"@type": "field-access",
										"name": "getPermittedSubclasses()",
										"child": {...}
									}
								}
								0) Element at index 2 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "length",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "permitted",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "initialization",
														"definition": {
															"@type": "definition",
															"name": "permitted",
															"type": {...}
														},
														"value": {
															"@type": "index",
															"child": {...},
															"index": {...}
														}
													}
													0) Failed to deserialize 'JInitialization': 
														{
															"@type": "initialization",
															"definition": {
																"@type": "definition",
																"name": "permitted",
																"type": {...}
															},
															"value": {
																"@type": "index",
																"child": {...},
																"index": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "index",
																"child": {
																	"@type": "identifier",
																	"value": "permittedSubclasses"
																},
																"index": {
																	"@type": "identifier",
																	"value": "i"
																}
															}
												1) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "and",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "and",
																"left": {...},
																"right": {...}
															}
														}
														0) Failed to deserialize 'And': 
															{
																"@type": "and",
																"left": {
																	"@type": "instanceof",
																	"child": {...},
																	"value": {...}
																},
																"right": {
																	"@type": "field-access",
																	"name": "equals(nodeType)",
																	"child": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "instanceof",
																	"child": {
																		"@type": "identifier",
																		"value": "maybeIdentifier"
																	},
																	"value": {
																		"@type": "destruct",
																		"type": {...},
																		"params": [...]
																	}
																}
					26) Element at index 19 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "fillLevenshteinRow",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "dp",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "i",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "fillLevenshteinRow",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "i",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 3 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "j",
										"type": {...}
									},
									"value": {
										"@type": "identifier",
										"value": "1"
									}
								}
								0) Element at index 1 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than-equals",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than-equals",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than-equals'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than-equals") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than-equals",
												"left": {
													"@type": "identifier",
													"value": "j"
												},
												"right": {
													"@type": "field-access",
													"name": "length()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
												{
													"@type": "if",
													"body": {
														"@type": "assignment",
														"location": {...},
														"value": {...}
													},
													"condition": {
														"@type": "equals",
														"left": {...},
														"right": {...}
													}
												}
												0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "assignment",
															"location": {...},
															"value": {...}
														},
														"condition": {
															"@type": "equals",
															"left": {...},
															"right": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "assignment",
																"location": {...},
																"value": {...}
															},
															"condition": {
																"@type": "equals",
																"left": {...},
																"right": {...}
															}
														}
														0) Failed to deserialize 'JAssignment': 
															{
																"@type": "assignment",
																"location": {
																	"@type": "index",
																	"child": {...},
																	"value": {...}
																},
																"value": {
																	"@type": "index",
																	"child": {...},
																	"value": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "index",
																	"child": {
																		"@type": "index",
																		"child": {...},
																		"index": {...}
																	},
																	"value": {
																		"@type": "identifier",
																		"value": "j"
																	}
																}
															1) No permitted subtype of 'JExpression' matched node type 'index'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("index") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "index",
																	"child": {
																		"@type": "index",
																		"child": {...},
																		"index": {...}
																	},
																	"value": {
																		"@type": "subtract",
																		"left": {...},
																		"right": {...}
																	}
																}
					27) Element at index 22 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Object[components.length]",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "try",
									"child": {...}
								},
								{
									"@type": "catch",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Object[components.length]",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "try",
										"child": {...}
									},
									{
										"@type": "catch",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 6 of 14 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "expectedType",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 11 with type 'try' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "try",
										"child": {
											"@type": "block",
											"children": [...]
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "try",
											"child": {
												"@type": "block",
												"children": [...]
											}
										}
								1) Element at index 12 with type 'catch' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "catch",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "definition",
											"name": "e",
											"type": {...}
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'catch'. Valid tags are: [break, invalid, assignment, block, construction, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace, definition]. Did you mean 'definition'? Or add a record type with @Tag("catch") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "catch",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "definition",
												"name": "e",
												"type": {...}
											}
										}
								2) Element at index 9 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "invocation",
											"caller": {...},
											"arguments": [...]
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "invocation",
												"caller": {...},
												"arguments": [...]
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "validationError"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
								3) Element at index 10 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "return",
											"value": {...}
										},
										"condition": {
											"@type": "field-access",
											"name": "isEmpty()",
											"child": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "return",
												"value": {...}
											},
											"condition": {
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {...}
											}
										}
										0) Failed to deserialize 'JFieldAccess': 
											{
												"@type": "field-access",
												"name": "isEmpty()",
												"child": {
													"@type": "not",
													"child": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "not",
													"child": {
														"@type": "identifier",
														"value": "errors"
													}
												}
								4) Element at index 7 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "i",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "i",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "i",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "switch",
														"value": {...},
														"cases": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "i",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "switch",
															"value": {...},
															"cases": [...]
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "i",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "switch",
																"value": {...},
																"cases": [...]
															},
															{
																"@type": "whitespace"
															}
														]
													}
								5) Element at index 1 with type 'if' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "if",
										"body": {
											"@type": "if",
											"body": {...},
											"condition": {...}
										},
										"condition": {
											"@type": "instanceof",
											"child": {...},
											"value": {...}
										}
									}
									0) Failed to deserialize 'JIf': 
										{
											"@type": "if",
											"body": {
												"@type": "if",
												"body": {...},
												"condition": {...}
											},
											"condition": {
												"@type": "instanceof",
												"child": {...},
												"value": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "instanceof",
												"child": {
													"@type": "identifier",
													"value": "expectedType"
												},
												"value": {
													"@type": "destruct",
													"type": {...},
													"params": [...]
												}
											}
										1) Failed to deserialize 'JIf': 
											{
												"@type": "if",
												"body": {
													"@type": "block",
													"children": [...]
												},
												"condition": {
													"@type": "instanceof",
													"child": {...},
													"value": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "instanceof",
													"child": {
														"@type": "field-access",
														"name": "maybeType",
														"child": {...}
													},
													"value": {
														"@type": "destruct",
														"type": {...},
														"params": [...]
													}
												}
											1) Failed to deserialize 'JBlock': 
												{
													"@type": "block",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) Failed to deserialize 1 of 2 list elements as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "return",
															"value": {...}
														},
														"condition": {
															"@type": "field-access",
															"name": "is(expectedType0)",
															"child": {...}
														}
													}
													0) Element at index 0 with type 'if' cannot be deserialized as 'JMethodSegment': 
														{
															"@type": "if",
															"body": {
																"@type": "return",
																"value": {...}
															},
															"condition": {
																"@type": "field-access",
																"name": "is(expectedType0)",
																"child": {...}
															}
														}
														0) Failed to deserialize 'JIf': 
															{
																"@type": "if",
																"body": {
																	"@type": "return",
																	"value": {...}
																},
																"condition": {
																	"@type": "field-access",
																	"name": "is(expectedType0)",
																	"child": {...}
																}
															}
															0) Failed to deserialize 'JFieldAccess': 
																{
																	"@type": "field-access",
																	"name": "is(expectedType0)",
																	"child": {
																		"@type": "not",
																		"child": {...}
																	}
																}
																0) No permitted subtype of 'JExpression' matched node type 'not'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("not") to the permitted subtypes of 'JExpression'.: 
																	{
																		"@type": "not",
																		"child": {
																			"@type": "identifier",
																			"value": "node"
																		}
																	}
					28) Element at index 28 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(results)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "nodeList",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(results)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "nodeList",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Object>"
										},
										{
											"@type": "modifier",
											"value": "results"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) No permitted subtype of 'JExpression' matched node type 'less-than'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("less-than") to the permitted subtypes of 'JExpression'.: 
											{
												"@type": "less-than",
												"left": {
													"@type": "identifier",
													"value": "i"
												},
												"right": {
													"@type": "field-access",
													"name": "size()",
													"child": {...}
												}
											}
										1) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 2 of 8 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "childNode",
														"type": {...}
													},
													"value": {
														"@type": "field-access",
														"name": "get(i)",
														"child": {...}
													}
												}
												0) Element at index 2 with type 'if' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "if",
														"body": {
															"@type": "invocation",
															"caller": {...},
															"arguments": [...]
														},
														"condition": {
															"@type": "instanceof",
															"child": {...},
															"value": {...}
														}
													}
													0) Failed to deserialize 'JIf': 
														{
															"@type": "if",
															"body": {
																"@type": "invocation",
																"caller": {...},
																"arguments": [...]
															},
															"condition": {
																"@type": "instanceof",
																"child": {...},
																"value": {...}
															}
														}
														0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
															{
																"@type": "instanceof",
																"child": {
																	"@type": "identifier",
																	"value": "childResult"
																},
																"value": {
																	"@type": "destruct",
																	"type": {...},
																	"params": [...]
																}
															}
												1) Element at index 3 with type 'else' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "else",
														"child": {
															"@type": "if",
															"body": {...},
															"condition": {...}
														}
													}
													0) Failed to deserialize 'JElse': 
														{
															"@type": "else",
															"child": {
																"@type": "if",
																"body": {...},
																"condition": {...}
															}
														}
														0) Failed to deserialize 'JIf': 
															{
																"@type": "if",
																"body": {
																	"@type": "if",
																	"body": {...},
																	"condition": {...}
																},
																"condition": {
																	"@type": "instanceof",
																	"child": {...},
																	"value": {...}
																}
															}
															0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																{
																	"@type": "instanceof",
																	"child": {
																		"@type": "identifier",
																		"value": "childResult"
																	},
																	"value": {
																		"@type": "destruct",
																		"type": {...},
																		"params": [...]
																	}
																}
															1) Failed to deserialize 'JIf': 
																{
																	"@type": "if",
																	"body": {
																		"@type": "block",
																		"children": [...]
																	},
																	"condition": {
																		"@type": "and",
																		"left": {...},
																		"right": {...}
																	}
																}
																0) Failed to deserialize 'And': 
																	{
																		"@type": "and",
																		"left": {
																			"@type": "field-access",
																			"name": "isSealed()",
																			"child": {...}
																		},
																		"right": {
																			"@type": "instanceof",
																			"child": {...},
																			"value": {...}
																		}
																	}
																	0) No permitted subtype of 'JExpression' matched node type 'instanceof'. Valid tags are: [and, identifier, invalid, add, construction, equals, field-access, invocation, string, switch]. Did you mean 'switch'? Or add a record type with @Tag("instanceof") to the permitted subtypes of 'JExpression'.: 
																		{
																			"@type": "instanceof",
																			"child": {
																				"@type": "field-access",
																				"name": "maybeType",
																				"child": {...}
																			},
																			"value": {
																				"@type": "destruct",
																				"type": {...},
																				"params": [...]
																			}
																		}

Found 59 Java files to compile
Compiling: .\src\main\java\magma\compile\Actual.java
Successfully compiled: .\src\main\java\magma\compile\Actual.java
Compiling: .\src\main\java\magma\compile\collect\Accumulator.java
Successfully compiled: .\src\main\java\magma\compile\collect\Accumulator.java
Compiling: .\src\main\java\magma\compile\context\Context.java
Successfully compiled: .\src\main\java\magma\compile\context\Context.java
Compiling: .\src\main\java\magma\compile\context\NodeContext.java
Successfully compiled: .\src\main\java\magma\compile\context\NodeContext.java
Compiling: .\src\main\java\magma\compile\context\StringContext.java
Successfully compiled: .\src\main\java\magma\compile\context\StringContext.java
Compiling: .\src\main\java\magma\compile\error\ApplicationError.java
Successfully compiled: .\src\main\java\magma\compile\error\ApplicationError.java
Compiling: .\src\main\java\magma\compile\error\CompileError.java
Successfully compiled: .\src\main\java\magma\compile\error\CompileError.java
Compiling: .\src\main\java\magma\compile\error\Error.java
Successfully compiled: .\src\main\java\magma\compile\error\Error.java
Compiling: .\src\main\java\magma\compile\error\ThrowableError.java
Successfully compiled: .\src\main\java\magma\compile\error\ThrowableError.java
Compiling: .\src\main\java\magma\compile\JavaSerializer.java
Failed to compile .\src\main\java\magma\compile\JavaSerializer.java: 0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"location": "magma.compile"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.NodeContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.StringContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.error.CompileError"
			},
			{
				"@type": "import",
				"location": "magma.option.None"
			},
			{
				"@type": "import",
				"location": "magma.option.Option"
			},
			{
				"@type": "import",
				"location": "magma.option.Some"
			},
			{
				"@type": "import",
				"location": "magma.result.Err"
			},
			{
				"@type": "import",
				"location": "magma.result.Ok"
			},
			{
				"@type": "import",
				"location": "magma.result.Result"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Constructor"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.ParameterizedType"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.RecordComponent"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Type"
			},
			{
				"@type": "import",
				"location": "java.util.ArrayList"
			},
			{
				"@type": "import",
				"location": "java.util.Arrays"
			},
			{
				"@type": "import",
				"location": "java.util.HashSet"
			},
			{
				"@type": "import",
				"location": "java.util.Iterator"
			},
			{
				"@type": "import",
				"location": "java.util.List"
			},
			{
				"@type": "import",
				"location": "java.util.Objects"
			},
			{
				"@type": "import",
				"location": "java.util.Set"
			},
			{
				"@type": "import",
				"location": "java.util.stream.IntStream"
			},
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [...]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize 1 of 24 list elements as 'JavaRootSegment': 
		{
			"@type": "package",
			"location": "magma.compile"
		}
		0) Element at index 22 with type 'class' cannot be deserialized as 'JavaRootSegment': 
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize 'JClass': 
				{
					"@type": "class",
					"modifiers": "@Actual\r\npublic",
					"name": "JavaSerializer",
					"children": [
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "whitespace"
						}
					]
				}
				0) Failed to deserialize 5 of 41 list elements as 'JStructureSegment': 
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "deserialize",
							"type": {...},
							"modifiers": [...]
						},
						"body": [
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "return",
								"value": {...}
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "clazz",
								"type": {...}
							},
							{
								"@type": "definition",
								"name": "node",
								"type": {...}
							}
						]
					}
					0) Element at index 18 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "levenshteinDistance",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "dp[s1.length()][s2.length()]",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "levenshteinDistance",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "dp[s1.length()][s2.length()]",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									"value": {
										"@type": "index",
										"child": {...},
										"index": {...}
									}
								}
								0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "dp",
											"type": {...}
										},
										"value": {
											"@type": "index",
											"child": {...},
											"index": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "dp",
												"type": {...}
											},
											"value": {
												"@type": "index",
												"child": {...},
												"index": {...}
											}
										}
										0) Failed to deserialize 'Index': 
											{
												"@type": "index",
												"child": {
													"@type": "new-array",
													"length": {...},
													"type": {...}
												},
												"index": {
													"@type": "add",
													"left": {...},
													"right": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'new-array'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("new-array") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "new-array",
													"length": {
														"@type": "add",
														"left": {...},
														"right": {...}
													},
													"type": {
														"@type": "identifier",
														"value": "int"
													}
												}
					1) Element at index 9 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "Ok<>(nodes)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "list",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "Ok<>(nodes)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "list",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Node>"
										},
										{
											"@type": "modifier",
											"value": "nodes"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "else",
															"child": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "elementResult",
														"children": [
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "else",
																"child": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					2) Element at index 20 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "collectAllValidTags",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "tags",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "collectAllValidTags",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "tags",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<String>"
										},
										{
											"@type": "modifier",
											"value": "tags"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 1 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "permitted",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					3) Element at index 22 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Object[components.length]",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "try",
									"child": {...}
								},
								{
									"@type": "catch",
									"body": {...},
									"definition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Object[components.length]",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "try",
										"child": {...}
									},
									{
										"@type": "catch",
										"body": {...},
										"definition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 14 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "expectedType",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 11 with type 'try' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "try",
										"child": {
											"@type": "block",
											"children": [...]
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, catch, invalid, assignment, block, construction, definition, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace]. Did you mean 'whitespace'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "try",
											"child": {
												"@type": "block",
												"children": [...]
											}
										}
								1) Element at index 7 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "i",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "i",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "i",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "switch",
														"value": {...},
														"cases": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "i",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "switch",
															"value": {...},
															"cases": [...]
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "i",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "switch",
																"value": {...},
																"cases": [...]
															},
															{
																"@type": "whitespace"
															}
														]
													}
					4) Element at index 4 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(result)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(result)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "result",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "try",
														"child": {...}
													},
													{
														"@type": "catch",
														"body": {...},
														"definition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "component",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 1 with type 'try' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "try",
														"child": {
															"@type": "block",
															"children": [...]
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, catch, invalid, assignment, block, construction, definition, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace]. Did you mean 'whitespace'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "try",
															"child": {
																"@type": "block",
																"children": [...]
															}
														}
0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"location": "magma.compile"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.NodeContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.context.StringContext"
			},
			{
				"@type": "import",
				"location": "magma.compile.error.CompileError"
			},
			{
				"@type": "import",
				"location": "magma.option.None"
			},
			{
				"@type": "import",
				"location": "magma.option.Option"
			},
			{
				"@type": "import",
				"location": "magma.option.Some"
			},
			{
				"@type": "import",
				"location": "magma.result.Err"
			},
			{
				"@type": "import",
				"location": "magma.result.Ok"
			},
			{
				"@type": "import",
				"location": "magma.result.Result"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Constructor"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.ParameterizedType"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.RecordComponent"
			},
			{
				"@type": "import",
				"location": "java.lang.reflect.Type"
			},
			{
				"@type": "import",
				"location": "java.util.ArrayList"
			},
			{
				"@type": "import",
				"location": "java.util.Arrays"
			},
			{
				"@type": "import",
				"location": "java.util.HashSet"
			},
			{
				"@type": "import",
				"location": "java.util.Iterator"
			},
			{
				"@type": "import",
				"location": "java.util.List"
			},
			{
				"@type": "import",
				"location": "java.util.Objects"
			},
			{
				"@type": "import",
				"location": "java.util.Set"
			},
			{
				"@type": "import",
				"location": "java.util.stream.IntStream"
			},
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [...]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize 1 of 24 list elements as 'JavaRootSegment': 
		{
			"@type": "package",
			"location": "magma.compile"
		}
		0) Element at index 22 with type 'class' cannot be deserialized as 'JavaRootSegment': 
			{
				"@type": "class",
				"modifiers": "@Actual\r\npublic",
				"name": "JavaSerializer",
				"children": [
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "method",
						"definition": {...},
						"body": [...],
						"params": [...]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize 'JClass': 
				{
					"@type": "class",
					"modifiers": "@Actual\r\npublic",
					"name": "JavaSerializer",
					"children": [
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "method",
							"definition": {...},
							"body": [...],
							"params": [...]
						},
						{
							"@type": "whitespace"
						}
					]
				}
				0) Failed to deserialize 5 of 41 list elements as 'JStructureSegment': 
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "deserialize",
							"type": {...},
							"modifiers": [...]
						},
						"body": [
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "if",
								"body": {...},
								"condition": {...}
							},
							{
								"@type": "return",
								"value": {...}
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "clazz",
								"type": {...}
							},
							{
								"@type": "definition",
								"name": "node",
								"type": {...}
							}
						]
					}
					0) Element at index 18 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "levenshteinDistance",
								"type": {...},
								"modifiers": [...]
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "dp[s1.length()][s2.length()]",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "s1",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "s2",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "levenshteinDistance",
									"type": {...},
									"modifiers": [...]
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "dp[s1.length()][s2.length()]",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "s1",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "s2",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 11 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "dp",
										"type": {...}
									},
									"value": {
										"@type": "index",
										"child": {...},
										"index": {...}
									}
								}
								0) Element at index 0 with type 'initialization' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "initialization",
										"definition": {
											"@type": "definition",
											"name": "dp",
											"type": {...}
										},
										"value": {
											"@type": "index",
											"child": {...},
											"index": {...}
										}
									}
									0) Failed to deserialize 'JInitialization': 
										{
											"@type": "initialization",
											"definition": {
												"@type": "definition",
												"name": "dp",
												"type": {...}
											},
											"value": {
												"@type": "index",
												"child": {...},
												"index": {...}
											}
										}
										0) Failed to deserialize 'Index': 
											{
												"@type": "index",
												"child": {
													"@type": "new-array",
													"length": {...},
													"type": {...}
												},
												"index": {
													"@type": "add",
													"left": {...},
													"right": {...}
												}
											}
											0) No permitted subtype of 'JExpression' matched node type 'new-array'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("new-array") to the permitted subtypes of 'JExpression'.: 
												{
													"@type": "new-array",
													"length": {
														"@type": "add",
														"left": {...},
														"right": {...}
													},
													"type": {
														"@type": "identifier",
														"value": "int"
													}
												}
					1) Element at index 9 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeListElements",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "Ok<>(nodes)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "elementClass",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "list",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeListElements",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "Ok<>(nodes)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "elementClass",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "list",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 6 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<Node>"
										},
										{
											"@type": "modifier",
											"value": "nodes"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 2 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "elementResult",
												"children": [
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "else",
														"child": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "elementResult",
													"children": [
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "else",
															"child": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "elementResult",
														"children": [
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "else",
																"child": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					2) Element at index 20 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "collectAllValidTags",
								"type": {...}
							},
							"body": [
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "definition",
									"name": "tags",
									"type": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "sealedType",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "collectAllValidTags",
									"type": {...}
								},
								"body": [
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "definition",
										"name": "tags",
										"type": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "sealedType",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 4 list elements as 'JMethodSegment': 
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {
										"@type": "identifier",
										"value": "new"
									},
									"modifiers": [
										{
											"@type": "modifier",
											"value": "List<String>"
										},
										{
											"@type": "modifier",
											"value": "tags"
										},
										{
											"@type": "modifier",
											"value": "="
										}
									]
								}
								0) Element at index 1 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "permitted",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "if",
														"body": {...},
														"condition": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "permitted",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "if",
															"body": {...},
															"condition": {...}
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "permitted",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "if",
																"body": {...},
																"condition": {...}
															},
															{
																"@type": "whitespace"
															}
														]
													}
					3) Element at index 22 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "deserializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "else",
									"child": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "Object[components.length]",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "definition",
									"name": "HashSet<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "invocation",
									"caller": {...},
									"arguments": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "if",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "try",
									"child": {...}
								},
								{
									"@type": "catch",
									"body": {...},
									"definition": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "node",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "deserializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "else",
										"child": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "Object[components.length]",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "definition",
										"name": "HashSet<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "if",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "try",
										"child": {...}
									},
									{
										"@type": "catch",
										"body": {...},
										"definition": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "node",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 2 of 14 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "expectedType",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 11 with type 'try' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "try",
										"child": {
											"@type": "block",
											"children": [...]
										}
									}
									0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, catch, invalid, assignment, block, construction, definition, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace]. Did you mean 'whitespace'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
										{
											"@type": "try",
											"child": {
												"@type": "block",
												"children": [...]
											}
										}
								1) Element at index 7 with type 'invocation' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "invocation",
										"caller": {
											"@type": "field-access",
											"name": "forEach",
											"child": {...}
										},
										"arguments": [
											{
												"@type": "lambda",
												"param": "i",
												"children": [...]
											}
										]
									}
									0) Failed to deserialize 'JInvocation': 
										{
											"@type": "invocation",
											"caller": {
												"@type": "field-access",
												"name": "forEach",
												"child": {...}
											},
											"arguments": [
												{
													"@type": "lambda",
													"param": "i",
													"children": [...]
												}
											]
										}
										0) Failed to deserialize 1 of 1 list elements as 'JExpression': 
											{
												"@type": "lambda",
												"param": "i",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "switch",
														"value": {...},
														"cases": [...]
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Element at index 0 with type 'lambda' cannot be deserialized as 'JExpression': 
												{
													"@type": "lambda",
													"param": "i",
													"children": [
														{
															"@type": "initialization",
															"definition": {...},
															"value": {...}
														},
														{
															"@type": "switch",
															"value": {...},
															"cases": [...]
														},
														{
															"@type": "whitespace"
														}
													]
												}
												0) No permitted subtype of 'JExpression' matched node type 'lambda'. Valid tags are: [and, cast, identifier, index, instanceof, invalid, add, construction, equals, field-access, invocation, less-than, less-than-equals, string, subtract, not, quantity, switch]. Did you mean 'switch'? Or add a record type with @Tag("lambda") to the permitted subtypes of 'JExpression'.: 
													{
														"@type": "lambda",
														"param": "i",
														"children": [
															{
																"@type": "initialization",
																"definition": {...},
																"value": {...}
															},
															{
																"@type": "switch",
																"value": {...},
																"cases": [...]
															},
															{
																"@type": "whitespace"
															}
														]
													}
					4) Element at index 4 with type 'method' cannot be deserialized as 'JStructureSegment': 
						{
							"@type": "method",
							"definition": {
								"@type": "definition",
								"name": "serializeRecord",
								"type": {...}
							},
							"body": [
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "definition",
									"name": "ArrayList<>()",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "initialization",
									"definition": {...},
									"value": {...}
								},
								{
									"@type": "while",
									"body": {...},
									"condition": {...}
								},
								{
									"@type": "definition",
									"name": "Ok<>(result)",
									"type": {...},
									"modifiers": [...]
								},
								{
									"@type": "return",
									"value": {...}
								},
								{
									"@type": "whitespace"
								}
							],
							"params": [
								{
									"@type": "definition",
									"name": "type",
									"type": {...}
								},
								{
									"@type": "definition",
									"name": "value",
									"type": {...}
								}
							]
						}
						0) Failed to deserialize 'Method': 
							{
								"@type": "method",
								"definition": {
									"@type": "definition",
									"name": "serializeRecord",
									"type": {...}
								},
								"body": [
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "definition",
										"name": "ArrayList<>()",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "initialization",
										"definition": {...},
										"value": {...}
									},
									{
										"@type": "while",
										"body": {...},
										"condition": {...}
									},
									{
										"@type": "definition",
										"name": "Ok<>(result)",
										"type": {...},
										"modifiers": [...]
									},
									{
										"@type": "return",
										"value": {...}
									},
									{
										"@type": "whitespace"
									}
								],
								"params": [
									{
										"@type": "definition",
										"name": "type",
										"type": {...}
									},
									{
										"@type": "definition",
										"name": "value",
										"type": {...}
									}
								]
							}
							0) Failed to deserialize 1 of 8 list elements as 'JMethodSegment': 
								{
									"@type": "initialization",
									"definition": {
										"@type": "definition",
										"name": "result",
										"type": {...}
									},
									"value": {
										"@type": "invocation",
										"caller": {...},
										"arguments": [...]
									}
								}
								0) Element at index 4 with type 'while' cannot be deserialized as 'JMethodSegment': 
									{
										"@type": "while",
										"body": {
											"@type": "block",
											"children": [...]
										},
										"condition": {
											"@type": "less-than",
											"left": {...},
											"right": {...}
										}
									}
									0) Failed to deserialize 'JWhile': 
										{
											"@type": "while",
											"body": {
												"@type": "block",
												"children": [...]
											},
											"condition": {
												"@type": "less-than",
												"left": {...},
												"right": {...}
											}
										}
										0) Failed to deserialize 'JBlock': 
											{
												"@type": "block",
												"children": [
													{
														"@type": "initialization",
														"definition": {...},
														"value": {...}
													},
													{
														"@type": "try",
														"child": {...}
													},
													{
														"@type": "catch",
														"body": {...},
														"definition": {...}
													},
													{
														"@type": "postFix",
														"value": {...}
													},
													{
														"@type": "whitespace"
													}
												]
											}
											0) Failed to deserialize 1 of 5 list elements as 'JMethodSegment': 
												{
													"@type": "initialization",
													"definition": {
														"@type": "definition",
														"name": "component",
														"type": {...}
													},
													"value": {
														"@type": "index",
														"child": {...},
														"index": {...}
													}
												}
												0) Element at index 1 with type 'try' cannot be deserialized as 'JMethodSegment': 
													{
														"@type": "try",
														"child": {
															"@type": "block",
															"children": [...]
														}
													}
													0) No permitted subtype of 'JMethodSegment' matched node type 'try'. Valid tags are: [break, catch, invalid, assignment, block, construction, definition, else, if, initialization, invocation, postFix, return, while, line-comment, placeholder, whitespace]. Did you mean 'whitespace'? Or add a record type with @Tag("try") to the permitted subtypes of 'JMethodSegment'.: 
														{
															"@type": "try",
															"child": {
																"@type": "block",
																"children": [...]
															}
														}

WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::staticFieldBase has been called by com.google.inject.internal.aop.HiddenClassDefiner (file:/C:/ProgramData/chocolatey/lib/maven/apache-maven-3.9.11/lib/guice-5.1.0-classes.jar)
WARNING: Please consider reporting this to the maintainers of class com.google.inject.internal.aop.HiddenClassDefiner
WARNING: sun.misc.Unsafe::staticFieldBase will be removed in a future release
Found 54 Java files to compile
Compiling: .\src\main\java\magma\compile\context\Context.java
Successfully compiled: .\src\main\java\magma\compile\context\Context.java
Compiling: .\src\main\java\magma\compile\context\NodeContext.java
Successfully compiled: .\src\main\java\magma\compile\context\NodeContext.java
Compiling: .\src\main\java\magma\compile\context\StringContext.java
Successfully compiled: .\src\main\java\magma\compile\context\StringContext.java
Compiling: .\src\main\java\magma\compile\error\ApplicationError.java
Successfully compiled: .\src\main\java\magma\compile\error\ApplicationError.java
Compiling: .\src\main\java\magma\compile\error\CompileError.java
Successfully compiled: .\src\main\java\magma\compile\error\CompileError.java
Compiling: .\src\main\java\magma\compile\error\Error.java
Successfully compiled: .\src\main\java\magma\compile\error\Error.java
Compiling: .\src\main\java\magma\compile\error\ThrowableError.java
Successfully compiled: .\src\main\java\magma\compile\error\ThrowableError.java
Compiling: .\src\main\java\magma\compile\Lang.java
Failed to compile .\src\main\java\magma\compile\Lang.java: 0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"value": "magma.compile"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.FilterRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.FoldingDivider"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.LazyRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.NodeListRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.NodeRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.Rule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.SplitRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.Splitter"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.StringRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.TypeFolder"
			},
			{
				"@type": "import",
				"value": "magma.option.Option"
			},
			{
				"@type": "import",
				"value": "java.util.List"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.DividingSplitter.KeepLast"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.EmptyRule.Empty"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NodeListRule.*"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NodeRule.Node"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NonEmptyListRule.NonEmptyList"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.OrRule.Or"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.PlaceholderRule.Placeholder"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.PrefixRule.Prefix"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.SplitRule.*"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.StringRule.String"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.StripRule.Strip"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.SuffixRule.Suffix"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.TagRule.Tag"
			},
			{
				"@type": "class",
				"modifiers": "public",
				"name": "Lang",
				"children": [
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					},
					{
						"@type": "line-comment",
						"value": " Sealed interface for C parameter types"
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"statement\")\r\n\tpublic",
						"name": "Field",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"generic\")\r\n\tpublic",
						"name": "Generic",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "base",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "arguments",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"array\")\r\n\tpublic",
						"name": "Array",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "JavaDefinition",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							},
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Modifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"modifier\")\r\n\tpublic",
						"name": "Modifier",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"method\")\r\n\tpublic",
						"name": "Method",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JFunctionSegment"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"invalid\")\r\n\tpublic",
						"name": "Invalid",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, CRootSegment, JavaType, CType, JFunctionSegment,\r\n\t\t\tCFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"class\")\r\n\tpublic",
						"name": "JClass",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"interface\")\r\n\tpublic",
						"name": "Interface",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"record\")\r\n\tpublic",
						"name": "Record",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"struct\")\r\n\tpublic",
						"name": "Structure",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "fields",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CDefinition"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"whitespace\")\r\n\tpublic",
						"name": "Whitespace",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"placeholder\")\r\n\tpublic",
						"name": "Placeholder",
						"implementsClause": {
							"@type": "invalid",
							"value": " JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "JavaRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "CRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"import\")\r\n\tpublic",
						"name": "Import",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"package\")\r\n\tpublic",
						"name": "Package",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "CDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointerDefinition\")\r\n\tpublic",
						"name": "CFunctionPointerDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"function\")\r\n\tpublic",
						"name": "Function",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "CDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CParameter"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CFunctionSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"identifier\")\r\n\tpublic",
						"name": "Identifier",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"pointer\")\r\n\tpublic",
						"name": "Pointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointer\")\r\n\tpublic",
						"name": "FunctionPointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"line-comment\")\r\n\tpublic",
						"name": "LineComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"block-comment\")\r\n\tpublic",
						"name": "BlockComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", Strip(\"\", Or(CStructure(), Function(), Invalid()), \"after\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Function",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final NodeRule definition = new NodeRule(\"definition\", CDefinition());"
							},
							{
								"@type": "invalid",
								"value": "final Rule params = Values(\"params\", Or(CFunctionPointerDefinition(), CDefinition()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule body = Statements(\"body\", CFunctionSegment());"
							},
							{
								"@type": "invalid",
								"value": "final Rule functionDecl =\r\n\t\t\t\tFirst(Suffix(First(definition, \"(\", params), \")\"), \" {\", Suffix(body, System.lineSeparator() + \"}"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"function\", First(maybeTemplate, \"\", functionDecl));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionPointerDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Generates: returnType (*name)(paramTypes)"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"functionPointerDefinition\",\r\n\t\t\t\t\t\t\t Suffix(First(Suffix(First(Node(\"returnType\", CType()), \" (*\", String(\"name\")), \")(\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tValues(\"paramTypes\", CType())), \")\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Last(Node(\"type\", CType()), \" \", new StringRule(\"name\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "// Function pointer: returnType (*)(paramType1, paramType2, ...)"
							},
							{
								"@type": "invalid",
								"value": "final Rule funcPtr =\r\n\t\t\t\tTag(\"functionPointer\", Suffix(First(Node(\"returnType\", rule), \" (*)(\", Values(\"paramTypes\", rule)), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Or(funcPtr, Identifier(), Tag(\"pointer\", Suffix(Node(\"child\", rule), \"*\")), Generic(rule), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// For template structs, use plain name without type parameters in the"
							},
							{
								"@type": "invalid",
								"value": "// declaration"
							},
							{
								"@type": "invalid",
								"value": "final Rule plainName = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structPrefix = Prefix(\"struct \", plainName);"
							},
							{
								"@type": "invalid",
								"value": "final Rule fields = Statements(\"fields\", Suffix(CDefinition(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule structWithFields = Suffix(First(structPrefix, \"{\", fields), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structComplete = Suffix(structWithFields, \";"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"struct\", First(maybeTemplate, \"\", structComplete));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule segment =\r\n\t\t\t\tOr(Namespace(\"package\"), Namespace(\"import\"), Structures(StructureSegment()), BlockComment(), Whitespace());"
							},
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", segment);"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Structures",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(JStructure(\"class\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"interface\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"record\", structureMember));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "structureMember",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Whitespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"whitespace\", Strip(Empty));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Namespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(type, Strip(Prefix(type + \" \", Suffix(Invalid(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule modifiers = String(\"modifiers\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithTypeArguments = NameWithTypeParameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters =\r\n\t\t\t\tStrip(Or(Suffix(First(maybeWithTypeArguments, \"(\", Parameters()), \")\"), maybeWithTypeArguments));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters1 =\r\n\t\t\t\tOr(Last(maybeWithParameters, \"extends\", Node(\"extends\", JType())), maybeWithParameters);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent =\r\n\t\t\t\tOr(Last(maybeWithParameters1, \"implements\", Node(\"implementsClause\", JType())), maybeWithParameters1);"
							},
							{
								"@type": "invalid",
								"value": "final Rule children = Statements(\"children\", rule);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent1 =\r\n\t\t\t\tOr(Last(beforeContent, \"permits\", Delimited(\"variants\", StrippedIdentifier(\"variant\"), \",\")), beforeContent);"
							},
							{
								"@type": "invalid",
								"value": "final Rule aClass = First(First(Strip(Or(modifiers, Empty)), type + \" \", beforeContent1), \"{\", children);\r\n\t\treturn Tag(type, Strip(Suffix(aClass, \"}"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "NameWithTypeParameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule name = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withTypeParameters = Suffix(First(name, \"<\", Values(\"typeParameters\", Identifier())), \">\");"
							},
							{
								"@type": "invalid",
								"value": "return Strip(Or(withTypeParameters, name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StructureSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule structureMember = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "structureMember.set(Or(Structures(structureMember),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Statement(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t JMethod(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t LineComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t BlockComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Whitespace()));"
							},
							{
								"@type": "invalid",
								"value": "return structureMember;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "BlockComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"block-comment\", Strip(Prefix(\"/*\", Suffix(String(\"value\"), \"*/"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "LineComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"line-comment\", Strip(Prefix(\"//\", String(\"value\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Statement",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"statement\", Strip(Suffix(Node(\"value\", JDefinition()), \";"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethod",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "Rule params = Parameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule header = Strip(Suffix(Last(Node(\"definition\", JDefinition()), \"(\", params), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule withBody = Suffix(First(header, \"{\", Statements(\"body\", JMethodSegment())), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"method\", Strip(Or(Suffix(header, \";"
							},
							{
								"@type": "invalid",
								"value": "\"), withBody)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethodSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Strip(Or(Whitespace(), Invalid())));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "If",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"if\", Prefix(\"if\", Strip(Prefix(\"(\", First(Node(\"condition\", JExpression()), \")\", Node(\"body\", rule))))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "LazyRule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JExpression",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or();"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(Whitespace(), Prefix(System.lineSeparator() + \"\\t\", Invalid()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Parameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Values(\"params\", Or(ParameterDefinition(), Whitespace()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "ParameterDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Parameters don't have modifiers, just type and name"
							},
							{
								"@type": "invalid",
								"value": "final FoldingDivider typeDivider = new FoldingDivider(new TypeFolder());"
							},
							{
								"@type": "invalid",
								"value": "final Splitter typeSplitter = KeepLast(typeDivider);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", new SplitRule(Node(\"type\", JType()), String(\"name\"), typeSplitter));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Split into modifiers+type and name using type-aware splitting"
							},
							{
								"@type": "invalid",
								"value": "final Rule type = Node(\"type\", JType());"
							},
							{
								"@type": "invalid",
								"value": "final Rule name = String(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule typeAndName = Split(type, KeepLast(new FoldingDivider(new TypeFolder())), name);"
							},
							{
								"@type": "invalid",
								"value": "// Handle optional modifiers before type"
							},
							{
								"@type": "invalid",
								"value": "final Rule modifiers = Delimited(\"modifiers\", Tag(\"modifier\", String(\"value\")), \" \");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withModifiers = Split(modifiers, KeepLast(new FoldingDivider(new TypeFolder())), type);"
							},
							{
								"@type": "invalid",
								"value": "Rule beforeName = Or(withModifiers, type);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", Last(beforeName, \" \", name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule type = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "type.set(Or(Generic(type), Array(type), Identifier(), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return type;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Array",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"array\", Strip(Suffix(Node(\"child\", type), \"[]\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Identifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"identifier\", StrippedIdentifier(\"value\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StrippedIdentifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Strip(FilterRule.Identifier(String(key)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "key",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Generic",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"generic\",\r\n\t\t\t\t\t\t\t Strip(Suffix(First(Strip(String(\"base\")), \"<\", NodeListRule.Values(\"arguments\", type)), \">\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Invalid",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"invalid\", Placeholder(String(\"value\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "whitespace"
					}
				]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize list elements: 
		{
			"@type": "package",
			"value": "magma.compile"
		}
		0) Failed to deserialize 'JClass': 
			{
				"@type": "class",
				"modifiers": "public",
				"name": "Lang",
				"children": [
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					},
					{
						"@type": "line-comment",
						"value": " Sealed interface for C parameter types"
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"statement\")\r\n\tpublic",
						"name": "Field",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"generic\")\r\n\tpublic",
						"name": "Generic",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "base",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "arguments",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"array\")\r\n\tpublic",
						"name": "Array",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "JavaDefinition",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							},
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Modifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"modifier\")\r\n\tpublic",
						"name": "Modifier",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"method\")\r\n\tpublic",
						"name": "Method",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JFunctionSegment"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"invalid\")\r\n\tpublic",
						"name": "Invalid",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, CRootSegment, JavaType, CType, JFunctionSegment,\r\n\t\t\tCFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"class\")\r\n\tpublic",
						"name": "JClass",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"interface\")\r\n\tpublic",
						"name": "Interface",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"record\")\r\n\tpublic",
						"name": "Record",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"struct\")\r\n\tpublic",
						"name": "Structure",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "fields",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CDefinition"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"whitespace\")\r\n\tpublic",
						"name": "Whitespace",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"placeholder\")\r\n\tpublic",
						"name": "Placeholder",
						"implementsClause": {
							"@type": "invalid",
							"value": " JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "JavaRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "CRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"import\")\r\n\tpublic",
						"name": "Import",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"package\")\r\n\tpublic",
						"name": "Package",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "CDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointerDefinition\")\r\n\tpublic",
						"name": "CFunctionPointerDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"function\")\r\n\tpublic",
						"name": "Function",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "CDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CParameter"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CFunctionSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"identifier\")\r\n\tpublic",
						"name": "Identifier",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"pointer\")\r\n\tpublic",
						"name": "Pointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointer\")\r\n\tpublic",
						"name": "FunctionPointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"line-comment\")\r\n\tpublic",
						"name": "LineComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"block-comment\")\r\n\tpublic",
						"name": "BlockComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", Strip(\"\", Or(CStructure(), Function(), Invalid()), \"after\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Function",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final NodeRule definition = new NodeRule(\"definition\", CDefinition());"
							},
							{
								"@type": "invalid",
								"value": "final Rule params = Values(\"params\", Or(CFunctionPointerDefinition(), CDefinition()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule body = Statements(\"body\", CFunctionSegment());"
							},
							{
								"@type": "invalid",
								"value": "final Rule functionDecl =\r\n\t\t\t\tFirst(Suffix(First(definition, \"(\", params), \")\"), \" {\", Suffix(body, System.lineSeparator() + \"}"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"function\", First(maybeTemplate, \"\", functionDecl));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionPointerDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Generates: returnType (*name)(paramTypes)"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"functionPointerDefinition\",\r\n\t\t\t\t\t\t\t Suffix(First(Suffix(First(Node(\"returnType\", CType()), \" (*\", String(\"name\")), \")(\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tValues(\"paramTypes\", CType())), \")\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Last(Node(\"type\", CType()), \" \", new StringRule(\"name\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "// Function pointer: returnType (*)(paramType1, paramType2, ...)"
							},
							{
								"@type": "invalid",
								"value": "final Rule funcPtr =\r\n\t\t\t\tTag(\"functionPointer\", Suffix(First(Node(\"returnType\", rule), \" (*)(\", Values(\"paramTypes\", rule)), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Or(funcPtr, Identifier(), Tag(\"pointer\", Suffix(Node(\"child\", rule), \"*\")), Generic(rule), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// For template structs, use plain name without type parameters in the"
							},
							{
								"@type": "invalid",
								"value": "// declaration"
							},
							{
								"@type": "invalid",
								"value": "final Rule plainName = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structPrefix = Prefix(\"struct \", plainName);"
							},
							{
								"@type": "invalid",
								"value": "final Rule fields = Statements(\"fields\", Suffix(CDefinition(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule structWithFields = Suffix(First(structPrefix, \"{\", fields), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structComplete = Suffix(structWithFields, \";"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"struct\", First(maybeTemplate, \"\", structComplete));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule segment =\r\n\t\t\t\tOr(Namespace(\"package\"), Namespace(\"import\"), Structures(StructureSegment()), BlockComment(), Whitespace());"
							},
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", segment);"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Structures",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(JStructure(\"class\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"interface\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"record\", structureMember));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "structureMember",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Whitespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"whitespace\", Strip(Empty));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Namespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(type, Strip(Prefix(type + \" \", Suffix(Invalid(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule modifiers = String(\"modifiers\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithTypeArguments = NameWithTypeParameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters =\r\n\t\t\t\tStrip(Or(Suffix(First(maybeWithTypeArguments, \"(\", Parameters()), \")\"), maybeWithTypeArguments));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters1 =\r\n\t\t\t\tOr(Last(maybeWithParameters, \"extends\", Node(\"extends\", JType())), maybeWithParameters);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent =\r\n\t\t\t\tOr(Last(maybeWithParameters1, \"implements\", Node(\"implementsClause\", JType())), maybeWithParameters1);"
							},
							{
								"@type": "invalid",
								"value": "final Rule children = Statements(\"children\", rule);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent1 =\r\n\t\t\t\tOr(Last(beforeContent, \"permits\", Delimited(\"variants\", StrippedIdentifier(\"variant\"), \",\")), beforeContent);"
							},
							{
								"@type": "invalid",
								"value": "final Rule aClass = First(First(Strip(Or(modifiers, Empty)), type + \" \", beforeContent1), \"{\", children);\r\n\t\treturn Tag(type, Strip(Suffix(aClass, \"}"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "NameWithTypeParameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule name = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withTypeParameters = Suffix(First(name, \"<\", Values(\"typeParameters\", Identifier())), \">\");"
							},
							{
								"@type": "invalid",
								"value": "return Strip(Or(withTypeParameters, name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StructureSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule structureMember = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "structureMember.set(Or(Structures(structureMember),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Statement(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t JMethod(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t LineComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t BlockComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Whitespace()));"
							},
							{
								"@type": "invalid",
								"value": "return structureMember;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "BlockComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"block-comment\", Strip(Prefix(\"/*\", Suffix(String(\"value\"), \"*/"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "LineComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"line-comment\", Strip(Prefix(\"//\", String(\"value\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Statement",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"statement\", Strip(Suffix(Node(\"value\", JDefinition()), \";"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethod",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "Rule params = Parameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule header = Strip(Suffix(Last(Node(\"definition\", JDefinition()), \"(\", params), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule withBody = Suffix(First(header, \"{\", Statements(\"body\", JMethodSegment())), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"method\", Strip(Or(Suffix(header, \";"
							},
							{
								"@type": "invalid",
								"value": "\"), withBody)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethodSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Strip(Or(Whitespace(), Invalid())));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "If",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"if\", Prefix(\"if\", Strip(Prefix(\"(\", First(Node(\"condition\", JExpression()), \")\", Node(\"body\", rule))))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "LazyRule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JExpression",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or();"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(Whitespace(), Prefix(System.lineSeparator() + \"\\t\", Invalid()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Parameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Values(\"params\", Or(ParameterDefinition(), Whitespace()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "ParameterDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Parameters don't have modifiers, just type and name"
							},
							{
								"@type": "invalid",
								"value": "final FoldingDivider typeDivider = new FoldingDivider(new TypeFolder());"
							},
							{
								"@type": "invalid",
								"value": "final Splitter typeSplitter = KeepLast(typeDivider);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", new SplitRule(Node(\"type\", JType()), String(\"name\"), typeSplitter));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Split into modifiers+type and name using type-aware splitting"
							},
							{
								"@type": "invalid",
								"value": "final Rule type = Node(\"type\", JType());"
							},
							{
								"@type": "invalid",
								"value": "final Rule name = String(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule typeAndName = Split(type, KeepLast(new FoldingDivider(new TypeFolder())), name);"
							},
							{
								"@type": "invalid",
								"value": "// Handle optional modifiers before type"
							},
							{
								"@type": "invalid",
								"value": "final Rule modifiers = Delimited(\"modifiers\", Tag(\"modifier\", String(\"value\")), \" \");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withModifiers = Split(modifiers, KeepLast(new FoldingDivider(new TypeFolder())), type);"
							},
							{
								"@type": "invalid",
								"value": "Rule beforeName = Or(withModifiers, type);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", Last(beforeName, \" \", name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule type = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "type.set(Or(Generic(type), Array(type), Identifier(), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return type;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Array",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"array\", Strip(Suffix(Node(\"child\", type), \"[]\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Identifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"identifier\", StrippedIdentifier(\"value\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StrippedIdentifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Strip(FilterRule.Identifier(String(key)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "key",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Generic",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"generic\",\r\n\t\t\t\t\t\t\t Strip(Suffix(First(Strip(String(\"base\")), \"<\", NodeListRule.Values(\"arguments\", type)), \">\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Invalid",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"invalid\", Placeholder(String(\"value\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize list elements: 
				{
					"@type": "interface",
					"modifiers": "sealed public",
					"name": "JavaRootSegment",
					"children": [
						{
							"@type": "whitespace"
						}
					],
					"variants": [
						{
							"variant": "Invalid"
						},
						{
							"variant": "Import"
						},
						{
							"variant": "JStructure"
						},
						{
							"variant": "Package"
						},
						{
							"variant": "Whitespace"
						}
					]
				}
				0) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JavaRootSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Import"
								},
								{
									"variant": "JStructure"
								},
								{
									"variant": "Package"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				1) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "CRootSegment",
							"children": [
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "after()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "identifier",
													"value": "String"
												}
											]
										}
									}
								},
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Structure"
								},
								{
									"variant": "Function"
								}
							]
						}
				2) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "public sealed",
							"name": "JStructureSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "JStructure"
								},
								{
									"variant": "Method"
								},
								{
									"variant": "Whitespace"
								},
								{
									"variant": "Field"
								},
								{
									"variant": "LineComment"
								},
								{
									"variant": "BlockComment"
								}
							]
						}
				3) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JFunctionSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Placeholder"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				4) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "CFunctionSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Placeholder"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				5) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [extends, variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JStructure",
							"extends": {
								"@type": "invalid",
								"value": " JavaRootSegment, JStructureSegment "
							},
							"children": [
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "modifiers()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "identifier",
													"value": "String"
												}
											]
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "name()",
										"type": {
											"@type": "identifier",
											"value": "String"
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "typeParameters()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "generic",
													"base": "List",
													"arguments": [
														{
															"@type": "identifier",
															"value": "Identifier"
														}
													]
												}
											]
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "children()",
										"type": {
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JStructureSegment"
												}
											]
										}
									}
								},
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Interface"
								},
								{
									"variant": "JClass"
								},
								{
									"variant": "Record"
								}
							]
						}
				6) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "public sealed",
							"name": "CParameter",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "CDefinition"
								},
								{
									"variant": "CFunctionPointerDefinition"
								}
							]
						}
0) Failed to deserialize 'JavaRoot': 
	{
		"children": [
			{
				"@type": "package",
				"value": "magma.compile"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.FilterRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.FoldingDivider"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.LazyRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.NodeListRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.NodeRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.Rule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.SplitRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.Splitter"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.StringRule"
			},
			{
				"@type": "import",
				"value": "magma.compile.rule.TypeFolder"
			},
			{
				"@type": "import",
				"value": "magma.option.Option"
			},
			{
				"@type": "import",
				"value": "java.util.List"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.DividingSplitter.KeepLast"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.EmptyRule.Empty"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NodeListRule.*"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NodeRule.Node"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.NonEmptyListRule.NonEmptyList"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.OrRule.Or"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.PlaceholderRule.Placeholder"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.PrefixRule.Prefix"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.SplitRule.*"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.StringRule.String"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.StripRule.Strip"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.SuffixRule.Suffix"
			},
			{
				"@type": "import",
				"value": "static magma.compile.rule.TagRule.Tag"
			},
			{
				"@type": "class",
				"modifiers": "public",
				"name": "Lang",
				"children": [
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					},
					{
						"@type": "line-comment",
						"value": " Sealed interface for C parameter types"
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"statement\")\r\n\tpublic",
						"name": "Field",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"generic\")\r\n\tpublic",
						"name": "Generic",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "base",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "arguments",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"array\")\r\n\tpublic",
						"name": "Array",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "JavaDefinition",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							},
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Modifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"modifier\")\r\n\tpublic",
						"name": "Modifier",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"method\")\r\n\tpublic",
						"name": "Method",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JFunctionSegment"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"invalid\")\r\n\tpublic",
						"name": "Invalid",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, CRootSegment, JavaType, CType, JFunctionSegment,\r\n\t\t\tCFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"class\")\r\n\tpublic",
						"name": "JClass",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"interface\")\r\n\tpublic",
						"name": "Interface",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"record\")\r\n\tpublic",
						"name": "Record",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"struct\")\r\n\tpublic",
						"name": "Structure",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "fields",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CDefinition"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"whitespace\")\r\n\tpublic",
						"name": "Whitespace",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"placeholder\")\r\n\tpublic",
						"name": "Placeholder",
						"implementsClause": {
							"@type": "invalid",
							"value": " JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "JavaRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "CRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"import\")\r\n\tpublic",
						"name": "Import",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"package\")\r\n\tpublic",
						"name": "Package",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "CDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointerDefinition\")\r\n\tpublic",
						"name": "CFunctionPointerDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"function\")\r\n\tpublic",
						"name": "Function",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "CDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CParameter"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CFunctionSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"identifier\")\r\n\tpublic",
						"name": "Identifier",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"pointer\")\r\n\tpublic",
						"name": "Pointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointer\")\r\n\tpublic",
						"name": "FunctionPointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"line-comment\")\r\n\tpublic",
						"name": "LineComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"block-comment\")\r\n\tpublic",
						"name": "BlockComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", Strip(\"\", Or(CStructure(), Function(), Invalid()), \"after\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Function",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final NodeRule definition = new NodeRule(\"definition\", CDefinition());"
							},
							{
								"@type": "invalid",
								"value": "final Rule params = Values(\"params\", Or(CFunctionPointerDefinition(), CDefinition()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule body = Statements(\"body\", CFunctionSegment());"
							},
							{
								"@type": "invalid",
								"value": "final Rule functionDecl =\r\n\t\t\t\tFirst(Suffix(First(definition, \"(\", params), \")\"), \" {\", Suffix(body, System.lineSeparator() + \"}"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"function\", First(maybeTemplate, \"\", functionDecl));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionPointerDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Generates: returnType (*name)(paramTypes)"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"functionPointerDefinition\",\r\n\t\t\t\t\t\t\t Suffix(First(Suffix(First(Node(\"returnType\", CType()), \" (*\", String(\"name\")), \")(\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tValues(\"paramTypes\", CType())), \")\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Last(Node(\"type\", CType()), \" \", new StringRule(\"name\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "// Function pointer: returnType (*)(paramType1, paramType2, ...)"
							},
							{
								"@type": "invalid",
								"value": "final Rule funcPtr =\r\n\t\t\t\tTag(\"functionPointer\", Suffix(First(Node(\"returnType\", rule), \" (*)(\", Values(\"paramTypes\", rule)), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Or(funcPtr, Identifier(), Tag(\"pointer\", Suffix(Node(\"child\", rule), \"*\")), Generic(rule), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// For template structs, use plain name without type parameters in the"
							},
							{
								"@type": "invalid",
								"value": "// declaration"
							},
							{
								"@type": "invalid",
								"value": "final Rule plainName = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structPrefix = Prefix(\"struct \", plainName);"
							},
							{
								"@type": "invalid",
								"value": "final Rule fields = Statements(\"fields\", Suffix(CDefinition(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule structWithFields = Suffix(First(structPrefix, \"{\", fields), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structComplete = Suffix(structWithFields, \";"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"struct\", First(maybeTemplate, \"\", structComplete));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule segment =\r\n\t\t\t\tOr(Namespace(\"package\"), Namespace(\"import\"), Structures(StructureSegment()), BlockComment(), Whitespace());"
							},
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", segment);"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Structures",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(JStructure(\"class\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"interface\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"record\", structureMember));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "structureMember",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Whitespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"whitespace\", Strip(Empty));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Namespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(type, Strip(Prefix(type + \" \", Suffix(Invalid(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule modifiers = String(\"modifiers\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithTypeArguments = NameWithTypeParameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters =\r\n\t\t\t\tStrip(Or(Suffix(First(maybeWithTypeArguments, \"(\", Parameters()), \")\"), maybeWithTypeArguments));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters1 =\r\n\t\t\t\tOr(Last(maybeWithParameters, \"extends\", Node(\"extends\", JType())), maybeWithParameters);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent =\r\n\t\t\t\tOr(Last(maybeWithParameters1, \"implements\", Node(\"implementsClause\", JType())), maybeWithParameters1);"
							},
							{
								"@type": "invalid",
								"value": "final Rule children = Statements(\"children\", rule);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent1 =\r\n\t\t\t\tOr(Last(beforeContent, \"permits\", Delimited(\"variants\", StrippedIdentifier(\"variant\"), \",\")), beforeContent);"
							},
							{
								"@type": "invalid",
								"value": "final Rule aClass = First(First(Strip(Or(modifiers, Empty)), type + \" \", beforeContent1), \"{\", children);\r\n\t\treturn Tag(type, Strip(Suffix(aClass, \"}"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "NameWithTypeParameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule name = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withTypeParameters = Suffix(First(name, \"<\", Values(\"typeParameters\", Identifier())), \">\");"
							},
							{
								"@type": "invalid",
								"value": "return Strip(Or(withTypeParameters, name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StructureSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule structureMember = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "structureMember.set(Or(Structures(structureMember),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Statement(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t JMethod(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t LineComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t BlockComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Whitespace()));"
							},
							{
								"@type": "invalid",
								"value": "return structureMember;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "BlockComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"block-comment\", Strip(Prefix(\"/*\", Suffix(String(\"value\"), \"*/"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "LineComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"line-comment\", Strip(Prefix(\"//\", String(\"value\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Statement",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"statement\", Strip(Suffix(Node(\"value\", JDefinition()), \";"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethod",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "Rule params = Parameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule header = Strip(Suffix(Last(Node(\"definition\", JDefinition()), \"(\", params), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule withBody = Suffix(First(header, \"{\", Statements(\"body\", JMethodSegment())), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"method\", Strip(Or(Suffix(header, \";"
							},
							{
								"@type": "invalid",
								"value": "\"), withBody)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethodSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Strip(Or(Whitespace(), Invalid())));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "If",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"if\", Prefix(\"if\", Strip(Prefix(\"(\", First(Node(\"condition\", JExpression()), \")\", Node(\"body\", rule))))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "LazyRule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JExpression",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or();"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(Whitespace(), Prefix(System.lineSeparator() + \"\\t\", Invalid()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Parameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Values(\"params\", Or(ParameterDefinition(), Whitespace()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "ParameterDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Parameters don't have modifiers, just type and name"
							},
							{
								"@type": "invalid",
								"value": "final FoldingDivider typeDivider = new FoldingDivider(new TypeFolder());"
							},
							{
								"@type": "invalid",
								"value": "final Splitter typeSplitter = KeepLast(typeDivider);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", new SplitRule(Node(\"type\", JType()), String(\"name\"), typeSplitter));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Split into modifiers+type and name using type-aware splitting"
							},
							{
								"@type": "invalid",
								"value": "final Rule type = Node(\"type\", JType());"
							},
							{
								"@type": "invalid",
								"value": "final Rule name = String(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule typeAndName = Split(type, KeepLast(new FoldingDivider(new TypeFolder())), name);"
							},
							{
								"@type": "invalid",
								"value": "// Handle optional modifiers before type"
							},
							{
								"@type": "invalid",
								"value": "final Rule modifiers = Delimited(\"modifiers\", Tag(\"modifier\", String(\"value\")), \" \");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withModifiers = Split(modifiers, KeepLast(new FoldingDivider(new TypeFolder())), type);"
							},
							{
								"@type": "invalid",
								"value": "Rule beforeName = Or(withModifiers, type);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", Last(beforeName, \" \", name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule type = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "type.set(Or(Generic(type), Array(type), Identifier(), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return type;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Array",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"array\", Strip(Suffix(Node(\"child\", type), \"[]\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Identifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"identifier\", StrippedIdentifier(\"value\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StrippedIdentifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Strip(FilterRule.Identifier(String(key)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "key",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Generic",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"generic\",\r\n\t\t\t\t\t\t\t Strip(Suffix(First(Strip(String(\"base\")), \"<\", NodeListRule.Values(\"arguments\", type)), \">\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Invalid",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"invalid\", Placeholder(String(\"value\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "whitespace"
					}
				]
			},
			{
				"@type": "whitespace"
			}
		]
	}
	0) Failed to deserialize list elements: 
		{
			"@type": "package",
			"value": "magma.compile"
		}
		0) Failed to deserialize 'JClass': 
			{
				"@type": "class",
				"modifiers": "public",
				"name": "Lang",
				"children": [
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CType",
						"children": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					},
					{
						"@type": "line-comment",
						"value": " Sealed interface for C parameter types"
					},
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"statement\")\r\n\tpublic",
						"name": "Field",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"generic\")\r\n\tpublic",
						"name": "Generic",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "base",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "arguments",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"array\")\r\n\tpublic",
						"name": "Array",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "JavaDefinition",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "JavaType"
								}
							},
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Modifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"modifier\")\r\n\tpublic",
						"name": "Modifier",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"method\")\r\n\tpublic",
						"name": "Method",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "JavaDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JFunctionSegment"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"invalid\")\r\n\tpublic",
						"name": "Invalid",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, CRootSegment, JavaType, CType, JFunctionSegment,\r\n\t\t\tCFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"class\")\r\n\tpublic",
						"name": "JClass",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"interface\")\r\n\tpublic",
						"name": "Interface",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"record\")\r\n\tpublic",
						"name": "Record",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructure"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "modifiers",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JStructureSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JavaDefinition"
												}
											]
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "implementsClause",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"struct\")\r\n\tpublic",
						"name": "Structure",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "fields",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CDefinition"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"whitespace\")\r\n\tpublic",
						"name": "Whitespace",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment, JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"placeholder\")\r\n\tpublic",
						"name": "Placeholder",
						"implementsClause": {
							"@type": "invalid",
							"value": " JFunctionSegment, CFunctionSegment "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "JavaRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "JavaRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "public",
						"name": "CRoot",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "children",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CRootSegment"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"import\")\r\n\tpublic",
						"name": "Import",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"package\")\r\n\tpublic",
						"name": "Package",
						"implementsClause": {
							"@type": "identifier",
							"value": "JavaRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"definition\")\r\n\tpublic",
						"name": "CDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointerDefinition\")\r\n\tpublic",
						"name": "CFunctionPointerDefinition",
						"implementsClause": {
							"@type": "identifier",
							"value": "CParameter"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "name",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"function\")\r\n\tpublic",
						"name": "Function",
						"implementsClause": {
							"@type": "identifier",
							"value": "CRootSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "definition",
								"type": {
									"@type": "identifier",
									"value": "CDefinition"
								}
							},
							{
								"@type": "definition",
								"name": "params",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CParameter"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "body",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CFunctionSegment"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "after",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "identifier",
											"value": "String"
										}
									]
								}
							},
							{
								"@type": "definition",
								"name": "typeParameters",
								"type": {
									"@type": "generic",
									"base": "Option",
									"arguments": [
										{
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "Identifier"
												}
											]
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"identifier\")\r\n\tpublic",
						"name": "Identifier",
						"implementsClause": {
							"@type": "invalid",
							"value": " JavaType, CType "
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"pointer\")\r\n\tpublic",
						"name": "Pointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "child",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"functionPointer\")\r\n\tpublic",
						"name": "FunctionPointer",
						"implementsClause": {
							"@type": "identifier",
							"value": "CType"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "returnType",
								"type": {
									"@type": "identifier",
									"value": "CType"
								}
							},
							{
								"@type": "definition",
								"name": "paramTypes",
								"type": {
									"@type": "generic",
									"base": "List",
									"arguments": [
										{
											"@type": "identifier",
											"value": "CType"
										}
									]
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"line-comment\")\r\n\tpublic",
						"name": "LineComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "record",
						"modifiers": "@Tag(\"block-comment\")\r\n\tpublic",
						"name": "BlockComment",
						"implementsClause": {
							"@type": "identifier",
							"value": "JStructureSegment"
						},
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "value",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", Strip(\"\", Or(CStructure(), Function(), Invalid()), \"after\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Function",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final NodeRule definition = new NodeRule(\"definition\", CDefinition());"
							},
							{
								"@type": "invalid",
								"value": "final Rule params = Values(\"params\", Or(CFunctionPointerDefinition(), CDefinition()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule body = Statements(\"body\", CFunctionSegment());"
							},
							{
								"@type": "invalid",
								"value": "final Rule functionDecl =\r\n\t\t\t\tFirst(Suffix(First(definition, \"(\", params), \")\"), \" {\", Suffix(body, System.lineSeparator() + \"}"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"function\", First(maybeTemplate, \"\", functionDecl));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionPointerDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Generates: returnType (*name)(paramTypes)"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"functionPointerDefinition\",\r\n\t\t\t\t\t\t\t Suffix(First(Suffix(First(Node(\"returnType\", CType()), \" (*\", String(\"name\")), \")(\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tValues(\"paramTypes\", CType())), \")\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Last(Node(\"type\", CType()), \" \", new StringRule(\"name\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "// Function pointer: returnType (*)(paramType1, paramType2, ...)"
							},
							{
								"@type": "invalid",
								"value": "final Rule funcPtr =\r\n\t\t\t\tTag(\"functionPointer\", Suffix(First(Node(\"returnType\", rule), \" (*)(\", Values(\"paramTypes\", rule)), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Or(funcPtr, Identifier(), Tag(\"pointer\", Suffix(Node(\"child\", rule), \"*\")), Generic(rule), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// For template structs, use plain name without type parameters in the"
							},
							{
								"@type": "invalid",
								"value": "// declaration"
							},
							{
								"@type": "invalid",
								"value": "final Rule plainName = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structPrefix = Prefix(\"struct \", plainName);"
							},
							{
								"@type": "invalid",
								"value": "final Rule fields = Statements(\"fields\", Suffix(CDefinition(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule structWithFields = Suffix(First(structPrefix, \"{\", fields), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule structComplete = Suffix(structWithFields, \";"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "// Add template declaration only if type parameters exist (non-empty list)"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateParams = Values(\"typeParameters\", Prefix(\"typename \", Identifier()));"
							},
							{
								"@type": "invalid",
								"value": "final Rule templateDecl =\r\n\t\t\t\tNonEmptyList(\"typeParameters\", Prefix(\"template<\", Suffix(templateParams, \">\" + System.lineSeparator())));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeTemplate = Or(templateDecl, Empty);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"struct\", First(maybeTemplate, \"\", structComplete));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JRoot",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "public"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule segment =\r\n\t\t\t\tOr(Namespace(\"package\"), Namespace(\"import\"), Structures(StructureSegment()), BlockComment(), Whitespace());"
							},
							{
								"@type": "invalid",
								"value": "return Statements(\"children\", segment);"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Structures",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(JStructure(\"class\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"interface\", structureMember),\r\n\t\t\t\t\t\t\tJStructure(\"record\", structureMember));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "structureMember",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Whitespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"whitespace\", Strip(Empty));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Namespace",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(type, Strip(Prefix(type + \" \", Suffix(Invalid(), \";"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JStructure",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule modifiers = String(\"modifiers\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithTypeArguments = NameWithTypeParameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters =\r\n\t\t\t\tStrip(Or(Suffix(First(maybeWithTypeArguments, \"(\", Parameters()), \")\"), maybeWithTypeArguments));"
							},
							{
								"@type": "invalid",
								"value": "final Rule maybeWithParameters1 =\r\n\t\t\t\tOr(Last(maybeWithParameters, \"extends\", Node(\"extends\", JType())), maybeWithParameters);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent =\r\n\t\t\t\tOr(Last(maybeWithParameters1, \"implements\", Node(\"implementsClause\", JType())), maybeWithParameters1);"
							},
							{
								"@type": "invalid",
								"value": "final Rule children = Statements(\"children\", rule);"
							},
							{
								"@type": "invalid",
								"value": "final Rule beforeContent1 =\r\n\t\t\t\tOr(Last(beforeContent, \"permits\", Delimited(\"variants\", StrippedIdentifier(\"variant\"), \",\")), beforeContent);"
							},
							{
								"@type": "invalid",
								"value": "final Rule aClass = First(First(Strip(Or(modifiers, Empty)), type + \" \", beforeContent1), \"{\", children);\r\n\t\treturn Tag(type, Strip(Suffix(aClass, \"}"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							},
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "NameWithTypeParameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final Rule name = StrippedIdentifier(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withTypeParameters = Suffix(First(name, \"<\", Values(\"typeParameters\", Identifier())), \">\");"
							},
							{
								"@type": "invalid",
								"value": "return Strip(Or(withTypeParameters, name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StructureSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule structureMember = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "structureMember.set(Or(Structures(structureMember),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Statement(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t JMethod(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t LineComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t BlockComment(),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t Whitespace()));"
							},
							{
								"@type": "invalid",
								"value": "return structureMember;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "BlockComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"block-comment\", Strip(Prefix(\"/*\", Suffix(String(\"value\"), \"*/"
							},
							{
								"@type": "invalid",
								"value": "\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "LineComment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"line-comment\", Strip(Prefix(\"//\", String(\"value\"))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Statement",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"statement\", Strip(Suffix(Node(\"value\", JDefinition()), \";"
							},
							{
								"@type": "invalid",
								"value": "\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethod",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "Rule params = Parameters();"
							},
							{
								"@type": "invalid",
								"value": "final Rule header = Strip(Suffix(Last(Node(\"definition\", JDefinition()), \"(\", params), \")\"));"
							},
							{
								"@type": "invalid",
								"value": "final Rule withBody = Suffix(First(header, \"{\", Statements(\"body\", JMethodSegment())), \"}"
							},
							{
								"@type": "invalid",
								"value": "\");"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"method\", Strip(Or(Suffix(header, \";"
							},
							{
								"@type": "invalid",
								"value": "\"), withBody)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JMethodSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule rule = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "rule.set(Strip(Or(Whitespace(), Invalid())));"
							},
							{
								"@type": "invalid",
								"value": "return rule;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "If",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"if\", Prefix(\"if\", Strip(Prefix(\"(\", First(Node(\"condition\", JExpression()), \")\", Node(\"body\", rule))))));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "rule",
								"type": {
									"@type": "identifier",
									"value": "LazyRule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JExpression",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or();"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "CFunctionSegment",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Or(Whitespace(), Prefix(System.lineSeparator() + \"\\t\", Invalid()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Parameters",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Values(\"params\", Or(ParameterDefinition(), Whitespace()));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "ParameterDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Parameters don't have modifiers, just type and name"
							},
							{
								"@type": "invalid",
								"value": "final FoldingDivider typeDivider = new FoldingDivider(new TypeFolder());"
							},
							{
								"@type": "invalid",
								"value": "final Splitter typeSplitter = KeepLast(typeDivider);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", new SplitRule(Node(\"type\", JType()), String(\"name\"), typeSplitter));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JDefinition",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "// Use TypeFolder to properly parse generic types like Function<T, R>"
							},
							{
								"@type": "invalid",
								"value": "// Split into modifiers+type and name using type-aware splitting"
							},
							{
								"@type": "invalid",
								"value": "final Rule type = Node(\"type\", JType());"
							},
							{
								"@type": "invalid",
								"value": "final Rule name = String(\"name\");"
							},
							{
								"@type": "invalid",
								"value": "final Rule typeAndName = Split(type, KeepLast(new FoldingDivider(new TypeFolder())), name);"
							},
							{
								"@type": "invalid",
								"value": "// Handle optional modifiers before type"
							},
							{
								"@type": "invalid",
								"value": "final Rule modifiers = Delimited(\"modifiers\", Tag(\"modifier\", String(\"value\")), \" \");"
							},
							{
								"@type": "invalid",
								"value": "final Rule withModifiers = Split(modifiers, KeepLast(new FoldingDivider(new TypeFolder())), type);"
							},
							{
								"@type": "invalid",
								"value": "Rule beforeName = Or(withModifiers, type);"
							},
							{
								"@type": "invalid",
								"value": "return Tag(\"definition\", Last(beforeName, \" \", name));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "JType",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "final LazyRule type = new LazyRule();"
							},
							{
								"@type": "invalid",
								"value": "type.set(Or(Generic(type), Array(type), Identifier(), Invalid()));"
							},
							{
								"@type": "invalid",
								"value": "return type;"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Array",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"array\", Strip(Suffix(Node(\"child\", type), \"[]\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Identifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"identifier\", StrippedIdentifier(\"value\"));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "StrippedIdentifier",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Strip(FilterRule.Identifier(String(key)));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "key",
								"type": {
									"@type": "identifier",
									"value": "String"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Generic",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"generic\",\r\n\t\t\t\t\t\t\t Strip(Suffix(First(Strip(String(\"base\")), \"<\", NodeListRule.Values(\"arguments\", type)), \">\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "definition",
								"name": "type",
								"type": {
									"@type": "identifier",
									"value": "Rule"
								}
							}
						]
					},
					{
						"@type": "method",
						"definition": {
							"@type": "definition",
							"name": "Invalid",
							"type": {
								"@type": "identifier",
								"value": "Rule"
							},
							"modifiers": [
								{
									"@type": "modifier",
									"value": "private"
								},
								{
									"@type": "modifier",
									"value": "static"
								}
							]
						},
						"body": [
							{
								"@type": "invalid",
								"value": "return Tag(\"invalid\", Placeholder(String(\"value\")));"
							},
							{
								"@type": "whitespace"
							}
						],
						"params": [
							{
								"@type": "whitespace"
							}
						]
					},
					{
						"@type": "whitespace"
					}
				]
			}
			0) Failed to deserialize list elements: 
				{
					"@type": "interface",
					"modifiers": "sealed public",
					"name": "JavaRootSegment",
					"children": [
						{
							"@type": "whitespace"
						}
					],
					"variants": [
						{
							"variant": "Invalid"
						},
						{
							"variant": "Import"
						},
						{
							"variant": "JStructure"
						},
						{
							"variant": "Package"
						},
						{
							"variant": "Whitespace"
						}
					]
				}
				0) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JavaRootSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Import"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Package"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JavaRootSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Import"
								},
								{
									"variant": "JStructure"
								},
								{
									"variant": "Package"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				1) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CRootSegment",
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "after()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Structure"
							},
							{
								"variant": "Function"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "CRootSegment",
							"children": [
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "after()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "identifier",
													"value": "String"
												}
											]
										}
									}
								},
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Structure"
								},
								{
									"variant": "Function"
								}
							]
						}
				2) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "JStructureSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "JStructure"
							},
							{
								"variant": "Method"
							},
							{
								"variant": "Whitespace"
							},
							{
								"variant": "Field"
							},
							{
								"variant": "LineComment"
							},
							{
								"variant": "BlockComment"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "public sealed",
							"name": "JStructureSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "JStructure"
								},
								{
									"variant": "Method"
								},
								{
									"variant": "Whitespace"
								},
								{
									"variant": "Field"
								},
								{
									"variant": "LineComment"
								},
								{
									"variant": "BlockComment"
								}
							]
						}
				3) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JFunctionSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Placeholder"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				4) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "CFunctionSegment",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Invalid"
							},
							{
								"variant": "Placeholder"
							},
							{
								"variant": "Whitespace"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "CFunctionSegment",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Invalid"
								},
								{
									"variant": "Placeholder"
								},
								{
									"variant": "Whitespace"
								}
							]
						}
				5) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "sealed public",
						"name": "JStructure",
						"extends": {
							"@type": "invalid",
							"value": " JavaRootSegment, JStructureSegment "
						},
						"children": [
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "modifiers()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "identifier",
												"value": "String"
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "name()",
									"type": {
										"@type": "identifier",
										"value": "String"
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "typeParameters()",
									"type": {
										"@type": "generic",
										"base": "Option",
										"arguments": [
											{
												"@type": "generic",
												"base": "List",
												"arguments": [
													{
														"@type": "identifier",
														"value": "Identifier"
													}
												]
											}
										]
									}
								}
							},
							{
								"@type": "statement",
								"value": {
									"@type": "definition",
									"name": "children()",
									"type": {
										"@type": "generic",
										"base": "List",
										"arguments": [
											{
												"@type": "identifier",
												"value": "JStructureSegment"
											}
										]
									}
								}
							},
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "Interface"
							},
							{
								"variant": "JClass"
							},
							{
								"variant": "Record"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [extends, variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "sealed public",
							"name": "JStructure",
							"extends": {
								"@type": "invalid",
								"value": " JavaRootSegment, JStructureSegment "
							},
							"children": [
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "modifiers()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "identifier",
													"value": "String"
												}
											]
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "name()",
										"type": {
											"@type": "identifier",
											"value": "String"
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "typeParameters()",
										"type": {
											"@type": "generic",
											"base": "Option",
											"arguments": [
												{
													"@type": "generic",
													"base": "List",
													"arguments": [
														{
															"@type": "identifier",
															"value": "Identifier"
														}
													]
												}
											]
										}
									}
								},
								{
									"@type": "statement",
									"value": {
										"@type": "definition",
										"name": "children()",
										"type": {
											"@type": "generic",
											"base": "List",
											"arguments": [
												{
													"@type": "identifier",
													"value": "JStructureSegment"
												}
											]
										}
									}
								},
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "Interface"
								},
								{
									"variant": "JClass"
								},
								{
									"variant": "Record"
								}
							]
						}
				6) Failed to deserialize 'Interface': 
					{
						"@type": "interface",
						"modifiers": "public sealed",
						"name": "CParameter",
						"children": [
							{
								"@type": "whitespace"
							}
						],
						"variants": [
							{
								"variant": "CDefinition"
							},
							{
								"variant": "CFunctionPointerDefinition"
							}
						]
					}
					0) Incomplete deserialization for 'Interface': leftover fields [variants] were not consumed. This indicates a mismatch between the Node structure and the target ADT.: 
						{
							"@type": "interface",
							"modifiers": "public sealed",
							"name": "CParameter",
							"children": [
								{
									"@type": "whitespace"
								}
							],
							"variants": [
								{
									"variant": "CDefinition"
								},
								{
									"variant": "CFunctionPointerDefinition"
								}
							]
						}

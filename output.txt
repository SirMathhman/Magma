Found 46 Java files to compile
Compiling: .\src\main\java\magma\compile\context\Context.java
Successfully compiled: .\src\main\java\magma\compile\context\Context.java
Compiling: .\src\main\java\magma\compile\context\NodeContext.java
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\context\NodeContext.java
Compiling: .\src\main\java\magma\compile\context\StringContext.java
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\context\StringContext.java
Compiling: .\src\main\java\magma\compile\error\ApplicationError.java
Successfully compiled: .\src\main\java\magma\compile\error\ApplicationError.java
Compiling: .\src\main\java\magma\compile\error\CompileError.java
Transforming parameter: reason of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: sourceCode of type: Identifier[value=Context]
Checking if functional interface: Identifier[value=Context] (class: Identifier)
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Transforming parameter: index of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\error\CompileError.java
Compiling: .\src\main\java\magma\compile\error\Error.java
Successfully compiled: .\src\main\java\magma\compile\error\Error.java
Compiling: .\src\main\java\magma\compile\error\ThrowableError.java
Successfully compiled: .\src\main\java\magma\compile\error\ThrowableError.java
Compiling: .\src\main\java\magma\compile\Lang.java
Transforming parameter: structureMember of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: type of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: type of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: type of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: type of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\Lang.java
Compiling: .\src\main\java\magma\compile\Node.java
Transforming parameter: value of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: value of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: values of type: Identifier[value=ListNode]
Checking if functional interface: Identifier[value=ListNode] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: type of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: type of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Transforming parameter: builder of type: Identifier[value=StringBuilder]
Checking if functional interface: Identifier[value=StringBuilder] (class: Identifier)
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\Node.java
Compiling: .\src\main\java\magma\compile\rule\DelimitedRule.java
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\DelimitedRule.java
Compiling: .\src\main\java\magma\compile\rule\Divider.java
Successfully compiled: .\src\main\java\magma\compile\rule\Divider.java
Compiling: .\src\main\java\magma\compile\rule\DivideState.java
Transforming parameter: buffer of type: Identifier[value=StringBuilder]
Checking if functional interface: Identifier[value=StringBuilder] (class: Identifier)
Transforming parameter: depth of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Transforming parameter: segments of type: Identifier[value=ListString]
Checking if functional interface: Identifier[value=ListString] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: c of type: Identifier[value=char]
Checking if functional interface: Identifier[value=char] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\DivideState.java
Compiling: .\src\main\java\magma\compile\rule\EmptyRule.java
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\EmptyRule.java
Compiling: .\src\main\java\magma\compile\rule\EscapingFolder.java
Transforming parameter: state of type: Identifier[value=DivideState]
Checking if functional interface: Identifier[value=DivideState] (class: Identifier)
Transforming parameter: c of type: Identifier[value=char]
Checking if functional interface: Identifier[value=char] (class: Identifier)
Transforming parameter: tuple of type: Identifier[value=Character]
Checking if functional interface: Identifier[value=Character] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\EscapingFolder.java
Compiling: .\src\main\java\magma\compile\rule\Filter.java
Successfully compiled: .\src\main\java\magma\compile\rule\Filter.java
Compiling: .\src\main\java\magma\compile\rule\FilterRule.java
Transforming parameter: filter of type: Identifier[value=Filter]
Checking if functional interface: Identifier[value=Filter] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: filter of type: Identifier[value=Filter]
Checking if functional interface: Identifier[value=Filter] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\FilterRule.java
Compiling: .\src\main\java\magma\compile\rule\FirstLocator.java
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: infix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\FirstLocator.java
Compiling: .\src\main\java\magma\compile\rule\Folder.java
Successfully compiled: .\src\main\java\magma\compile\rule\Folder.java
Compiling: .\src\main\java\magma\compile\rule\FoldingDivider.java
Transforming parameter: folder of type: Identifier[value=Folder]
Checking if functional interface: Identifier[value=Folder] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\FoldingDivider.java
Compiling: .\src\main\java\magma\compile\rule\IdentifierFilter.java
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\IdentifierFilter.java
Compiling: .\src\main\java\magma\compile\rule\InfixRule.java
Transforming parameter: left of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: infix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: right of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: leftRule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: infix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rightRule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\InfixRule.java
Compiling: .\src\main\java\magma\compile\rule\LastLocator.java
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: infix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\LastLocator.java
Compiling: .\src\main\java\magma\compile\rule\LazyRule.java
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\LazyRule.java
Compiling: .\src\main\java\magma\compile\rule\Locator.java
Successfully compiled: .\src\main\java\magma\compile\rule\Locator.java
Compiling: .\src\main\java\magma\compile\rule\NodeListRule.java
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: delimiter of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: value of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\NodeListRule.java
Compiling: .\src\main\java\magma\compile\rule\NodeRule.java
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\NodeRule.java
Compiling: .\src\main\java\magma\compile\rule\OrRule.java
Transforming parameter: rules of type: Invalid[value=Rule..., after=magma.option.None@2530c12]
Checking if functional interface: Invalid[value=Rule..., after=magma.option.None@2530c12] (class: Invalid)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\OrRule.java
Compiling: .\src\main\java\magma\compile\rule\PlaceholderRule.java
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\PlaceholderRule.java
Compiling: .\src\main\java\magma\compile\rule\PrefixRule.java
Transforming parameter: prefix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\PrefixRule.java
Compiling: .\src\main\java\magma\compile\rule\Rule.java
Successfully compiled: .\src\main\java\magma\compile\rule\Rule.java
Compiling: .\src\main\java\magma\compile\rule\StatementFolder.java
Transforming parameter: state of type: Identifier[value=DivideState]
Checking if functional interface: Identifier[value=DivideState] (class: Identifier)
Transforming parameter: c of type: Identifier[value=char]
Checking if functional interface: Identifier[value=char] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\StatementFolder.java
Compiling: .\src\main\java\magma\compile\rule\StringRule.java
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\StringRule.java
Compiling: .\src\main\java\magma\compile\rule\StripRule.java
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: left of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: right of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\StripRule.java
Compiling: .\src\main\java\magma\compile\rule\SuffixRule.java
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: suffix of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\SuffixRule.java
Compiling: .\src\main\java\magma\compile\rule\TagRule.java
Transforming parameter: type of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: rule of type: Identifier[value=Rule]
Checking if functional interface: Identifier[value=Rule] (class: Identifier)
Transforming parameter: content of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\TagRule.java
Compiling: .\src\main\java\magma\compile\rule\ValueFolder.java
Transforming parameter: state of type: Identifier[value=DivideState]
Checking if functional interface: Identifier[value=DivideState] (class: Identifier)
Transforming parameter: c of type: Identifier[value=char]
Checking if functional interface: Identifier[value=char] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\rule\ValueFolder.java
Compiling: .\src\main\java\magma\compile\Serialize.java
Transforming parameter: clazz of type: Identifier[value=ClassT]
Checking if functional interface: Identifier[value=ClassT] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: clazz of type: Identifier[value=ClassT]
Checking if functional interface: Identifier[value=ClassT] (class: Identifier)
Transforming parameter: value of type: Identifier[value=T]
Checking if functional interface: Identifier[value=T] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@64a294a6]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@64a294a6] (class: Invalid)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@7e0b37bc]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@7e0b37bc] (class: Invalid)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@3b95a09c]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@3b95a09c] (class: Invalid)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: fieldName of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: listType of type: Identifier[value=Type]
Checking if functional interface: Identifier[value=Type] (class: Identifier)
Transforming parameter: content of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: value of type: Identifier[value=Object]
Checking if functional interface: Identifier[value=Object] (class: Identifier)
Transforming parameter: elementClass of type: Invalid[value=Class?, after=magma.option.None@6ae40994]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@6ae40994] (class: Invalid)
Transforming parameter: list of type: Invalid[value= List?, after=magma.option.None@1a93a7ca]
Checking if functional interface: Invalid[value= List?, after=magma.option.None@1a93a7ca] (class: Invalid)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@3d82c5f3]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@3d82c5f3] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@2b05039f]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@2b05039f] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@61e717c2]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@61e717c2] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: fieldName of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: fieldName of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: listType of type: Identifier[value=Type]
Checking if functional interface: Identifier[value=Type] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: component of type: Identifier[value=RecordComponent]
Checking if functional interface: Identifier[value=RecordComponent] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: elementClass of type: Invalid[value=Class?, after=magma.option.None@66cd51c3]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@66cd51c3] (class: Invalid)
Transforming parameter: nodeList of type: Identifier[value=ListNode]
Checking if functional interface: Identifier[value=ListNode] (class: Identifier)
Transforming parameter: type of type: Invalid[value=Class?, after=magma.option.None@4dcbadb4]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@4dcbadb4] (class: Invalid)
Transforming parameter: base of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: addition of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: type of type: Identifier[value=Type]
Checking if functional interface: Identifier[value=Type] (class: Identifier)
Transforming parameter: index of type: Identifier[value=int]
Checking if functional interface: Identifier[value=int] (class: Identifier)
Transforming parameter: type of type: Identifier[value=Type]
Checking if functional interface: Identifier[value=Type] (class: Identifier)
Transforming parameter: clazz of type: Invalid[value=Class?, after=magma.option.None@4e515669]
Checking if functional interface: Invalid[value=Class?, after=magma.option.None@4e515669] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: key of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: targetClass of type: Invalid[value= Class?, after=magma.option.None@17d10166]
Checking if functional interface: Invalid[value= Class?, after=magma.option.None@17d10166] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Transforming parameter: consumedFields of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: targetClass of type: Invalid[value=
			Class?, after=magma.option.None@1b9e1916]
Checking if functional interface: Invalid[value=
			Class?, after=magma.option.None@1b9e1916] (class: Invalid)
Transforming parameter: node of type: Identifier[value=Node]
Checking if functional interface: Identifier[value=Node] (class: Identifier)
Successfully compiled: .\src\main\java\magma\compile\Serialize.java
Compiling: .\src\main\java\magma\compile\Tag.java
Successfully compiled: .\src\main\java\magma\compile\Tag.java
Compiling: .\src\main\java\magma\Main.java
Transforming parameter: args of type: Array[child=Identifier[value=String]]
Checking if functional interface: Array[child=Identifier[value=String]] (class: Array)
Transforming parameter: javaSourceRoot of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: cOutputRoot of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: javaFile of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: javaSourceRoot of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: cOutputRoot of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: path of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: result of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: source of type: Identifier[value=Path]
Checking if functional interface: Identifier[value=Path] (class: Identifier)
Transforming parameter: input of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: node of type: Identifier[value=JavaRoot]
Checking if functional interface: Identifier[value=JavaRoot] (class: Identifier)
Transforming parameter: segment of type: Identifier[value=JavaRootSegment]
Checking if functional interface: Identifier[value=JavaRootSegment] (class: Identifier)
Transforming parameter: aClass of type: Identifier[value=JStructure]
Checking if functional interface: Identifier[value=JStructure] (class: Identifier)
Transforming parameter: self of type: Identifier[value=JavaStructureSegment]
Checking if functional interface: Identifier[value=JavaStructureSegment] (class: Identifier)
Transforming parameter: name of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: method of type: Identifier[value=Method]
Checking if functional interface: Identifier[value=Method] (class: Identifier)
Transforming parameter: structName of type: Identifier[value=String]
Checking if functional interface: Identifier[value=String] (class: Identifier)
Transforming parameter: method of type: Identifier[value=Method]
Checking if functional interface: Identifier[value=Method] (class: Identifier)
Transforming parameter: type of type: Identifier[value=JavaType]
Checking if functional interface: Identifier[value=JavaType] (class: Identifier)
Transforming parameter: typeVars of type: Identifier[value=SetString]
Checking if functional interface: Identifier[value=SetString] (class: Identifier)
Transforming parameter: definition of type: Identifier[value=JavaDefinition]
Checking if functional interface: Identifier[value=JavaDefinition] (class: Identifier)
Transforming parameter: type of type: Identifier[value=JavaType]
Checking if functional interface: Identifier[value=JavaType] (class: Identifier)
Transforming parameter: definition of type: Identifier[value=JavaDefinition]
Checking if functional interface: Identifier[value=JavaDefinition] (class: Identifier)
Transforming parameter: definition of type: Identifier[value=JavaDefinition]
Checking if functional interface: Identifier[value=JavaDefinition] (class: Identifier)
Transforming parameter: type of type: Identifier[value=JavaType]
Checking if functional interface: Identifier[value=JavaType] (class: Identifier)
Successfully compiled: .\src\main\java\magma\Main.java
Compiling: .\src\main\java\magma\option\None.java
Transforming parameter: mapper of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Transforming parameter: mapper of type: Identifier[value=OptionR]
Checking if functional interface: Identifier[value=OptionR] (class: Identifier)
Transforming parameter: other of type: Identifier[value=T]
Checking if functional interface: Identifier[value=T] (class: Identifier)
Successfully compiled: .\src\main\java\magma\option\None.java
Compiling: .\src\main\java\magma\option\Option.java
Successfully compiled: .\src\main\java\magma\option\Option.java
Compiling: .\src\main\java\magma\option\Some.java
Transforming parameter: mapper of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Transforming parameter: mapper of type: Identifier[value=OptionR]
Checking if functional interface: Identifier[value=OptionR] (class: Identifier)
Transforming parameter: other of type: Identifier[value=T]
Checking if functional interface: Identifier[value=T] (class: Identifier)
Successfully compiled: .\src\main\java\magma\option\Some.java
Compiling: .\src\main\java\magma\result\Err.java
Transforming parameter: fn of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Transforming parameter: fn of type: Identifier[value=X]
Checking if functional interface: Identifier[value=X] (class: Identifier)
Transforming parameter: mapper of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Successfully compiled: .\src\main\java\magma\result\Err.java
Compiling: .\src\main\java\magma\result\Ok.java
Transforming parameter: fn of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Transforming parameter: fn of type: Identifier[value=X]
Checking if functional interface: Identifier[value=X] (class: Identifier)
Transforming parameter: mapper of type: Identifier[value=R]
Checking if functional interface: Identifier[value=R] (class: Identifier)
Successfully compiled: .\src\main\java\magma\result\Ok.java
Compiling: .\src\main\java\magma\result\Result.java
Successfully compiled: .\src\main\java\magma\result\Result.java
Compiling: .\src\main\java\magma\Tuple.java
Successfully compiled: .\src\main\java\magma\Tuple.java

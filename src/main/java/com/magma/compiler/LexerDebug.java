package com.magma.compiler;

import com.magma.compiler.lexer.MagmaLexer;
import com.magma.compiler.lexer.Token;

import java.util.List;

/**
 * Debug utility to print tokens generated by the lexer.
 */
public class LexerDebug {
    public static void main(String[] args) {
        // Test case 1: Single character tokens
        debugTokens("(){},.-+;*", "Single character tokens");
        
        // Test case 2: Integer literals
        debugTokens("0 42 -1 +10", "Integer literals");
        
        // Test case 3: Identifiers and keywords
        debugTokens("var name = \"John\"; if true { print name; }", "Identifiers and keywords");
    }
    
    private static void debugTokens(String source, String testName) {
        System.out.println("=== " + testName + " ===");
        System.out.println("Source: \"" + source + "\"");
        
        MagmaLexer lexer = new MagmaLexer(source);
        List<Token> tokens = lexer.tokenize();
        
        System.out.println("Token count: " + tokens.size());
        System.out.println("Tokens:");
        
        for (int i = 0; i < tokens.size(); i++) {
            Token token = tokens.get(i);
            System.out.println(i + ": " + token.getType() + 
                               " (lexeme: \"" + token.getLexeme() + "\"" +
                               (token.getLiteral() != null ? ", literal: " + token.getLiteral() : "") +
                               ")");
        }
        
        System.out.println();
    }
}
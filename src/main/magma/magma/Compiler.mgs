class fn String() => {
  fn toLowerCase() : String => {
    return this;
  }
}

class fn Compiler(targetLanguage : String) => {
  let structs = Structs();

  let extraGlobalFunctions = ArrayList<String>();
	let enums = TupleMap<>();
	let typeAliases = TupleMap<>();
  let implMethods = TupleMap<>();
	let implMethodBodies = TupleMap<>();
	let fnReturnTypesC = TupleMap<>();

  let anonStructCounter = 0;
  let target = targetLanguage.toLowerCase();

  // Replace dotted enum accesses like Name.Member with Name_Member in the
  // provided expression and return the replaced string.
  fn replaceEnumDotAccess(expr : String) : String => {
    if (expr == null) return null;
    var out = expr;
    // enums is assumed to be a map from enum name to list of member names
    for (var eKey : enums.keys()) {
      var members = enums.get(eKey);
      if (members == null) continue;
      for (var mem : members) {
        var dotted = eKey + "." + mem;
        var repl = eKey + "_" + mem;
        // simple global replace; assumes no overlapping tokens
        out = out.replace(dotted, repl);
      }
    }
    return out;
  }
}
// Generated transpiled C++ from 'src\main\java\magma\compile\rule\DivideState.java'. This file shouldn't be edited, and rather the compiler implementation should be changed.
struct DivideState {/*???*/ segments;/*???*/ input;/*???*/ buffer;/*???*/ depth;/*???*/ index;};
/*???*/ DivideState_DivideState(/*???*/ buffer, /*???*/ depth, /*???*/ segments, /*???*/ input) {
	/*???*/ buffer;
	/*???*/ depth;
	/*???*/ segments;
	/*???*/ input;
}
/*???*/ DivideState_DivideState(/*???*/ input) {
	this(new_???(), /*???*/, new_???(), input);
}
/*???*/ stream_DivideState() {
	return segments.stream();
}
/*???*/ enter_DivideState() {
	/*???*/ 1;
	/*???*/ this;
}
/*???*/ advance_DivideState() {
	segments.add(buffer.toString());
	this.buffer=new_???();
	/*???*/ this;
}
/*???*/ append_DivideState(/*???*/ c) {
	buffer.append(c);
	/*???*/ this;
}
/*???*/ exit_DivideState() {
	/*???*/ 1;
	/*???*/ this;
}
/*???*/ isShallow_DivideState() {
	/*???*/ 1;
}
/*???*/ isLevel_DivideState() {
	/*???*/ 0;
}
/*???*/ pop_DivideState() {
	if (/*???*/)return Option.empty();
	/*???*/ c=input.charAt(index);
	index++;
	return Option.of(c);
}
/*???*/ popAndAppendToTuple_DivideState() {
	return pop().map(/*???*/);
}
/*???*/ popAndAppendToOption_DivideState() {
	return popAndAppendToTuple().map(/*???*/);
}
/*???*/ peek_DivideState() {
	if (/*???*/)return new_???(input.charAt(index));
	else
	return new_???();
}

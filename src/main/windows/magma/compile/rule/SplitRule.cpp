// Generated transpiled C++ from 'src\main\java\magma\compile\rule\SplitRule.java'. This file shouldn't be edited, and rather the compiler implementation should be changed.
struct SplitRule {/*???*/ leftRule;/*???*/ rightRule;/*???*/ splitter;/*???*/ order;};
struct Order {};
/*???*/ evaluate_Order(/*???*/ left, /*???*/ right, /*???*/ leftRule, /*???*/ rightRule) {
}
struct LeftFirst {};
/*???*/ evaluate_LeftFirst(/*???*/ left, /*???*/ right, /*???*/ leftRule, /*???*/ rightRule) {
	return leftRule.lex(left).flatMap(/*???*/.lex(right).mapValue(/*???*/));
}
struct RightFirst {};
/*???*/ evaluate_RightFirst(/*???*/ left, /*???*/ right, /*???*/ leftRule, /*???*/ rightRule) {
	return rightRule.lex(right).flatMap(/*???*/.lex(left).mapValue(/*???*/));
}
/*???*/ First_SplitRule(/*???*/ left, /*???*/ infix, /*???*/ right) {
	/*???*/ splitter=new_???(infix, new_???());
	return new_???(left, right, splitter, new_???());
}
/*???*/ Last_SplitRule(/*???*/ leftRule, /*???*/ infix, /*???*/ rightRule) {
	/*???*/ splitter=new_???(infix, new_???());
	return new_???(leftRule, rightRule, splitter, new_???());
}
/*???*/ Split_SplitRule(/*???*/ left, /*???*/ splitter, /*???*/ right) {
	return new_???(left, right, splitter, new_???());
}
/*???*/ lex_SplitRule(/*???*/ input) {
	return /*???*/;
}
/*???*/ evaluate_SplitRule(/*???*/ left, /*???*/ right) {
	return leftRule.lex(left).flatMap(/*???*/.lex(right).mapValue(/*???*/));
}
/*???*/ generate_SplitRule(/*???*/ node) {
	return leftRule.generate(node).flatMap(/*???*/.generate(node).mapValue(/*???*/.merge(left, right)));
}
